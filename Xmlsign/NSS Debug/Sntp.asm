; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\Sntp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNtpSocket@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObject@VCAxFrameWindow@ATL@@@ATL@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObject@VCAxUIWindow@ATL@@@ATL@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$_CopyInterface@UIUnknown@@@ATL@@SAJPAPAUIUnknown@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?init@?$_CopyInterface@UIUnknown@@@ATL@@SAXPAPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$_CopyInterface@UIUnknown@@@ATL@@SAXPAPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateInstance@?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalFinalConstructRelease@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@JELNCKOF@m_dwRef?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EP@FBJOMLAB@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_AtlFinalConstruct@CComObjectRootBase@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalConstruct@CComObjectRootBase@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalFinalConstructAddRef@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetVoid@CComObjectRootBase@ATL@@QAEXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IEnumUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComObjectRootBase@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_InternalQueryInterface@?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0P@BMHEGBAP@ppvObject?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DBHNDLKF@pThis?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@BBKMJDPM@pEntries?9?$DOpFunc?5?$DN?$DN?5?$CI?$CIATL?3?3_ATL_C@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_GetEntries@?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09BEHAHIFA@_CComEnum?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_entries@?1??_GetEntries@?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalAddRef@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0P@IDNKKMJE@m_dwRef?5?$CB?$DN?5?91L?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Increment@CComSingleThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalRelease@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComSingleThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0EC@FOHBGNDM@0?5?$CG?$CG?5?$CCRelease?5called?5on?5a?5pointe@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Next@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAGJKPAPAUIUnknown@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAGJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAGJPAPAUIEnumUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@QAEJPAPAUIUnknown@@0PAU3@W4CComEnumFlags@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalRelease@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FA@KBNNCCJL@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CComObject@VCAxUIWindow@ATL@@@ATL@@6BIOleInPlaceUIWindow@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_InternalQueryInterface@CAxUIWindow@ATL@@QAEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEntries@CAxUIWindow@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0M@EHKCMBND@CAxUIWindow?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_entries@?1??_GetEntries@CAxUIWindow@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindow@CAxUIWindow@ATL@@UAGJPAPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEPAUHWND__@@PAU3@V_U_RECT@2@PBDKKV_U_MENUorID@2@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndClassName@CWindow@ATL@@SAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Register@_ATL_WNDCLASSINFOA@ATL@@QAEGPAP6GJPAUHWND__@@IIJ@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlWinModuleRegisterWndClassInfoA@ATL@@YGGPAU_ATL_WIN_MODULE70@1@PAU_ATL_BASE_MODULE70@1@PAU_ATL_WNDCLASSINFOA@1@PAP6GJPAUHWND__@@IIJ@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$AtlModuleRegisterWndClassInfoT@VAtlModuleRegisterWndClassInfoParamA@ATL@@@ATL@@YAGPAU_ATL_BASE_MODULE70@0@PAU_ATL_WIN_MODULE70@0@PAU_ATL_WNDCLASSINFOA@0@PAP6GJPAUHWND__@@IIJ@ZVAtlModuleRegisterWndClassInfoParamA@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DN@BIGELNIF@ERROR?5?3?5Invalid?5Arguments?5to?5Atl@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAE@AAVCComCriticalSection@1@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FC@CFIFHLCH@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??1?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@MPGHMANA@?$CBm_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Lock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0EL@KHCGDDHE@ERROR?5?3?5Unable?5to?5lock?5critical?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DK@EAELIHNL@ERROR?5?3?5Could?5not?5obtain?5Window?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadCursorA@AtlModuleRegisterWndClassInfoParamA@ATL@@SAPAUHICON__@@PAUHINSTANCE__@@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatWindowClassName@AtlModuleRegisterWndClassInfoParamA@ATL@@SAXPADPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09OOFFBKGI@ATL?3?$CF8?48X?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetClassInfoExA@AtlModuleRegisterWndClassInfoParamA@ATL@@SAHPAUHINSTANCE__@@PBDPAUtagWNDCLASSEXA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassExA@AtlModuleRegisterWndClassInfoParamA@ATL@@SAGPAU_ATL_WIN_MODULE70@2@PBUtagWNDCLASSEXA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlWinModuleRegisterClassExA@ATL@@YGGPAU_ATL_WIN_MODULE70@1@PBUtagWNDCLASSEXA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEHABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalSetAtIndex@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXHABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2G@Wrapper@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@SAPAXIPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3G@Wrapper@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@SAXPAXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@ABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04LOGEFONP@bRet?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@KAMJMGHJ@pProc?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@BIGOECOI@p?9?$DOpWndProc?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EP@FECMNBMC@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _$E2
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FE@GCCFFNOH@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
;	COMDAT ?GetWndClassInfo@?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAAAU_ATL_WNDCLASSINFOA@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StartWindowProc@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtractCreateWndData@CAtlWinModule@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CWndProcThunk@ATL@@QAEXP6GJPAUHWND__@@IIJ@ZPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CDynamicStdCallThunk@ATL@@QAEXKPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_06CIAHICCP@pThunk?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Init@_stdcallthunk@ATL@@QAEXKPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWNDPROC@CWndProcThunk@ATL@@QAEP6GJPAUHWND__@@IIJ@ZXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCodeAddress@CDynamicStdCallThunk@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCodeAddress@_stdcallthunk@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowLongPtrA@@YAJPAUHWND__@@HJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?wc@?1??GetWndClassInfo@?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAAAU_ATL_WNDCLASSINFOA@3@XZ@4U43@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GetWndStyle@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndStyle@?$CWinTraits@$0FGAAAAAA@$0A@@ATL@@SAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndExStyle@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndExStyle@?$CWinTraits@$0FGAAAAAA@$0A@@ATL@@SAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndCaption@?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEPAUHWND__@@PAU3@V_U_RECT@2@PBDKKV_U_MENUorID@2@GPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCreateWndData@CAtlWinModule@ATL@@QAEXPAU_AtlCreateWndData@2@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rcDefault@CWindow@ATL@@2UtagRECT@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0_U_MENUorID@ATL@@QAE@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@FJBCDDKK@AXWIN?5UI?5Window?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0_U_RECT@ATL@@QAE@PAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ContextSensitiveHelp@CAxUIWindow@ATL@@UAGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBorder@CAxUIWindow@ATL@@UAGJPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RequestBorderSpace@CAxUIWindow@ATL@@UAGJPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorderSpace@CAxUIWindow@ATL@@UAGJPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetActiveObject@CAxUIWindow@ATL@@UAGJPAUIOleInPlaceActiveObject@@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIOleInPlaceActiveObject@@@ATL@@QAEPAUIOleInPlaceActiveObject@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CComObject@VCAxUIWindow@ATL@@@ATL@@6B?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ProcessWindowMessage@CAxUIWindow@ATL@@UAEHPAUHWND__@@IIJAAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalRelease@CAxUIWindow@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComPtrBase@UIOleInPlaceActiveObject@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DestroyWindow@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OAFOKPBM@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetWindowProc@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAEP6GJPAUHWND__@@IIJ@ZXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WindowProc@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_ATL_MSG@ATL@@QAE@PAUHWND__@@IIJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowLongPtrA@@YAJPAUHWND__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnFinalMessage@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAEXPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAxUIWindow@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWndProcThunk@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CDynamicStdCallThunk@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DE@JJEOCICO@ERROR?5?9?5Object?5deleted?5before?5wi@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1?$CComPtr@UIOleInPlaceActiveObject@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIOleInPlaceActiveObject@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAxUIWindow@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CWindowImplRoot@VCWindow@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWindow@ATL@@QAE@PAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMessageMap@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWndProcThunk@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CDynamicStdCallThunk@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IOleInPlaceUIWindow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IOleWindow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIOleInPlaceActiveObject@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIOleInPlaceActiveObject@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7?$CComObject@VCAxFrameWindow@ATL@@@ATL@@6BIOleInPlaceFrame@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_InternalQueryInterface@CAxFrameWindow@ATL@@QAEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEntries@CAxFrameWindow@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0P@MFMDEJMN@CAxFrameWindow?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_entries@?1??_GetEntries@CAxFrameWindow@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindow@CAxFrameWindow@ATL@@UAGJPAPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@JIHHHPOK@phwnd?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FA@NHACCMFP@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Create@?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEPAUHWND__@@PAU3@V_U_RECT@2@PBDKKV_U_MENUorID@2@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndClassInfo@?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAAAU_ATL_WNDCLASSINFOA@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?wc@?1??GetWndClassInfo@?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAAAU_ATL_WNDCLASSINFOA@3@XZ@4U43@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GetWndCaption@?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@LIOMMJMF@AXWIN?5Frame?5Window?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ContextSensitiveHelp@CAxFrameWindow@ATL@@UAGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBorder@CAxFrameWindow@ATL@@UAGJPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RequestBorderSpace@CAxFrameWindow@ATL@@UAGJPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorderSpace@CAxFrameWindow@ATL@@UAGJPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetActiveObject@CAxFrameWindow@ATL@@UAGJPAUIOleInPlaceActiveObject@@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertMenus@CAxFrameWindow@ATL@@UAGJPAUHMENU__@@PAUtagOleMenuGroupWidths@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMenu@CAxFrameWindow@ATL@@UAGJPAUHMENU__@@PAXPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveMenus@CAxFrameWindow@ATL@@UAGJPAUHMENU__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatusText@CAxFrameWindow@ATL@@UAGJPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EnableModeless@CAxFrameWindow@ATL@@UAGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TranslateAcceleratorA@CAxFrameWindow@ATL@@UAGJPAUtagMSG@@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CComObject@VCAxFrameWindow@ATL@@@ATL@@6B?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ProcessWindowMessage@CAxFrameWindow@ATL@@UAEHPAUHWND__@@IIJAAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalRelease@CAxFrameWindow@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAxFrameWindow@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAxFrameWindow@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IOleInPlaceFrame@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2A@@YAPADPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_MsToNTP@CNtpTime@@1PAKA			; CNtpTime::m_MsToNTP
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?rcDefault@CWindow@ATL@@2UtagRECT@@A		; ATL::CWindow::rcDefault
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
_DATA	SEGMENT
_THIS_FILE DB	'.\Sntp.cpp', 00H
_DATA	ENDS
CONST	SEGMENT
_NTP_FRACTIONAL_TO_MS DQ 03e8f4000001f4000r	; 2.32831e-007
_NTP_TO_SECOND DQ 03df0000000100000r		; 2.32831e-010
CONST	ENDS
_DATA	SEGMENT
	ORG $+5
?m_MsToNTP@CNtpTime@@1PAKA DD 00H			; CNtpTime::m_MsToNTP
	DD	0418937H
	DD	083126fH
	DD	0c49ba6H
	DD	010624ddH
	DD	0147ae14H
	DD	0189374cH
	DD	01cac083H
	DD	020c49baH
	DD	024dd2f2H
	DD	028f5c29H
	DD	02d0e560H
	DD	03126e98H
	DD	0353f7cfH
	DD	03958106H
	DD	03d70a3dH
	DD	04189375H
	DD	045a1cacH
	DD	049ba5e3H
	DD	04dd2f1bH
	DD	051eb852H
	DD	05604189H
	DD	05a1cac1H
	DD	05e353f8H
	DD	0624dd2fH
	DD	06666666H
	DD	06a7ef9eH
	DD	06e978d5H
	DD	072b020cH
	DD	076c8b44H
	DD	07ae147bH
	DD	07ef9db2H
	DD	083126e9H
	DD	0872b021H
	DD	08b43958H
	DD	08f5c28fH
	DD	09374bc7H
	DD	0978d4feH
	DD	09ba5e35H
	DD	09fbe76dH
	DD	0a3d70a4H
	DD	0a7ef9dbH
	DD	0ac08312H
	DD	0b020c4aH
	DD	0b439581H
	DD	0b851eb8H
	DD	0bc6a7f0H
	DD	0c083127H
	DD	0c49ba5eH
	DD	0c8b4396H
	DD	0ccccccdH
	DD	0d0e5604H
	DD	0d4fdf3bH
	DD	0d916873H
	DD	0dd2f1aaH
	DD	0e147ae1H
	DD	0e560419H
	DD	0e978d50H
	DD	0ed91687H
	DD	0f1a9fbeH
	DD	0f5c28f6H
	DD	0f9db22dH
	DD	0fdf3b64H
	DD	01020c49cH
	DD	010624dd3H
	DD	010a3d70aH
	DD	010e56042H
	DD	01126e979H
	DD	0116872b0H
	DD	011a9fbe7H
	DD	011eb851fH
	DD	0122d0e56H
	DD	0126e978dH
	DD	012b020c5H
	DD	012f1a9fcH
	DD	013333333H
	DD	01374bc6aH
	DD	013b645a2H
	DD	013f7ced9H
	DD	014395810H
	DD	0147ae148H
	DD	014bc6a7fH
	DD	014fdf3b6H
	DD	0153f7ceeH
	DD	015810625H
	DD	015c28f5cH
	DD	016041893H
	DD	01645a1cbH
	DD	016872b02H
	DD	016c8b439H
	DD	0170a3d71H
	DD	0174bc6a8H
	DD	0178d4fdfH
	DD	017ced917H
	DD	01810624eH
	DD	01851eb85H
	DD	0189374bcH
	DD	018d4fdf4H
	DD	01916872bH
	DD	019581062H
	DD	01999999aH
	DD	019db22d1H
	DD	01a1cac08H
	DD	01a5e353fH
	DD	01a9fbe77H
	DD	01ae147aeH
	DD	01b22d0e5H
	DD	01b645a1dH
	DD	01ba5e354H
	DD	01be76c8bH
	DD	01c28f5c3H
	DD	01c6a7efaH
	DD	01cac0831H
	DD	01ced9168H
	DD	01d2f1aa0H
	DD	01d70a3d7H
	DD	01db22d0eH
	DD	01df3b646H
	DD	01e353f7dH
	DD	01e76c8b4H
	DD	01eb851ecH
	DD	01ef9db23H
	DD	01f3b645aH
	DD	01f7ced91H
	DD	01fbe76c9H
	DD	020000000H
	DD	020418937H
	DD	02083126fH
	DD	020c49ba6H
	DD	0210624ddH
	DD	02147ae14H
	DD	02189374cH
	DD	021cac083H
	DD	0220c49baH
	DD	0224dd2f2H
	DD	0228f5c29H
	DD	022d0e560H
	DD	023126e98H
	DD	02353f7cfH
	DD	023958106H
	DD	023d70a3dH
	DD	024189375H
	DD	0245a1cacH
	DD	0249ba5e3H
	DD	024dd2f1bH
	DD	0251eb852H
	DD	025604189H
	DD	025a1cac1H
	DD	025e353f8H
	DD	02624dd2fH
	DD	026666666H
	DD	026a7ef9eH
	DD	026e978d5H
	DD	0272b020cH
	DD	0276c8b44H
	DD	027ae147bH
	DD	027ef9db2H
	DD	0283126e9H
	DD	02872b021H
	DD	028b43958H
	DD	028f5c28fH
	DD	029374bc7H
	DD	02978d4feH
	DD	029ba5e35H
	DD	029fbe76dH
	DD	02a3d70a4H
	DD	02a7ef9dbH
	DD	02ac08312H
	DD	02b020c4aH
	DD	02b439581H
	DD	02b851eb8H
	DD	02bc6a7f0H
	DD	02c083127H
	DD	02c49ba5eH
	DD	02c8b4396H
	DD	02ccccccdH
	DD	02d0e5604H
	DD	02d4fdf3bH
	DD	02d916873H
	DD	02dd2f1aaH
	DD	02e147ae1H
	DD	02e560419H
	DD	02e978d50H
	DD	02ed91687H
	DD	02f1a9fbeH
	DD	02f5c28f6H
	DD	02f9db22dH
	DD	02fdf3b64H
	DD	03020c49cH
	DD	030624dd3H
	DD	030a3d70aH
	DD	030e56042H
	DD	03126e979H
	DD	0316872b0H
	DD	031a9fbe7H
	DD	031eb851fH
	DD	0322d0e56H
	DD	0326e978dH
	DD	032b020c5H
	DD	032f1a9fcH
	DD	033333333H
	DD	03374bc6aH
	DD	033b645a2H
	DD	033f7ced9H
	DD	034395810H
	DD	0347ae148H
	DD	034bc6a7fH
	DD	034fdf3b6H
	DD	0353f7ceeH
	DD	035810625H
	DD	035c28f5cH
	DD	036041893H
	DD	03645a1cbH
	DD	036872b02H
	DD	036c8b439H
	DD	0370a3d71H
	DD	0374bc6a8H
	DD	0378d4fdfH
	DD	037ced917H
	DD	03810624eH
	DD	03851eb85H
	DD	0389374bcH
	DD	038d4fdf4H
	DD	03916872bH
	DD	039581062H
	DD	03999999aH
	DD	039db22d1H
	DD	03a1cac08H
	DD	03a5e353fH
	DD	03a9fbe77H
	DD	03ae147aeH
	DD	03b22d0e5H
	DD	03b645a1dH
	DD	03ba5e354H
	DD	03be76c8bH
	DD	03c28f5c3H
	DD	03c6a7efaH
	DD	03cac0831H
	DD	03ced9168H
	DD	03d2f1aa0H
	DD	03d70a3d7H
	DD	03db22d0eH
	DD	03df3b646H
	DD	03e353f7dH
	DD	03e76c8b4H
	DD	03eb851ecH
	DD	03ef9db23H
	DD	03f3b645aH
	DD	03f7ced91H
	DD	03fbe76c9H
	DD	040000000H
	DD	040418937H
	DD	04083126fH
	DD	040c49ba6H
	DD	0410624ddH
	DD	04147ae14H
	DD	04189374cH
	DD	041cac083H
	DD	0420c49baH
	DD	0424dd2f2H
	DD	0428f5c29H
	DD	042d0e560H
	DD	043126e98H
	DD	04353f7cfH
	DD	043958106H
	DD	043d70a3dH
	DD	044189375H
	DD	0445a1cacH
	DD	0449ba5e3H
	DD	044dd2f1bH
	DD	0451eb852H
	DD	045604189H
	DD	045a1cac1H
	DD	045e353f8H
	DD	04624dd2fH
	DD	046666666H
	DD	046a7ef9eH
	DD	046e978d5H
	DD	0472b020cH
	DD	0476c8b44H
	DD	047ae147bH
	DD	047ef9db2H
	DD	0483126e9H
	DD	04872b021H
	DD	048b43958H
	DD	048f5c28fH
	DD	049374bc7H
	DD	04978d4feH
	DD	049ba5e35H
	DD	049fbe76dH
	DD	04a3d70a4H
	DD	04a7ef9dbH
	DD	04ac08312H
	DD	04b020c4aH
	DD	04b439581H
	DD	04b851eb8H
	DD	04bc6a7f0H
	DD	04c083127H
	DD	04c49ba5eH
	DD	04c8b4396H
	DD	04ccccccdH
	DD	04d0e5604H
	DD	04d4fdf3bH
	DD	04d916873H
	DD	04dd2f1aaH
	DD	04e147ae1H
	DD	04e560419H
	DD	04e978d50H
	DD	04ed91687H
	DD	04f1a9fbeH
	DD	04f5c28f6H
	DD	04f9db22dH
	DD	04fdf3b64H
	DD	05020c49cH
	DD	050624dd3H
	DD	050a3d70aH
	DD	050e56042H
	DD	05126e979H
	DD	0516872b0H
	DD	051a9fbe7H
	DD	051eb851fH
	DD	0522d0e56H
	DD	0526e978dH
	DD	052b020c5H
	DD	052f1a9fcH
	DD	053333333H
	DD	05374bc6aH
	DD	053b645a2H
	DD	053f7ced9H
	DD	054395810H
	DD	0547ae148H
	DD	054bc6a7fH
	DD	054fdf3b6H
	DD	0553f7ceeH
	DD	055810625H
	DD	055c28f5cH
	DD	056041893H
	DD	05645a1cbH
	DD	056872b02H
	DD	056c8b439H
	DD	0570a3d71H
	DD	0574bc6a8H
	DD	0578d4fdfH
	DD	057ced917H
	DD	05810624eH
	DD	05851eb85H
	DD	0589374bcH
	DD	058d4fdf4H
	DD	05916872bH
	DD	059581062H
	DD	05999999aH
	DD	059db22d1H
	DD	05a1cac08H
	DD	05a5e353fH
	DD	05a9fbe77H
	DD	05ae147aeH
	DD	05b22d0e5H
	DD	05b645a1dH
	DD	05ba5e354H
	DD	05be76c8bH
	DD	05c28f5c3H
	DD	05c6a7efaH
	DD	05cac0831H
	DD	05ced9168H
	DD	05d2f1aa0H
	DD	05d70a3d7H
	DD	05db22d0eH
	DD	05df3b646H
	DD	05e353f7dH
	DD	05e76c8b4H
	DD	05eb851ecH
	DD	05ef9db23H
	DD	05f3b645aH
	DD	05f7ced91H
	DD	05fbe76c9H
	DD	060000000H
	DD	060418937H
	DD	06083126fH
	DD	060c49ba6H
	DD	0610624ddH
	DD	06147ae14H
	DD	06189374cH
	DD	061cac083H
	DD	0620c49baH
	DD	0624dd2f2H
	DD	0628f5c29H
	DD	062d0e560H
	DD	063126e98H
	DD	06353f7cfH
	DD	063958106H
	DD	063d70a3dH
	DD	064189375H
	DD	0645a1cacH
	DD	0649ba5e3H
	DD	064dd2f1bH
	DD	0651eb852H
	DD	065604189H
	DD	065a1cac1H
	DD	065e353f8H
	DD	06624dd2fH
	DD	066666666H
	DD	066a7ef9eH
	DD	066e978d5H
	DD	0672b020cH
	DD	0676c8b44H
	DD	067ae147bH
	DD	067ef9db2H
	DD	0683126e9H
	DD	06872b021H
	DD	068b43958H
	DD	068f5c28fH
	DD	069374bc7H
	DD	06978d4feH
	DD	069ba5e35H
	DD	069fbe76dH
	DD	06a3d70a4H
	DD	06a7ef9dbH
	DD	06ac08312H
	DD	06b020c4aH
	DD	06b439581H
	DD	06b851eb8H
	DD	06bc6a7f0H
	DD	06c083127H
	DD	06c49ba5eH
	DD	06c8b4396H
	DD	06ccccccdH
	DD	06d0e5604H
	DD	06d4fdf3bH
	DD	06d916873H
	DD	06dd2f1aaH
	DD	06e147ae1H
	DD	06e560419H
	DD	06e978d50H
	DD	06ed91687H
	DD	06f1a9fbeH
	DD	06f5c28f6H
	DD	06f9db22dH
	DD	06fdf3b64H
	DD	07020c49cH
	DD	070624dd3H
	DD	070a3d70aH
	DD	070e56042H
	DD	07126e979H
	DD	0716872b0H
	DD	071a9fbe7H
	DD	071eb851fH
	DD	0722d0e56H
	DD	0726e978dH
	DD	072b020c5H
	DD	072f1a9fcH
	DD	073333333H
	DD	07374bc6aH
	DD	073b645a2H
	DD	073f7ced9H
	DD	074395810H
	DD	0747ae148H
	DD	074bc6a7fH
	DD	074fdf3b6H
	DD	0753f7ceeH
	DD	075810625H
	DD	075c28f5cH
	DD	076041893H
	DD	07645a1cbH
	DD	076872b02H
	DD	076c8b439H
	DD	0770a3d71H
	DD	0774bc6a8H
	DD	0778d4fdfH
	DD	077ced917H
	DD	07810624eH
	DD	07851eb85H
	DD	0789374bcH
	DD	078d4fdf4H
	DD	07916872bH
	DD	079581062H
	DD	07999999aH
	DD	079db22d1H
	DD	07a1cac08H
	DD	07a5e353fH
	DD	07a9fbe77H
	DD	07ae147aeH
	DD	07b22d0e5H
	DD	07b645a1dH
	DD	07ba5e354H
	DD	07be76c8bH
	DD	07c28f5c3H
	DD	07c6a7efaH
	DD	07cac0831H
	DD	07ced9168H
	DD	07d2f1aa0H
	DD	07d70a3d7H
	DD	07db22d0eH
	DD	07df3b646H
	DD	07e353f7dH
	DD	07e76c8b4H
	DD	07eb851ecH
	DD	07ef9db23H
	DD	07f3b645aH
	DD	07f7ced91H
	DD	07fbe76c9H
	DD	080000000H
	DD	080418937H
	DD	08083126fH
	DD	080c49ba6H
	DD	0810624ddH
	DD	08147ae14H
	DD	08189374cH
	DD	081cac083H
	DD	0820c49baH
	DD	0824dd2f2H
	DD	0828f5c29H
	DD	082d0e560H
	DD	083126e98H
	DD	08353f7cfH
	DD	083958106H
	DD	083d70a3dH
	DD	084189375H
	DD	0845a1cacH
	DD	0849ba5e3H
	DD	084dd2f1bH
	DD	0851eb852H
	DD	085604189H
	DD	085a1cac1H
	DD	085e353f8H
	DD	08624dd2fH
	DD	086666666H
	DD	086a7ef9eH
	DD	086e978d5H
	DD	0872b020cH
	DD	0876c8b44H
	DD	087ae147bH
	DD	087ef9db2H
	DD	0883126e9H
	DD	08872b021H
	DD	088b43958H
	DD	088f5c28fH
	DD	089374bc7H
	DD	08978d4feH
	DD	089ba5e35H
	DD	089fbe76dH
	DD	08a3d70a4H
	DD	08a7ef9dbH
	DD	08ac08312H
	DD	08b020c4aH
	DD	08b439581H
	DD	08b851eb8H
	DD	08bc6a7f0H
	DD	08c083127H
	DD	08c49ba5eH
	DD	08c8b4396H
	DD	08ccccccdH
	DD	08d0e5604H
	DD	08d4fdf3bH
	DD	08d916873H
	DD	08dd2f1aaH
	DD	08e147ae1H
	DD	08e560419H
	DD	08e978d50H
	DD	08ed91687H
	DD	08f1a9fbeH
	DD	08f5c28f6H
	DD	08f9db22dH
	DD	08fdf3b64H
	DD	09020c49cH
	DD	090624dd3H
	DD	090a3d70aH
	DD	090e56042H
	DD	09126e979H
	DD	0916872b0H
	DD	091a9fbe7H
	DD	091eb851fH
	DD	0922d0e56H
	DD	0926e978dH
	DD	092b020c5H
	DD	092f1a9fcH
	DD	093333333H
	DD	09374bc6aH
	DD	093b645a2H
	DD	093f7ced9H
	DD	094395810H
	DD	0947ae148H
	DD	094bc6a7fH
	DD	094fdf3b6H
	DD	0953f7ceeH
	DD	095810625H
	DD	095c28f5cH
	DD	096041893H
	DD	09645a1cbH
	DD	096872b02H
	DD	096c8b439H
	DD	0970a3d71H
	DD	0974bc6a8H
	DD	0978d4fdfH
	DD	097ced917H
	DD	09810624eH
	DD	09851eb85H
	DD	0989374bcH
	DD	098d4fdf4H
	DD	09916872bH
	DD	099581062H
	DD	09999999aH
	DD	099db22d1H
	DD	09a1cac08H
	DD	09a5e353fH
	DD	09a9fbe77H
	DD	09ae147aeH
	DD	09b22d0e5H
	DD	09b645a1dH
	DD	09ba5e354H
	DD	09be76c8bH
	DD	09c28f5c3H
	DD	09c6a7efaH
	DD	09cac0831H
	DD	09ced9168H
	DD	09d2f1aa0H
	DD	09d70a3d7H
	DD	09db22d0eH
	DD	09df3b646H
	DD	09e353f7dH
	DD	09e76c8b4H
	DD	09eb851ecH
	DD	09ef9db23H
	DD	09f3b645aH
	DD	09f7ced91H
	DD	09fbe76c9H
	DD	0a0000000H
	DD	0a0418937H
	DD	0a083126fH
	DD	0a0c49ba6H
	DD	0a10624ddH
	DD	0a147ae14H
	DD	0a189374cH
	DD	0a1cac083H
	DD	0a20c49baH
	DD	0a24dd2f2H
	DD	0a28f5c29H
	DD	0a2d0e560H
	DD	0a3126e98H
	DD	0a353f7cfH
	DD	0a3958106H
	DD	0a3d70a3dH
	DD	0a4189375H
	DD	0a45a1cacH
	DD	0a49ba5e3H
	DD	0a4dd2f1bH
	DD	0a51eb852H
	DD	0a5604189H
	DD	0a5a1cac1H
	DD	0a5e353f8H
	DD	0a624dd2fH
	DD	0a6666666H
	DD	0a6a7ef9eH
	DD	0a6e978d5H
	DD	0a72b020cH
	DD	0a76c8b44H
	DD	0a7ae147bH
	DD	0a7ef9db2H
	DD	0a83126e9H
	DD	0a872b021H
	DD	0a8b43958H
	DD	0a8f5c28fH
	DD	0a9374bc7H
	DD	0a978d4feH
	DD	0a9ba5e35H
	DD	0a9fbe76dH
	DD	0aa3d70a4H
	DD	0aa7ef9dbH
	DD	0aac08312H
	DD	0ab020c4aH
	DD	0ab439581H
	DD	0ab851eb8H
	DD	0abc6a7f0H
	DD	0ac083127H
	DD	0ac49ba5eH
	DD	0ac8b4396H
	DD	0accccccdH
	DD	0ad0e5604H
	DD	0ad4fdf3bH
	DD	0ad916873H
	DD	0add2f1aaH
	DD	0ae147ae1H
	DD	0ae560419H
	DD	0ae978d50H
	DD	0aed91687H
	DD	0af1a9fbeH
	DD	0af5c28f6H
	DD	0af9db22dH
	DD	0afdf3b64H
	DD	0b020c49cH
	DD	0b0624dd3H
	DD	0b0a3d70aH
	DD	0b0e56042H
	DD	0b126e979H
	DD	0b16872b0H
	DD	0b1a9fbe7H
	DD	0b1eb851fH
	DD	0b22d0e56H
	DD	0b26e978dH
	DD	0b2b020c5H
	DD	0b2f1a9fcH
	DD	0b3333333H
	DD	0b374bc6aH
	DD	0b3b645a2H
	DD	0b3f7ced9H
	DD	0b4395810H
	DD	0b47ae148H
	DD	0b4bc6a7fH
	DD	0b4fdf3b6H
	DD	0b53f7ceeH
	DD	0b5810625H
	DD	0b5c28f5cH
	DD	0b6041893H
	DD	0b645a1cbH
	DD	0b6872b02H
	DD	0b6c8b439H
	DD	0b70a3d71H
	DD	0b74bc6a8H
	DD	0b78d4fdfH
	DD	0b7ced917H
	DD	0b810624eH
	DD	0b851eb85H
	DD	0b89374bcH
	DD	0b8d4fdf4H
	DD	0b916872bH
	DD	0b9581062H
	DD	0b999999aH
	DD	0b9db22d1H
	DD	0ba1cac08H
	DD	0ba5e353fH
	DD	0ba9fbe77H
	DD	0bae147aeH
	DD	0bb22d0e5H
	DD	0bb645a1dH
	DD	0bba5e354H
	DD	0bbe76c8bH
	DD	0bc28f5c3H
	DD	0bc6a7efaH
	DD	0bcac0831H
	DD	0bced9168H
	DD	0bd2f1aa0H
	DD	0bd70a3d7H
	DD	0bdb22d0eH
	DD	0bdf3b646H
	DD	0be353f7dH
	DD	0be76c8b4H
	DD	0beb851ecH
	DD	0bef9db23H
	DD	0bf3b645aH
	DD	0bf7ced91H
	DD	0bfbe76c9H
	DD	0c0000000H
	DD	0c0418937H
	DD	0c083126fH
	DD	0c0c49ba6H
	DD	0c10624ddH
	DD	0c147ae14H
	DD	0c189374cH
	DD	0c1cac083H
	DD	0c20c49baH
	DD	0c24dd2f2H
	DD	0c28f5c29H
	DD	0c2d0e560H
	DD	0c3126e98H
	DD	0c353f7cfH
	DD	0c3958106H
	DD	0c3d70a3dH
	DD	0c4189375H
	DD	0c45a1cacH
	DD	0c49ba5e3H
	DD	0c4dd2f1bH
	DD	0c51eb852H
	DD	0c5604189H
	DD	0c5a1cac1H
	DD	0c5e353f8H
	DD	0c624dd2fH
	DD	0c6666666H
	DD	0c6a7ef9eH
	DD	0c6e978d5H
	DD	0c72b020cH
	DD	0c76c8b44H
	DD	0c7ae147bH
	DD	0c7ef9db2H
	DD	0c83126e9H
	DD	0c872b021H
	DD	0c8b43958H
	DD	0c8f5c28fH
	DD	0c9374bc7H
	DD	0c978d4feH
	DD	0c9ba5e35H
	DD	0c9fbe76dH
	DD	0ca3d70a4H
	DD	0ca7ef9dbH
	DD	0cac08312H
	DD	0cb020c4aH
	DD	0cb439581H
	DD	0cb851eb8H
	DD	0cbc6a7f0H
	DD	0cc083127H
	DD	0cc49ba5eH
	DD	0cc8b4396H
	DD	0cccccccdH
	DD	0cd0e5604H
	DD	0cd4fdf3bH
	DD	0cd916873H
	DD	0cdd2f1aaH
	DD	0ce147ae1H
	DD	0ce560419H
	DD	0ce978d50H
	DD	0ced91687H
	DD	0cf1a9fbeH
	DD	0cf5c28f6H
	DD	0cf9db22dH
	DD	0cfdf3b64H
	DD	0d020c49cH
	DD	0d0624dd3H
	DD	0d0a3d70aH
	DD	0d0e56042H
	DD	0d126e979H
	DD	0d16872b0H
	DD	0d1a9fbe7H
	DD	0d1eb851fH
	DD	0d22d0e56H
	DD	0d26e978dH
	DD	0d2b020c5H
	DD	0d2f1a9fcH
	DD	0d3333333H
	DD	0d374bc6aH
	DD	0d3b645a2H
	DD	0d3f7ced9H
	DD	0d4395810H
	DD	0d47ae148H
	DD	0d4bc6a7fH
	DD	0d4fdf3b6H
	DD	0d53f7ceeH
	DD	0d5810625H
	DD	0d5c28f5cH
	DD	0d6041893H
	DD	0d645a1cbH
	DD	0d6872b02H
	DD	0d6c8b439H
	DD	0d70a3d71H
	DD	0d74bc6a8H
	DD	0d78d4fdfH
	DD	0d7ced917H
	DD	0d810624eH
	DD	0d851eb85H
	DD	0d89374bcH
	DD	0d8d4fdf4H
	DD	0d916872bH
	DD	0d9581062H
	DD	0d999999aH
	DD	0d9db22d1H
	DD	0da1cac08H
	DD	0da5e353fH
	DD	0da9fbe77H
	DD	0dae147aeH
	DD	0db22d0e5H
	DD	0db645a1dH
	DD	0dba5e354H
	DD	0dbe76c8bH
	DD	0dc28f5c3H
	DD	0dc6a7efaH
	DD	0dcac0831H
	DD	0dced9168H
	DD	0dd2f1aa0H
	DD	0dd70a3d7H
	DD	0ddb22d0eH
	DD	0ddf3b646H
	DD	0de353f7dH
	DD	0de76c8b4H
	DD	0deb851ecH
	DD	0def9db23H
	DD	0df3b645aH
	DD	0df7ced91H
	DD	0dfbe76c9H
	DD	0e0000000H
	DD	0e0418937H
	DD	0e083126fH
	DD	0e0c49ba6H
	DD	0e10624ddH
	DD	0e147ae14H
	DD	0e189374cH
	DD	0e1cac083H
	DD	0e20c49baH
	DD	0e24dd2f2H
	DD	0e28f5c29H
	DD	0e2d0e560H
	DD	0e3126e98H
	DD	0e353f7cfH
	DD	0e3958106H
	DD	0e3d70a3dH
	DD	0e4189375H
	DD	0e45a1cacH
	DD	0e49ba5e3H
	DD	0e4dd2f1bH
	DD	0e51eb852H
	DD	0e5604189H
	DD	0e5a1cac1H
	DD	0e5e353f8H
	DD	0e624dd2fH
	DD	0e6666666H
	DD	0e6a7ef9eH
	DD	0e6e978d5H
	DD	0e72b020cH
	DD	0e76c8b44H
	DD	0e7ae147bH
	DD	0e7ef9db2H
	DD	0e83126e9H
	DD	0e872b021H
	DD	0e8b43958H
	DD	0e8f5c28fH
	DD	0e9374bc7H
	DD	0e978d4feH
	DD	0e9ba5e35H
	DD	0e9fbe76dH
	DD	0ea3d70a4H
	DD	0ea7ef9dbH
	DD	0eac08312H
	DD	0eb020c4aH
	DD	0eb439581H
	DD	0eb851eb8H
	DD	0ebc6a7f0H
	DD	0ec083127H
	DD	0ec49ba5eH
	DD	0ec8b4396H
	DD	0eccccccdH
	DD	0ed0e5604H
	DD	0ed4fdf3bH
	DD	0ed916873H
	DD	0edd2f1aaH
	DD	0ee147ae1H
	DD	0ee560419H
	DD	0ee978d50H
	DD	0eed91687H
	DD	0ef1a9fbeH
	DD	0ef5c28f6H
	DD	0ef9db22dH
	DD	0efdf3b64H
	DD	0f020c49cH
	DD	0f0624dd3H
	DD	0f0a3d70aH
	DD	0f0e56042H
	DD	0f126e979H
	DD	0f16872b0H
	DD	0f1a9fbe7H
	DD	0f1eb851fH
	DD	0f22d0e56H
	DD	0f26e978dH
	DD	0f2b020c5H
	DD	0f2f1a9fcH
	DD	0f3333333H
	DD	0f374bc6aH
	DD	0f3b645a2H
	DD	0f3f7ced9H
	DD	0f4395810H
	DD	0f47ae148H
	DD	0f4bc6a7fH
	DD	0f4fdf3b6H
	DD	0f53f7ceeH
	DD	0f5810625H
	DD	0f5c28f5cH
	DD	0f6041893H
	DD	0f645a1cbH
	DD	0f6872b02H
	DD	0f6c8b439H
	DD	0f70a3d71H
	DD	0f74bc6a8H
	DD	0f78d4fdfH
	DD	0f7ced917H
	DD	0f810624eH
	DD	0f851eb85H
	DD	0f89374bcH
	DD	0f8d4fdf4H
	DD	0f916872bH
	DD	0f9581062H
	DD	0f999999aH
	DD	0f9db22d1H
	DD	0fa1cac08H
	DD	0fa5e353fH
	DD	0fa9fbe77H
	DD	0fae147aeH
	DD	0fb22d0e5H
	DD	0fb645a1dH
	DD	0fba5e354H
	DD	0fbe76c8bH
	DD	0fc28f5c3H
	DD	0fc6a7efaH
	DD	0fcac0831H
	DD	0fced9168H
	DD	0fd2f1aa0H
	DD	0fd70a3d7H
	DD	0fdb22d0eH
	DD	0fdf3b646H
	DD	0fe353f7dH
	DD	0fe76c8b4H
	DD	0feb851ecH
	DD	0fef9db23H
	DD	0ff3b645aH
	DD	0ff7ced91H
	DD	0ffbe76c9H
_DATA	ENDS
CONST	SEGMENT
$SG165650 DB	'JD >= 0', 00H
$SG165651 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165749 DB	'wMilliSeconds < 1000', 00H
	ORG $+3
$SG165750 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165784 DB	'm_hSocket != (SOCKET)(~0)', 00H
	ORG $+2
$SG165785 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165809 DB	'm_hSocket != (SOCKET)(~0)', 00H
	ORG $+2
$SG165810 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165818 DB	'm_hSocket != (SOCKET)(~0)', 00H
	ORG $+2
$SG165819 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165826 DB	'(-1) != closesocket(m_hSocket)', 00H
	ORG $+1
$SG165827 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165870 DB	'pszHostName', 00H
$SG165871 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165880 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165881 DB	'Failed to create client socket, GetLastError returns: %d'
	DB	0aH, 00H
	ORG $+2
$SG165884 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165885 DB	'Could not connect to the SNTP server %s on port %d, GetL'
	DB	'astError returns: %d', 0aH, 00H
	ORG $+2
$SG165899 DB	'.\Sntp.cpp', 00H
	ORG $+5
$SG165900 DB	'Failed in call to send NTP request to the SNTP server, G'
	DB	'etLastError returns %d', 0aH, 00H
$SG165908 DB	'.\Sntp.cpp', 00H
	ORG $+5
$SG165909 DB	'Unable to wait for NTP reply from the SNTP server, GetLa'
	DB	'stError returns %d', 0aH, 00H
$SG165919 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165920 DB	'Unable to read reply from the SNTP server, GetLastError '
	DB	'returns %d', 0aH, 00H
$SG165940 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165941 DB	'Failed to get Adjust priviledge token', 0aH, 00H
	ORG $+1
$SG165944 DB	'SeSystemtimePrivilege', 00H
	ORG $+2
$SG165946 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165947 DB	'Failed in callup to lookup priviledge', 0aH, 00H
	ORG $+1
$SG165951 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165952 DB	'Failed to adjust SetTime priviledge', 0aH, 00H
	ORG $+3
$SG165959 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165960 DB	'Failed to reset SetTime priviledge', 0aH, 00H
$SG165972 DB	'.\Sntp.cpp', 00H
	ORG $+1
$SG165973 DB	'Failed in call to set the system time', 0aH, 00H
	ORG $+1
$SG165996 DB	'pp != 0', 00H
	ORG $+4
$SG165997 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlcom.h', 00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
;	COMDAT ?rcDefault@CWindow@ATL@@2UtagRECT@@A
_DATA	SEGMENT
?rcDefault@CWindow@ATL@@2UtagRECT@@A DD 080000000H	; ATL::CWindow::rcDefault
	DD	080000000H
	DD	00H
	DD	00H
_DATA	ENDS
CONST	SEGMENT
	ORG $+1
$SG164311 DB	'pThis != 0', 00H
	ORG $+5
$SG164312 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG164319 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG164320 DB	'Subclassing through a hook discarded.', 0aH, 00H
	ORG $+1
$SG164336 DB	'pThis->m_pCurrentMsg == &msg', 00H
	ORG $+3
$SG164337 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG164360 DB	'm_hWnd == 0', 00H
	ORG $+4
$SG164361 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG164372 DB	'm_hWnd == hWnd', 00H
	ORG $+1
$SG164373 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG164583 DB	'm_begin == 0', 00H
	ORG $+3
$SG164584 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlcom.h', 00H
CONST	ENDS
PUBLIC	??0CNtpTime@@QAE@XZ				; CNtpTime::CNtpTime
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
;	COMDAT rtc$IMZ
; File c:\activex\xmlsign\sntp.cpp
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CNtpTime@@QAE@XZ PROC NEAR				; CNtpTime::CNtpTime
; _this$ = ecx

; 262  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 263  :   m_Time = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 264  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CNtpTime@@QAE@XZ ENDP				; CNtpTime::CNtpTime
_TEXT	ENDS
PUBLIC	??0CNtpTime@@QAE@ABV0@@Z			; CNtpTime::CNtpTime
PUBLIC	??4CNtpTime@@QAEAAV0@ABV0@@Z			; CNtpTime::operator=
EXTRN	__RTC_CheckEsp:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 4
??0CNtpTime@@QAE@ABV0@@Z PROC NEAR			; CNtpTime::CNtpTime
; _this$ = ecx

; 267  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 268  :   *this = time;

	mov	eax, DWORD PTR _time$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CNtpTime@@QAEAAV0@ABV0@@Z		; CNtpTime::operator=

; 269  : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CNtpTime@@QAE@ABV0@@Z ENDP				; CNtpTime::CNtpTime
_TEXT	ENDS
PUBLIC	??0CNtpTime@@QAE@AAUCNtpTimePacket@@@Z		; CNtpTime::CNtpTime
EXTRN	__allshl:NEAR
EXTRN	__imp__ntohl@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_dwHigh$ = -12						; size = 4
_dwLow$ = -8						; size = 4
_this$ = -4						; size = 4
_packet$ = 8						; size = 4
??0CNtpTime@@QAE@AAUCNtpTimePacket@@@Z PROC NEAR	; CNtpTime::CNtpTime
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 273  :   DWORD dwLow = ntohl(packet.m_dwFractional);

	mov	esi, esp
	mov	eax, DWORD PTR _packet$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__ntohl@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwLow$[ebp], eax

; 274  :   DWORD dwHigh = ntohl(packet.m_dwInteger);

	mov	esi, esp
	mov	edx, DWORD PTR _packet$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__ntohl@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwHigh$[ebp], eax

; 275  :   m_Time = ((unsigned __int64) dwHigh) << 32;

	mov	eax, DWORD PTR _dwHigh$[ebp]
	xor	edx, edx
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 276  :   m_Time += dwLow;

	mov	edx, DWORD PTR _dwLow$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	adc	ecx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx

; 277  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CNtpTime@@QAE@AAUCNtpTimePacket@@@Z ENDP		; CNtpTime::CNtpTime
_TEXT	ENDS
PUBLIC	??0CNtpTime@@QAE@ABU_SYSTEMTIME@@@Z		; CNtpTime::CNtpTime
PUBLIC	?MsToNtpFraction@CNtpTime@@SAKG@Z		; CNtpTime::MsToNtpFraction
PUBLIC	?GetJulianDay@CNtpTime@@KAJGGG@Z		; CNtpTime::GetJulianDay
EXTRN	__allmul:NEAR
EXTRN	__CrtDbgReport:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_Seconds$ = -16						; size = 8
_JD$ = -8						; size = 4
_this$ = -4						; size = 4
_st$ = 8						; size = 4
??0CNtpTime@@QAE@ABU_SYSTEMTIME@@@Z PROC NEAR		; CNtpTime::CNtpTime
; _this$ = ecx

; 280  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 281  :   //Currently this function only operates correctly in 
; 282  :   //the 1900 - 2036 primary epoch defined by NTP
; 283  : 
; 284  :   long JD = GetJulianDay(st.wYear, st.wMonth, st.wDay);

	mov	eax, DWORD PTR _st$[ebp]
	mov	cx, WORD PTR [eax+6]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	ax, WORD PTR [edx+2]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	mov	dx, WORD PTR [ecx]
	push	edx
	call	?GetJulianDay@CNtpTime@@KAJGGG@Z	; CNtpTime::GetJulianDay
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _JD$[ebp], eax

; 285  :   JD -= JAN_1ST_1900;

	mov	eax, DWORD PTR _JD$[ebp]
	sub	eax, 2415021				; 0024d9adH
	mov	DWORD PTR _JD$[ebp], eax

; 286  : 
; 287  :   ATLASSERT(JD >= 0);//NTP only supports dates greater than 1900

	jns	SHORT $L166414
	push	OFFSET FLAT:$SG165650
	push	0
	push	287					; 0000011fH
	push	OFFSET FLAT:$SG165651
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L166414
	int	3
$L166414:

; 288  : 	unsigned __int64 Seconds = JD;

	mov	eax, DWORD PTR _JD$[ebp]
	cdq
	mov	DWORD PTR _Seconds$[ebp], eax
	mov	DWORD PTR _Seconds$[ebp+4], edx

; 289  : 	Seconds = (Seconds * 24) + st.wHour;

	push	0
	push	24					; 00000018H
	mov	edx, DWORD PTR _Seconds$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _Seconds$[ebp]
	push	eax
	call	__allmul
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _st$[ebp]
	movzx	eax, WORD PTR [edx+8]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _Seconds$[ebp], ecx
	mov	DWORD PTR _Seconds$[ebp+4], esi

; 290  : 	Seconds = (Seconds * 60) + st.wMinute;

	push	0
	push	60					; 0000003cH
	mov	eax, DWORD PTR _Seconds$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _Seconds$[ebp]
	push	ecx
	call	__allmul
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _st$[ebp]
	movzx	eax, WORD PTR [edx+10]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _Seconds$[ebp], ecx
	mov	DWORD PTR _Seconds$[ebp+4], esi

; 291  : 	Seconds = (Seconds * 60) + st.wSecond;

	push	0
	push	60					; 0000003cH
	mov	eax, DWORD PTR _Seconds$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _Seconds$[ebp]
	push	ecx
	call	__allmul
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _st$[ebp]
	movzx	eax, WORD PTR [edx+12]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	DWORD PTR _Seconds$[ebp], ecx
	mov	DWORD PTR _Seconds$[ebp+4], esi

; 292  : 	if (Seconds <= 0xFFFFFFFF) //NTP Only supports up to 2036

	jne	SHORT $L165647
	jb	SHORT $L166416
	cmp	DWORD PTR _Seconds$[ebp], -1
	ja	SHORT $L165647
$L166416:

; 293  : 	{
; 294  : 		m_Time = (Seconds << 32) + MsToNtpFraction(st.wMilliseconds);

	mov	eax, DWORD PTR _Seconds$[ebp]
	mov	edx, DWORD PTR _Seconds$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	esi, eax
	mov	edi, edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	cx, WORD PTR [eax+14]
	push	ecx
	call	?MsToNtpFraction@CNtpTime@@SAKG@Z	; CNtpTime::MsToNtpFraction
	add	esp, 4
	xor	edx, edx
	add	esi, eax
	adc	edi, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
$L165647:

; 295  : 	}
; 296  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CNtpTime@@QAE@ABU_SYSTEMTIME@@@Z ENDP		; CNtpTime::CNtpTime
; Function compile flags: /Odt /RTCsu
_j$ = -24						; size = 4
_ya$ = -20						; size = 4
_c$ = -16						; size = 4
_d$ = -12						; size = 4
_m$ = -8						; size = 4
_y$ = -4						; size = 4
_Year$ = 8						; size = 2
_Month$ = 12						; size = 2
_Day$ = 16						; size = 2
?GetJulianDay@CNtpTime@@KAJGGG@Z PROC NEAR		; CNtpTime::GetJulianDay

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 300  :   long y = (long) Year;

	movzx	eax, WORD PTR _Year$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 301  :   long m = (long) Month;

	movzx	ecx, WORD PTR _Month$[ebp]
	mov	DWORD PTR _m$[ebp], ecx

; 302  :   long d = (long) Day;

	movzx	edx, WORD PTR _Day$[ebp]
	mov	DWORD PTR _d$[ebp], edx

; 303  :   if (m > 2) 

	cmp	DWORD PTR _m$[ebp], 2
	jle	SHORT $L165665

; 304  :     m = m - 3;

	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, 3
	mov	DWORD PTR _m$[ebp], eax

; 305  :   else 

	jmp	SHORT $L165666
$L165665:

; 306  :   {
; 307  :     m = m + 9;

	mov	ecx, DWORD PTR _m$[ebp]
	add	ecx, 9
	mov	DWORD PTR _m$[ebp], ecx

; 308  :     y = y - 1;

	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$L165666:

; 309  :   }
; 310  :   long c = y / 100;

	mov	eax, DWORD PTR _y$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _c$[ebp], eax

; 311  :   long ya = y - 100 * c;

	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, 100				; 00000064H
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, edx
	mov	DWORD PTR _ya$[ebp], eax

; 312  :   long j = (146097L * c) / 4 + (1461L * ya) / 4 + (153L * m + 2) / 5 + d + 1721119L;

	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, 146097				; 00023ab1H
	cdq
	and	edx, 3
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 2
	mov	eax, DWORD PTR _ya$[ebp]
	imul	eax, 1461				; 000005b5H
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	ecx, eax
	mov	eax, DWORD PTR _m$[ebp]
	imul	eax, 153				; 00000099H
	add	eax, 2
	cdq
	mov	esi, 5
	idiv	esi
	add	ecx, DWORD PTR _d$[ebp]
	lea	edx, DWORD PTR [eax+ecx+1721119]
	mov	DWORD PTR _j$[ebp], edx

; 313  :   return j;

	mov	eax, DWORD PTR _j$[ebp]

; 314  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetJulianDay@CNtpTime@@KAJGGG@Z ENDP			; CNtpTime::GetJulianDay
_TEXT	ENDS
PUBLIC	?GetGregorianDate@CNtpTime@@KAXJAAG00@Z		; CNtpTime::GetGregorianDate
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_m$ = -16						; size = 4
_d$ = -12						; size = 4
_y$ = -8						; size = 4
_j$ = -4						; size = 4
_JD$ = 8						; size = 4
_Year$ = 12						; size = 4
_Month$ = 16						; size = 4
_Day$ = 20						; size = 4
?GetGregorianDate@CNtpTime@@KAXJAAG00@Z PROC NEAR	; CNtpTime::GetGregorianDate

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 318  :   long j = JD - 1721119;

	mov	eax, DWORD PTR _JD$[ebp]
	sub	eax, 1721119				; 001a431fH
	mov	DWORD PTR _j$[ebp], eax

; 319  :   long y = (4 * j - 1) / 146097;

	mov	ecx, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [ecx*4-1]
	cdq
	mov	ecx, 146097				; 00023ab1H
	idiv	ecx
	mov	DWORD PTR _y$[ebp], eax

; 320  :   j = 4 * j - 1 - 146097 * y;

	mov	edx, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [edx*4-1]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, 146097				; 00023ab1H
	sub	eax, ecx
	mov	DWORD PTR _j$[ebp], eax

; 321  :   long d = j / 4;

	mov	eax, DWORD PTR _j$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _d$[ebp], eax

; 322  :   j = (4 * d + 3) / 1461;

	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx*4+3]
	cdq
	mov	ecx, 1461				; 000005b5H
	idiv	ecx
	mov	DWORD PTR _j$[ebp], eax

; 323  :   d = 4 * d + 3 - 1461 * j;

	mov	edx, DWORD PTR _d$[ebp]
	lea	eax, DWORD PTR [edx*4+3]
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, 1461				; 000005b5H
	sub	eax, ecx
	mov	DWORD PTR _d$[ebp], eax

; 324  :   d = (d + 4) / 4;

	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 4
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR _d$[ebp], eax

; 325  :   long m = (5 * d - 3) / 153;

	mov	eax, DWORD PTR _d$[ebp]
	imul	eax, 5
	sub	eax, 3
	cdq
	mov	ecx, 153				; 00000099H
	idiv	ecx
	mov	DWORD PTR _m$[ebp], eax

; 326  :   d = 5 * d - 3 - 153 * m;

	mov	edx, DWORD PTR _d$[ebp]
	imul	edx, 5
	sub	edx, 3
	mov	eax, DWORD PTR _m$[ebp]
	imul	eax, 153				; 00000099H
	sub	edx, eax
	mov	DWORD PTR _d$[ebp], edx

; 327  :   d = (d + 5) / 5;

	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 5
	cdq
	mov	ecx, 5
	idiv	ecx
	mov	DWORD PTR _d$[ebp], eax

; 328  :   y = 100 * y + j;

	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, 100				; 00000064H
	add	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR _y$[ebp], edx

; 329  :   if (m < 10) 

	cmp	DWORD PTR _m$[ebp], 10			; 0000000aH
	jge	SHORT $L165680

; 330  :     m = m + 3;

	mov	eax, DWORD PTR _m$[ebp]
	add	eax, 3
	mov	DWORD PTR _m$[ebp], eax

; 331  :   else 

	jmp	SHORT $L165681
$L165680:

; 332  :   {
; 333  :     m = m - 9;

	mov	ecx, DWORD PTR _m$[ebp]
	sub	ecx, 9
	mov	DWORD PTR _m$[ebp], ecx

; 334  :     y = y + 1;

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$L165681:

; 335  :   }
; 336  : 
; 337  :   Year = (WORD) y;

	mov	eax, DWORD PTR _Year$[ebp]
	mov	cx, WORD PTR _y$[ebp]
	mov	WORD PTR [eax], cx

; 338  :   Month = (WORD) m;

	mov	edx, DWORD PTR _Month$[ebp]
	mov	ax, WORD PTR _m$[ebp]
	mov	WORD PTR [edx], ax

; 339  :   Day = (WORD) d;

	mov	ecx, DWORD PTR _Day$[ebp]
	mov	dx, WORD PTR _d$[ebp]
	mov	WORD PTR [ecx], dx

; 340  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGregorianDate@CNtpTime@@KAXJAAG00@Z ENDP		; CNtpTime::GetGregorianDate
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-164]
	mov	ecx, 41					; 00000029H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

	mov	DWORD PTR _ver$[ebp], 148		; 00000094H

; 139  : 	::GetVersionEx( &ver );

	mov	esi, esp
	lea	eax, DWORD PTR _ver$[ebp]
	push	eax
	call	DWORD PTR __imp__GetVersionExA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

	cmp	DWORD PTR _ver$[ebp+16], 2
	jne	SHORT $L75781
	cmp	DWORD PTR _ver$[ebp+4], 5
	jb	SHORT $L75781

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

	jmp	SHORT $L75782
$L75781:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L75782:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

	mov	ecx, DWORD PTR _pfnGetThreadACP$[ebp]
	push	ecx
	push	OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	call	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166425
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	add	esp, 164				; 000000a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L166425:
	DD	1
	DD	$L166424
$L166424:
	DD	-156					; ffffff64H
	DD	148					; 00000094H
	DD	$L166421
$L166421:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

	mov	esi, esp
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	call	DWORD PTR __imp__InterlockedExchange@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$75769 = -32					; size = 4
_szACP$ = -24						; size = 7
_lcidThread$ = -12					; size = 4
_nACP$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

	mov	DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

	mov	esi, esp
	call	DWORD PTR __imp__GetThreadLocale@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

	mov	esi, esp
	push	7
	lea	eax, DWORD PTR _szACP$[ebp]
	push	eax
	push	4100					; 00001004H
	mov	ecx, DWORD PTR _lcidThread$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $L75768

; 111  : 	{
; 112  : 		char* pch = szACP;

	lea	edx, DWORD PTR _szACP$[ebp]
	mov	DWORD PTR _pch$75769[ebp], edx
$L75771:

; 113  : 		while (*pch != '\0')

	mov	eax, DWORD PTR _pch$75769[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L75768

; 114  : 		{
; 115  : 			nACP *= 10;

	mov	edx, DWORD PTR _nACP$[ebp]
	imul	edx, 10					; 0000000aH
	mov	DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

	mov	eax, DWORD PTR _pch$75769[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _nACP$[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _nACP$[ebp], eax
	mov	ecx, DWORD PTR _pch$75769[ebp]
	add	ecx, 1
	mov	DWORD PTR _pch$75769[ebp], ecx

; 117  : 		}

	jmp	SHORT $L75771
$L75768:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

	cmp	DWORD PTR _nACP$[ebp], 0
	jne	SHORT $L75773

; 121  : 		nACP = ::GetACP();

	mov	esi, esp
	call	DWORD PTR __imp__GetACP@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nACP$[ebp], eax
$L75773:

; 122  : 
; 123  : 	return nACP;

	mov	eax, DWORD PTR _nACP$[ebp]

; 124  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166436
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L166436:
	DD	1
	DD	$L166435
$L166435:
	DD	-24					; ffffffe8H
	DD	7
	DD	$L166433
$L166433:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	65					; 00000041H
	DB	67					; 00000043H
	DB	80					; 00000050H
	DB	0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp

; 128  : 	return( CP_THREAD_ACP );

	mov	eax, 3

; 129  : }

	pop	ebp
	ret	0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
; Function compile flags: /Odt /RTCsu
; File c:\activex\xmlsign\sntp.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 4
??4CNtpTime@@QAEAAV0@ABV0@@Z PROC NEAR			; CNtpTime::operator=
; _this$ = ecx

; 343  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 344  :   m_Time = time.m_Time;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _time$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 345  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 346  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??4CNtpTime@@QAEAAV0@ABV0@@Z ENDP			; CNtpTime::operator=
_TEXT	ENDS
PUBLIC	??GCNtpTime@@QBENABV0@@Z			; CNtpTime::operator-
PUBLIC	?Seconds@CNtpTime@@QBEKXZ			; CNtpTime::Seconds
PUBLIC	?Fraction@CNtpTime@@QBEKXZ			; CNtpTime::Fraction
PUBLIC	?NtpFractionToSecond@CNtpTime@@SANK@Z		; CNtpTime::NtpFractionToSecond
EXTRN	__fltused:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
tv160 = -76						; size = 8
tv156 = -68						; size = 8
tv145 = -60						; size = 8
tv141 = -52						; size = 8
tv90 = -44						; size = 4
tv89 = -40						; size = 4
_diff$165696 = -32					; size = 8
_diff$165694 = -16					; size = 8
_this$ = -4						; size = 4
_time$ = 8						; size = 4
??GCNtpTime@@QBENABV0@@Z PROC NEAR			; CNtpTime::operator-
; _this$ = ecx

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  :   if (m_Time >= time.m_Time)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _time$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	mov	DWORD PTR tv90[ebp], ecx
	mov	edx, DWORD PTR tv89[ebp]
	mov	eax, DWORD PTR tv90[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $L165693
	ja	SHORT $L166442
	mov	edx, DWORD PTR tv89[ebp]
	mov	eax, DWORD PTR tv90[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $L165693
$L166442:

; 351  : 	{
; 352  :     CNtpTime diff;

	lea	ecx, DWORD PTR _diff$165694[ebp]
	call	??0CNtpTime@@QAE@XZ			; CNtpTime::CNtpTime

; 353  : 		diff.m_Time = m_Time - time.m_Time;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _time$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+4]
	sbb	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _diff$165694[ebp], ecx
	mov	DWORD PTR _diff$165694[ebp+4], edx

; 354  : 		return diff.Seconds() + NtpFractionToSecond(diff.Fraction());

	lea	ecx, DWORD PTR _diff$165694[ebp]
	call	?Seconds@CNtpTime@@QBEKXZ		; CNtpTime::Seconds
	mov	DWORD PTR tv141[ebp], eax
	mov	DWORD PTR tv141[ebp+4], 0
	fild	QWORD PTR tv141[ebp]
	fstp	QWORD PTR tv145[ebp]
	lea	ecx, DWORD PTR _diff$165694[ebp]
	call	?Fraction@CNtpTime@@QBEKXZ		; CNtpTime::Fraction
	push	eax
	call	?NtpFractionToSecond@CNtpTime@@SANK@Z	; CNtpTime::NtpFractionToSecond
	add	esp, 4
	fadd	QWORD PTR tv145[ebp]
	jmp	SHORT $L165692
$L165693:

; 355  : 	}
; 356  : 	else
; 357  : 	{
; 358  : 	  CNtpTime diff;

	lea	ecx, DWORD PTR _diff$165696[ebp]
	call	??0CNtpTime@@QAE@XZ			; CNtpTime::CNtpTime

; 359  : 		diff.m_Time = time.m_Time - m_Time;

	mov	eax, DWORD PTR _time$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	sbb	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _diff$165696[ebp], edx
	mov	DWORD PTR _diff$165696[ebp+4], eax

; 360  : 		return -(diff.Seconds() + NtpFractionToSecond(diff.Fraction()));

	lea	ecx, DWORD PTR _diff$165696[ebp]
	call	?Seconds@CNtpTime@@QBEKXZ		; CNtpTime::Seconds
	mov	DWORD PTR tv156[ebp], eax
	mov	DWORD PTR tv156[ebp+4], 0
	fild	QWORD PTR tv156[ebp]
	fstp	QWORD PTR tv160[ebp]
	lea	ecx, DWORD PTR _diff$165696[ebp]
	call	?Fraction@CNtpTime@@QBEKXZ		; CNtpTime::Fraction
	push	eax
	call	?NtpFractionToSecond@CNtpTime@@SANK@Z	; CNtpTime::NtpFractionToSecond
	add	esp, 4
	fadd	QWORD PTR tv160[ebp]
	fchs
$L165692:

; 361  : 	}
; 362  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166446
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L166446:
	DD	2
	DD	$L166445
$L166445:
	DD	-16					; fffffff0H
	DD	8
	DD	$L166443
	DD	-32					; ffffffe0H
	DD	8
	DD	$L166444
$L166444:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$L166443:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
??GCNtpTime@@QBENABV0@@Z ENDP				; CNtpTime::operator-
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	__real@41efffffffe00000
PUBLIC	??HCNtpTime@@QBE?AV0@ABN@Z			; CNtpTime::operator+
EXTRN	_modf:NEAR
EXTRN	__ftol2:NEAR
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@41efffffffe00000
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+009
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
_frac$165714 = -92					; size = 8
_intpart$165713 = -80					; size = 8
_diff$165711 = -68					; size = 8
_d$165710 = -60						; size = 8
_frac$165707 = -52					; size = 8
_intpart$165706 = -40					; size = 8
_diff$165704 = -28					; size = 8
_rVal$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_timespan$ = 12						; size = 4
??HCNtpTime@@QBE?AV0@ABN@Z PROC NEAR			; CNtpTime::operator+
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 366  :   CNtpTime rVal;

	lea	ecx, DWORD PTR _rVal$[ebp]
	call	??0CNtpTime@@QAE@XZ			; CNtpTime::CNtpTime

; 367  : 	rVal.m_Time = m_Time;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rVal$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rVal$[ebp+4], edx

; 368  : 
; 369  :   if (timespan >= 0)

	mov	eax, DWORD PTR _timespan$[ebp]
	fld	QWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L165703

; 370  : 	{
; 371  : 	  unsigned __int64 diff = ((unsigned __int64) timespan) << 32;

	mov	ecx, DWORD PTR _timespan$[ebp]
	fld	QWORD PTR [ecx]
	call	__ftol2
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	DWORD PTR _diff$165704[ebp], eax
	mov	DWORD PTR _diff$165704[ebp+4], edx

; 372  :     double intpart;
; 373  : 	  double frac = modf(timespan, &intpart);

	lea	edx, DWORD PTR _intpart$165706[ebp]
	push	edx
	mov	eax, DWORD PTR _timespan$[ebp]
	fld	QWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_modf
	add	esp, 12					; 0000000cH
	fst	QWORD PTR _frac$165707[ebp]

; 374  : 	  diff += (unsigned __int64) (frac * 0xFFFFFFFF);

	fmul	QWORD PTR __real@41efffffffe00000
	call	__ftol2
	add	eax, DWORD PTR _diff$165704[ebp]
	mov	ecx, DWORD PTR _diff$165704[ebp+4]
	adc	ecx, edx
	mov	DWORD PTR _diff$165704[ebp], eax
	mov	DWORD PTR _diff$165704[ebp+4], ecx

; 375  : 
; 376  : 		rVal.m_Time += diff;

	mov	edx, DWORD PTR _rVal$[ebp]
	add	edx, DWORD PTR _diff$165704[ebp]
	mov	eax, DWORD PTR _rVal$[ebp+4]
	adc	eax, DWORD PTR _diff$165704[ebp+4]
	mov	DWORD PTR _rVal$[ebp], edx
	mov	DWORD PTR _rVal$[ebp+4], eax

; 377  : 	}
; 378  : 	else

	jmp	SHORT $L165709
$L165703:

; 379  : 	{
; 380  :     double d = -timespan;

	mov	ecx, DWORD PTR _timespan$[ebp]
	fld	QWORD PTR [ecx]
	fchs
	fst	QWORD PTR _d$165710[ebp]

; 381  : 	  unsigned __int64 diff = ((unsigned __int64) d) << 32;

	call	__ftol2
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	DWORD PTR _diff$165711[ebp], eax
	mov	DWORD PTR _diff$165711[ebp+4], edx

; 382  :     double intpart;
; 383  : 	  double frac = modf(d, &intpart);

	lea	edx, DWORD PTR _intpart$165713[ebp]
	push	edx
	fld	QWORD PTR _d$165710[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_modf
	add	esp, 12					; 0000000cH
	fst	QWORD PTR _frac$165714[ebp]

; 384  : 		diff += (unsigned __int64) (frac * 0xFFFFFFFF);

	fmul	QWORD PTR __real@41efffffffe00000
	call	__ftol2
	add	eax, DWORD PTR _diff$165711[ebp]
	mov	ecx, DWORD PTR _diff$165711[ebp+4]
	adc	ecx, edx
	mov	DWORD PTR _diff$165711[ebp], eax
	mov	DWORD PTR _diff$165711[ebp+4], ecx

; 385  : 
; 386  : 		rVal.m_Time -= diff;

	mov	edx, DWORD PTR _rVal$[ebp]
	sub	edx, DWORD PTR _diff$165711[ebp]
	mov	eax, DWORD PTR _rVal$[ebp+4]
	sbb	eax, DWORD PTR _diff$165711[ebp+4]
	mov	DWORD PTR _rVal$[ebp], edx
	mov	DWORD PTR _rVal$[ebp+4], eax
$L165709:

; 387  : 	}
; 388  : 
; 389  : 	return rVal;

	lea	ecx, DWORD PTR _rVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CNtpTime@@QAE@ABV0@@Z		; CNtpTime::CNtpTime
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 390  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166458
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L166458:
	DD	3
	DD	$L166457
$L166457:
	DD	-16					; fffffff0H
	DD	8
	DD	$L166454
	DD	-40					; ffffffd8H
	DD	8
	DD	$L166455
	DD	-80					; ffffffb0H
	DD	8
	DD	$L166456
$L166456:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$L166455:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$L166454:
	DB	114					; 00000072H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
??HCNtpTime@@QBE?AV0@ABN@Z ENDP				; CNtpTime::operator+
_TEXT	ENDS
PUBLIC	??BCNtpTime@@QBE?AU_SYSTEMTIME@@XZ		; CNtpTime::operator _SYSTEMTIME
PUBLIC	?NtpFractionToMs@CNtpTime@@SAGK@Z		; CNtpTime::NtpFractionToMs
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_JD$ = -36						; size = 4
_s$ = -32						; size = 4
_st$ = -24						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BCNtpTime@@QBE?AU_SYSTEMTIME@@XZ PROC NEAR		; CNtpTime::operator _SYSTEMTIME
; _this$ = ecx

; 393  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 394  :   //Currently this function only operates correctly in 
; 395  :   //the 1900 - 2036 primary epoch defined by NTP
; 396  : 
; 397  :   SYSTEMTIME st;
; 398  :   DWORD s = Seconds();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Seconds@CNtpTime@@QBEKXZ		; CNtpTime::Seconds
	mov	DWORD PTR _s$[ebp], eax

; 399  :   st.wSecond = (WORD)(s % 60);

	mov	eax, DWORD PTR _s$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	WORD PTR _st$[ebp+12], dx

; 400  :   s /= 60;

	mov	eax, DWORD PTR _s$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _s$[ebp], eax

; 401  :   st.wMinute = (WORD)(s % 60);

	mov	eax, DWORD PTR _s$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	WORD PTR _st$[ebp+10], dx

; 402  :   s /= 60;

	mov	eax, DWORD PTR _s$[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _s$[ebp], eax

; 403  :   st.wHour = (WORD)(s % 24);

	mov	eax, DWORD PTR _s$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	mov	WORD PTR _st$[ebp+8], dx

; 404  :   s /= 24;

	mov	eax, DWORD PTR _s$[ebp]
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	div	ecx
	mov	DWORD PTR _s$[ebp], eax

; 405  :   long JD = s + JAN_1ST_1900;

	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2415021				; 0024d9adH
	mov	DWORD PTR _JD$[ebp], edx

; 406  :   st.wDayOfWeek = (WORD)((JD + 1) % 7);

	mov	eax, DWORD PTR _JD$[ebp]
	add	eax, 1
	cdq
	mov	ecx, 7
	idiv	ecx
	mov	WORD PTR _st$[ebp+4], dx

; 407  :   GetGregorianDate(JD, st.wYear, st.wMonth, st.wDay);

	lea	edx, DWORD PTR _st$[ebp+6]
	push	edx
	lea	eax, DWORD PTR _st$[ebp+2]
	push	eax
	lea	ecx, DWORD PTR _st$[ebp]
	push	ecx
	mov	edx, DWORD PTR _JD$[ebp]
	push	edx
	call	?GetGregorianDate@CNtpTime@@KAXJAAG00@Z	; CNtpTime::GetGregorianDate
	add	esp, 16					; 00000010H

; 408  :   st.wMilliseconds = NtpFractionToMs(Fraction());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fraction@CNtpTime@@QBEKXZ		; CNtpTime::Fraction
	push	eax
	call	?NtpFractionToMs@CNtpTime@@SAGK@Z	; CNtpTime::NtpFractionToMs
	add	esp, 4
	mov	WORD PTR _st$[ebp+14], ax

; 409  : 
; 410  :   return st;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _st$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _st$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _st$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 411  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166462
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L166462:
	DD	1
	DD	$L166461
$L166461:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$L166460
$L166460:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??BCNtpTime@@QBE?AU_SYSTEMTIME@@XZ ENDP			; CNtpTime::operator _SYSTEMTIME
_TEXT	ENDS
EXTRN	__aullshr:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Seconds@CNtpTime@@QBEKXZ PROC NEAR			; CNtpTime::Seconds
; _this$ = ecx

; 414  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 415  :   return (DWORD) ((m_Time & 0xFFFFFFFF00000000) >> 32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 0
	mov	edx, DWORD PTR [eax+4]
	mov	eax, ecx
	mov	cl, 32					; 00000020H
	call	__aullshr

; 416  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Seconds@CNtpTime@@QBEKXZ ENDP				; CNtpTime::Seconds
; Function compile flags: /Odt /RTCsu
_this$ = -4						; size = 4
?Fraction@CNtpTime@@QBEKXZ PROC NEAR			; CNtpTime::Fraction
; _this$ = ecx

; 419  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 420  :   return (DWORD) (m_Time & 0xFFFFFFFF);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	and	edx, 0
	mov	eax, ecx

; 421  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Fraction@CNtpTime@@QBEKXZ ENDP				; CNtpTime::Fraction
_TEXT	ENDS
PUBLIC	??BCNtpTime@@QBE?AUCNtpTimePacket@@XZ		; CNtpTime::operator CNtpTimePacket
EXTRN	__imp__htonl@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_ntp$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BCNtpTime@@QBE?AUCNtpTimePacket@@XZ PROC NEAR		; CNtpTime::operator CNtpTimePacket
; _this$ = ecx

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 425  :   CNtpTimePacket ntp;
; 426  :   ntp.m_dwInteger = htonl(Seconds());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Seconds@CNtpTime@@QBEKXZ		; CNtpTime::Seconds
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__htonl@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ntp$[ebp], eax

; 427  :   ntp.m_dwFractional = htonl(Fraction());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Fraction@CNtpTime@@QBEKXZ		; CNtpTime::Fraction
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__htonl@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ntp$[ebp+4], eax

; 428  : 	return ntp;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _ntp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ntp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 429  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166469
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L166469:
	DD	1
	DD	$L166468
$L166468:
	DD	-16					; fffffff0H
	DD	8
	DD	$L166467
$L166467:
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	0
??BCNtpTime@@QBE?AUCNtpTimePacket@@XZ ENDP		; CNtpTime::operator CNtpTimePacket
_TEXT	ENDS
PUBLIC	?GetTickCount@CNtpTime@@SA?AV1@XZ		; CNtpTime::GetTickCount
EXTRN	__imp__GetSystemTime@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_t$ = -36						; size = 8
_st$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CNtpTime@@SA?AV1@XZ PROC NEAR		; CNtpTime::GetTickCount

; 432  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 433  :   SYSTEMTIME st;
; 434  :   GetSystemTime(&st);

	mov	esi, esp
	lea	eax, DWORD PTR _st$[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemTime@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 435  : 	CNtpTime t(st);

	lea	ecx, DWORD PTR _st$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _t$[ebp]
	call	??0CNtpTime@@QAE@ABU_SYSTEMTIME@@@Z	; CNtpTime::CNtpTime

; 436  :   return t;

	lea	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CNtpTime@@QAE@ABV0@@Z		; CNtpTime::CNtpTime
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 437  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166474
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L166474:
	DD	2
	DD	$L166473
$L166473:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$L166471
	DD	-36					; ffffffdcH
	DD	8
	DD	$L166472
$L166472:
	DB	116					; 00000074H
	DB	0
$L166471:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?GetTickCount@CNtpTime@@SA?AV1@XZ ENDP			; CNtpTime::GetTickCount
; Function compile flags: /Odt /RTCsu
_wMilliSeconds$ = 8					; size = 2
?MsToNtpFraction@CNtpTime@@SAKG@Z PROC NEAR		; CNtpTime::MsToNtpFraction

; 440  : {

	push	ebp
	mov	ebp, esp

; 441  :   ATLASSERT(wMilliSeconds < 1000);

	movzx	eax, WORD PTR _wMilliSeconds$[ebp]
	cmp	eax, 1000				; 000003e8H
	jl	SHORT $L166476
	push	OFFSET FLAT:$SG165749
	push	0
	push	441					; 000001b9H
	push	OFFSET FLAT:$SG165750
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L166476
	int	3
$L166476:

; 442  : 	return m_MsToNTP[wMilliSeconds];

	movzx	edx, WORD PTR _wMilliSeconds$[ebp]
	mov	eax, DWORD PTR ?m_MsToNTP@CNtpTime@@1PAKA[edx*4]

; 443  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?MsToNtpFraction@CNtpTime@@SAKG@Z ENDP			; CNtpTime::MsToNtpFraction
_TEXT	ENDS
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
tv72 = -8						; size = 8
_dwFraction$ = 8					; size = 4
?NtpFractionToMs@CNtpTime@@SAGK@Z PROC NEAR		; CNtpTime::NtpFractionToMs

; 446  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 447  : 	return (WORD)((((double)dwFraction) * NTP_FRACTIONAL_TO_MS) + 0.5);

	mov	eax, DWORD PTR _dwFraction$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	DWORD PTR tv72[ebp+4], 0
	fild	QWORD PTR tv72[ebp]
	fmul	QWORD PTR _NTP_FRACTIONAL_TO_MS
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2

; 448  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NtpFractionToMs@CNtpTime@@SAGK@Z ENDP			; CNtpTime::NtpFractionToMs
; Function compile flags: /Odt /RTCsu
tv75 = -24						; size = 8
tv70 = -16						; size = 8
_d$ = -8						; size = 8
_dwFraction$ = 8					; size = 4
?NtpFractionToSecond@CNtpTime@@SANK@Z PROC NEAR		; CNtpTime::NtpFractionToSecond

; 451  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 452  :   double d = (double)dwFraction;

	mov	eax, DWORD PTR _dwFraction$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	mov	DWORD PTR tv70[ebp+4], 0
	fild	QWORD PTR tv70[ebp]
	fst	QWORD PTR _d$[ebp]

; 453  : 	d *= NTP_TO_SECOND;

	fmul	QWORD PTR _NTP_TO_SECOND
	fstp	QWORD PTR _d$[ebp]

; 454  : 	return ((double)dwFraction) * NTP_TO_SECOND;

	mov	ecx, DWORD PTR _dwFraction$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	mov	DWORD PTR tv75[ebp+4], 0
	fild	QWORD PTR tv75[ebp]
	fmul	QWORD PTR _NTP_TO_SECOND

; 455  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NtpFractionToSecond@CNtpTime@@SANK@Z ENDP		; CNtpTime::NtpFractionToSecond
_TEXT	ENDS
PUBLIC	??0CNtpSocket@@QAE@XZ				; CNtpSocket::CNtpSocket
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CNtpSocket@@QAE@XZ PROC NEAR				; CNtpSocket::CNtpSocket
; _this$ = ecx

; 462  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 463  :   m_hSocket = INVALID_SOCKET; //default to an invalid scoket descriptor

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1

; 464  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CNtpSocket@@QAE@XZ ENDP				; CNtpSocket::CNtpSocket
_TEXT	ENDS
PUBLIC	??1CNtpSocket@@QAE@XZ				; CNtpSocket::~CNtpSocket
PUBLIC	?Close@CNtpSocket@@QAEXXZ			; CNtpSocket::Close
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CNtpSocket@@QAE@XZ PROC NEAR				; CNtpSocket::~CNtpSocket
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 468  :   Close();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CNtpSocket@@QAEXXZ		; CNtpSocket::Close

; 469  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CNtpSocket@@QAE@XZ ENDP				; CNtpSocket::~CNtpSocket
_TEXT	ENDS
PUBLIC	?Create@CNtpSocket@@QAEHXZ			; CNtpSocket::Create
EXTRN	__imp__socket@12:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Create@CNtpSocket@@QAEHXZ PROC NEAR			; CNtpSocket::Create
; _this$ = ecx

; 472  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 473  :   //NTP Uses UDP instead of the usual TCP
; 474  :   m_hSocket = socket(AF_INET, SOCK_DGRAM, 0);

	mov	esi, esp
	push	0
	push	2
	push	2
	call	DWORD PTR __imp__socket@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 475  :   return (m_hSocket != INVALID_SOCKET);

	mov	edx, DWORD PTR _this$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx], -1
	setne	al

; 476  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Create@CNtpSocket@@QAEHXZ ENDP				; CNtpSocket::Create
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	?T2A@@YAPADPAD@Z				; T2A
PUBLIC	?Connect@CNtpSocket@@QAEHPBDH@Z			; CNtpSocket::Connect
PUBLIC	?Connect@CNtpSocket@@IAEHPBUsockaddr@@H@Z	; CNtpSocket::Connect
EXTRN	_memset:NEAR
EXTRN	__imp__htons@4:NEAR
EXTRN	__imp__inet_addr@4:NEAR
EXTRN	__imp__gethostbyname@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_lphost$165791 = -56					; size = 4
_sockAddr$ = -48					; size = 16
_lpszAscii$ = -28					; size = 4
__lpa$ = -24						; size = 4
__lpw$ = -20						; size = 4
__acp$ = -16						; size = 4
__convert$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_pszHostAddress$ = 8					; size = 4
_nPort$ = 12						; size = 4
?Connect@CNtpSocket@@QAEHPBDH@Z PROC NEAR		; CNtpSocket::Connect
; _this$ = ecx

; 479  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 480  : 	//For correct operation of the T2A macro, see MFC Tech Note 59
; 481  : 	USES_CONVERSION;

	mov	DWORD PTR __convert$[ebp], 0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	mov	DWORD PTR __acp$[ebp], eax
	mov	DWORD PTR __lpw$[ebp], 0
	mov	DWORD PTR __lpa$[ebp], 0

; 482  : 
; 483  :   //must have been created first
; 484  : 	ATLASSERT(m_hSocket != INVALID_SOCKET);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $L166486
	push	OFFSET FLAT:$SG165784
	push	0
	push	484					; 000001e4H
	push	OFFSET FLAT:$SG165785
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L166486
	int	3
$L166486:

; 485  : 	LPSTR lpszAscii = T2A((LPTSTR)pszHostAddress);

	mov	edx, DWORD PTR _pszHostAddress$[ebp]
	push	edx
	call	?T2A@@YAPADPAD@Z			; T2A
	add	esp, 4
	mov	DWORD PTR _lpszAscii$[ebp], eax

; 486  : 
; 487  : 	//Determine if the address is in dotted notation
; 488  : 	SOCKADDR_IN sockAddr;
; 489  : 	ZeroMemory(&sockAddr, sizeof(sockAddr));

	push	16					; 00000010H
	push	0
	lea	eax, DWORD PTR _sockAddr$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 490  : 	sockAddr.sin_family = AF_INET;

	mov	WORD PTR _sockAddr$[ebp], 2

; 491  : 	sockAddr.sin_port = htons((u_short)nPort);

	mov	esi, esp
	mov	cx, WORD PTR _nPort$[ebp]
	push	ecx
	call	DWORD PTR __imp__htons@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	WORD PTR _sockAddr$[ebp+2], ax

; 492  : 	sockAddr.sin_addr.s_addr = inet_addr(lpszAscii);

	mov	esi, esp
	mov	edx, DWORD PTR _lpszAscii$[ebp]
	push	edx
	call	DWORD PTR __imp__inet_addr@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _sockAddr$[ebp+4], eax

; 493  : 
; 494  : 	//If the address is not dotted notation, then do a DNS 
; 495  : 	//lookup of it.
; 496  : 	if (sockAddr.sin_addr.s_addr == INADDR_NONE)

	cmp	DWORD PTR _sockAddr$[ebp+4], -1
	jne	SHORT $L165790

; 497  : 	{
; 498  : 		LPHOSTENT lphost;
; 499  : 		lphost = gethostbyname(lpszAscii);

	mov	esi, esp
	mov	eax, DWORD PTR _lpszAscii$[ebp]
	push	eax
	call	DWORD PTR __imp__gethostbyname@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lphost$165791[ebp], eax

; 500  : 		if (lphost != NULL)

	cmp	DWORD PTR _lphost$165791[ebp], 0
	je	SHORT $L165792

; 501  : 			sockAddr.sin_addr.s_addr = ((LPIN_ADDR)lphost->h_addr)->s_addr;

	mov	ecx, DWORD PTR _lphost$165791[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _sockAddr$[ebp+4], ecx

; 502  : 		else

	jmp	SHORT $L165790
$L165792:

; 503  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $L165777
$L165790:

; 504  : 	}
; 505  : 
; 506  : 	//Call the protected version which takes an address 
; 507  : 	//in the form of a standard C style struct.
; 508  : 	return Connect((SOCKADDR*)&sockAddr, sizeof(sockAddr));

	push	16					; 00000010H
	lea	edx, DWORD PTR _sockAddr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Connect@CNtpSocket@@IAEHPBUsockaddr@@H@Z ; CNtpSocket::Connect
$L165777:

; 509  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166490
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L166490:
	DD	1
	DD	$L166489
$L166489:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$L166487
$L166487:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	0
?Connect@CNtpSocket@@QAEHPBDH@Z ENDP			; CNtpSocket::Connect
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 158  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?T2A@@YAPADPAD@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
?T2A@@YAPADPAD@Z PROC NEAR				; T2A, COMDAT

; 763  : 	inline LPSTR T2A(LPTSTR lp) { return lp; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _lp$[ebp]
	pop	ebp
	ret	0
?T2A@@YAPADPAD@Z ENDP					; T2A
_TEXT	ENDS
EXTRN	__imp__connect@12:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\activex\xmlsign\sntp.cpp
_TEXT	SEGMENT
_nConnect$ = -8						; size = 4
_this$ = -4						; size = 4
_lpSockAddr$ = 8					; size = 4
_nSockAddrLen$ = 12					; size = 4
?Connect@CNtpSocket@@IAEHPBUsockaddr@@H@Z PROC NEAR	; CNtpSocket::Connect
; _this$ = ecx

; 512  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 513  : 	int nConnect = connect(m_hSocket, lpSockAddr, nSockAddrLen);

	mov	esi, esp
	mov	eax, DWORD PTR _nSockAddrLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpSockAddr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__connect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nConnect$[ebp], eax

; 514  :   return (nConnect == 0);

	xor	eax, eax
	cmp	DWORD PTR _nConnect$[ebp], 0
	sete	al

; 515  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Connect@CNtpSocket@@IAEHPBUsockaddr@@H@Z ENDP		; CNtpSocket::Connect
_TEXT	ENDS
PUBLIC	?Send@CNtpSocket@@QAEHPBDH@Z			; CNtpSocket::Send
EXTRN	__imp__send@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszBuf$ = 8						; size = 4
_nBuf$ = 12						; size = 4
?Send@CNtpSocket@@QAEHPBDH@Z PROC NEAR			; CNtpSocket::Send
; _this$ = ecx

; 518  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 519  :   //must have been created first
; 520  :   ATLASSERT(m_hSocket != INVALID_SOCKET);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $L166497
	push	OFFSET FLAT:$SG165809
	push	0
	push	520					; 00000208H
	push	OFFSET FLAT:$SG165810
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L166497
	int	3
$L166497:

; 521  : 	return (send(m_hSocket, pszBuf, nBuf, 0) != SOCKET_ERROR);

	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _nBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__send@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	ecx, ecx
	cmp	eax, -1
	setne	cl
	mov	eax, ecx

; 522  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Send@CNtpSocket@@QAEHPBDH@Z ENDP			; CNtpSocket::Send
_TEXT	ENDS
PUBLIC	?Receive@CNtpSocket@@QAEHPADH@Z			; CNtpSocket::Receive
EXTRN	__imp__recv@16:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszBuf$ = 8						; size = 4
_nBuf$ = 12						; size = 4
?Receive@CNtpSocket@@QAEHPADH@Z PROC NEAR		; CNtpSocket::Receive
; _this$ = ecx

; 525  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 526  :   //must have been created first
; 527  :   ATLASSERT(m_hSocket != INVALID_SOCKET);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	jne	SHORT $L166499
	push	OFFSET FLAT:$SG165818
	push	0
	push	527					; 0000020fH
	push	OFFSET FLAT:$SG165819
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L166499
	int	3
$L166499:

; 528  : 	return recv(m_hSocket, pszBuf, nBuf, 0); 

	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _nBuf$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszBuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__recv@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 529  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Receive@CNtpSocket@@QAEHPADH@Z ENDP			; CNtpSocket::Receive
_TEXT	ENDS
EXTRN	__imp__closesocket@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CNtpSocket@@QAEXXZ PROC NEAR			; CNtpSocket::Close
; _this$ = ecx

; 532  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 	if (m_hSocket != INVALID_SOCKET)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $L165822

; 534  : 	{
; 535  : 		ATLASSERT (SOCKET_ERROR != closesocket(m_hSocket));

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__closesocket@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $L166501
	push	OFFSET FLAT:$SG165826
	push	0
	push	535					; 00000217H
	push	OFFSET FLAT:$SG165827
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L166501
	int	3
$L166501:

; 536  : 			m_hSocket = INVALID_SOCKET;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], -1
$L165822:

; 537  : 	}
; 538  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CNtpSocket@@QAEXXZ ENDP				; CNtpSocket::Close
_TEXT	ENDS
PUBLIC	?IsReadible@CNtpSocket@@QAEHAAHK@Z		; CNtpSocket::IsReadible
EXTRN	__imp__select@20:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_nStatus$ = -296					; size = 4
___i$165840 = -292					; size = 4
_fds$ = -284						; size = 260
_timeout$ = -16						; size = 8
_this$ = -4						; size = 4
_bReadible$ = 8						; size = 4
_dwTimeout$ = 12					; size = 4
?IsReadible@CNtpSocket@@QAEHAAHK@Z PROC NEAR		; CNtpSocket::IsReadible
; _this$ = ecx

; 541  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 542  :   timeval timeout;
; 543  :   timeout.tv_sec = dwTimeout / 1000;

	mov	eax, DWORD PTR _dwTimeout$[ebp]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR _timeout$[ebp], eax

; 544  :   timeout.tv_usec = dwTimeout % 1000;

	mov	eax, DWORD PTR _dwTimeout$[ebp]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR _timeout$[ebp+4], edx

; 545  :   fd_set fds;
; 546  :   FD_ZERO(&fds);

	mov	DWORD PTR _fds$[ebp], 0
$L165837:

; 547  :   FD_SET(m_hSocket, &fds);

	mov	DWORD PTR ___i$165840[ebp], 0
	jmp	SHORT $L165842
$L165843:
	mov	edx, DWORD PTR ___i$165840[ebp]
	add	edx, 1
	mov	DWORD PTR ___i$165840[ebp], edx
$L165842:
	mov	eax, DWORD PTR ___i$165840[ebp]
	cmp	eax, DWORD PTR _fds$[ebp]
	jae	SHORT $L165844
	mov	ecx, DWORD PTR ___i$165840[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _fds$[ebp+ecx*4+4]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $L165846
	jmp	SHORT $L165844
$L165846:
	jmp	SHORT $L165843
$L165844:
	mov	ecx, DWORD PTR ___i$165840[ebp]
	cmp	ecx, DWORD PTR _fds$[ebp]
	jne	SHORT $L165838
	cmp	DWORD PTR _fds$[ebp], 64		; 00000040H
	jae	SHORT $L165838
	mov	edx, DWORD PTR ___i$165840[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fds$[ebp+edx*4+4], ecx
	mov	edx, DWORD PTR _fds$[ebp]
	add	edx, 1
	mov	DWORD PTR _fds$[ebp], edx
$L165838:
	xor	eax, eax
	jne	SHORT $L165837

; 548  :   int nStatus = select(0, &fds, NULL, NULL, &timeout);

	mov	esi, esp
	lea	ecx, DWORD PTR _timeout$[ebp]
	push	ecx
	push	0
	push	0
	lea	edx, DWORD PTR _fds$[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__select@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nStatus$[ebp], eax

; 549  :   if (nStatus == SOCKET_ERROR)

	cmp	DWORD PTR _nStatus$[ebp], -1
	jne	SHORT $L165854

; 550  :     return FALSE;

	xor	eax, eax
	jmp	SHORT $L165833
$L165854:

; 551  :   else
; 552  :   {
; 553  :     bReadible = !(nStatus == 0);

	xor	eax, eax
	cmp	DWORD PTR _nStatus$[ebp], 0
	setne	al
	mov	ecx, DWORD PTR _bReadible$[ebp]
	mov	DWORD PTR [ecx], eax

; 554  :     return TRUE;

	mov	eax, 1
$L165833:

; 555  :   }
; 556  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166506
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L166506:
	DD	2
	DD	$L166505
$L166505:
	DD	-16					; fffffff0H
	DD	8
	DD	$L166503
	DD	-284					; fffffee4H
	DD	260					; 00000104H
	DD	$L166504
$L166504:
	DB	102					; 00000066H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$L166503:
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
?IsReadible@CNtpSocket@@QAEHAAHK@Z ENDP			; CNtpSocket::IsReadible
_TEXT	ENDS
PUBLIC	??0CSNTPClient@@QAE@XZ				; CSNTPClient::CSNTPClient
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSNTPClient@@QAE@XZ PROC NEAR			; CSNTPClient::CSNTPClient
; _this$ = ecx

; 563  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 564  :   m_dwTimeout = 5000; //Default timeout of 5 seconds

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 5000			; 00001388H

; 565  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSNTPClient@@QAE@XZ ENDP				; CSNTPClient::CSNTPClient
_TEXT	ENDS
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ		; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	__real@4000000000000000
PUBLIC	?GetServerTime@CSNTPClient@@QAEHPBDAAUNtpServerResponse@@H@Z ; CSNTPClient::GetServerTime
PUBLIC	??_GCNtpSocket@@QAEPAXI@Z			; CNtpSocket::`scalar deleting destructor'
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	__imp__GetLastError@0:NEAR
EXTRN	__imp__SetLastError@4:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T166561 DD	0ffffffffH
	DD	FLAT:$L166546
$T166550 DD	019930520H
	DD	01H
	DD	FLAT:$T166561
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
tv306 = -380						; size = 4
tv419 = -376						; size = 8
tv413 = -368						; size = 8
tv218 = -360						; size = 4
tv190 = -356						; size = 4
tv171 = -352						; size = 4
tv144 = -348						; size = 4
tv81 = -344						; size = 4
$T166543 = -340						; size = 4
$T166542 = -336						; size = 4
$T166541 = -332						; size = 8
$T166540 = -324						; size = 8
$T166539 = -316						; size = 8
$T166536 = -308						; size = 4
$T166535 = -304						; size = 4
$T166534 = -300						; size = 8
$T166533 = -292						; size = 8
$T166530 = -284						; size = 4
$T166529 = -280						; size = 4
$T166528 = -276						; size = 8
$T166525 = -268						; size = 4
$T166524 = -264						; size = 4
$T166523 = -260						; size = 8
$T166522 = -252						; size = 8
$T166521 = -244						; size = 8
$T166518 = -236						; size = 4
$T166517 = -232						; size = 4
$T166516 = -228						; size = 8
$T166515 = -220						; size = 8
$T166512 = -212						; size = 4
$T166511 = -208						; size = 4
_dwError$165921 = -204					; size = 4
_nReceiveSize$165914 = -200				; size = 4
_nfp$165913 = -192					; size = 68
_bReadable$165904 = -116				; size = 4
_dwError$165901 = -108					; size = 4
_nSendSize$165891 = -104				; size = 4
_nbi$165890 = -96					; size = 48
_dwError$165886 = -44					; size = 4
_pSocket$ = -40						; size = 4
__lpa$ = -36						; size = 4
__lpw$ = -32						; size = 4
__acp$ = -28						; size = 4
__convert$ = -24					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pszHostName$ = 8					; size = 4
_response$ = 12						; size = 4
_nPort$ = 16						; size = 4
?GetServerTime@CSNTPClient@@QAEHPBDAAUNtpServerResponse@@H@Z PROC NEAR ; CSNTPClient::GetServerTime
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetServerTime@CSNTPClient@@QAEHPBDAAUNtpServerResponse@@H@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 368				; 00000170H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	//For correct operation of the T2A macro, see MFC Tech Note 59
; 570  : 	USES_CONVERSION;

	mov	DWORD PTR __convert$[ebp], 0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	mov	DWORD PTR __acp$[ebp], eax
	mov	DWORD PTR __lpw$[ebp], 0
	mov	DWORD PTR __lpa$[ebp], 0

; 571  : 
; 572  : 	//paramater validity checking
; 573  :   ATLASSERT(pszHostName);

	cmp	DWORD PTR _pszHostName$[ebp], 0
	jne	SHORT $L166510
	push	OFFSET FLAT:$SG165870
	push	0
	push	573					; 0000023dH
	push	OFFSET FLAT:$SG165871
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L166510
	int	3
$L166510:

; 574  : 	//Create the socket, Allocated of the heap so we can control
; 575  : 	//the time when it's destructor is called. This means that
; 576  : 	//we can call SetLastError after its destructor
; 577  : 	CNtpSocket* pSocket = new CNtpSocket();

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T166512[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T166512[ebp], 0
	je	SHORT $L166513
	mov	ecx, DWORD PTR $T166512[ebp]
	call	??0CNtpSocket@@QAE@XZ			; CNtpSocket::CNtpSocket
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $L166514
$L166513:
	mov	DWORD PTR tv81[ebp], 0
$L166514:
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T166511[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T166511[ebp]
	mov	DWORD PTR _pSocket$[ebp], edx

; 578  : 	if (!pSocket->Create())

	mov	ecx, DWORD PTR _pSocket$[ebp]
	call	?Create@CNtpSocket@@QAEHXZ		; CNtpSocket::Create
	test	eax, eax
	jne	SHORT $L165877

; 579  : 	{
; 580  : 		ATLTRACE(_T("Failed to create client socket, GetLastError returns: %d\n"), GetLastError());

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET FLAT:$SG165881
	push	580					; 00000244H
	push	OFFSET FLAT:$SG165880
	lea	ecx, DWORD PTR $T166515[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 12					; 0000000cH

; 581  : 		return FALSE;

	xor	eax, eax
	jmp	$L165864
$L165877:

; 582  : 	}
; 583  : 
; 584  : 	//Connect to the SNTP server
; 585  : 	if (!pSocket->Connect(pszHostName, nPort))

	mov	eax, DWORD PTR _nPort$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszHostName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pSocket$[ebp]
	call	?Connect@CNtpSocket@@QAEHPBDH@Z		; CNtpSocket::Connect
	test	eax, eax
	jne	$L165882

; 586  : 	{
; 587  : 		ATLTRACE(_T("Could not connect to the SNTP server %s on port %d, GetLastError returns: %d\n"), pszHostName, nPort, GetLastError());

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _nPort$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszHostName$[ebp]
	push	eax
	push	OFFSET FLAT:$SG165885
	push	587					; 0000024bH
	push	OFFSET FLAT:$SG165884
	lea	ecx, DWORD PTR $T166516[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 20					; 00000014H

; 588  : 
; 589  : 		//Tidy up prior to returning
; 590  : 		DWORD dwError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwError$165886[ebp], eax

; 591  : 		delete pSocket;

	mov	ecx, DWORD PTR _pSocket$[ebp]
	mov	DWORD PTR $T166518[ebp], ecx
	mov	edx, DWORD PTR $T166518[ebp]
	mov	DWORD PTR $T166517[ebp], edx
	cmp	DWORD PTR $T166517[ebp], 0
	je	SHORT $L166519
	push	1
	mov	ecx, DWORD PTR $T166517[ebp]
	call	??_GCNtpSocket@@QAEPAXI@Z
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $L166520
$L166519:
	mov	DWORD PTR tv144[ebp], 0
$L166520:

; 592  : 		SetLastError(dwError);

	mov	esi, esp
	mov	eax, DWORD PTR _dwError$165886[ebp]
	push	eax
	call	DWORD PTR __imp__SetLastError@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 593  : 
; 594  : 		return FALSE;

	xor	eax, eax
	jmp	$L165864
$L165882:

; 595  : 	}
; 596  : 	else
; 597  : 	{
; 598  : 		//Initialise the NtpBasicInfo packet
; 599  : 		NtpBasicInfo nbi;
; 600  : 		int nSendSize = sizeof(NtpBasicInfo);

	mov	DWORD PTR _nSendSize$165891[ebp], 48	; 00000030H

; 601  : 		ZeroMemory(&nbi, nSendSize);

	mov	ecx, DWORD PTR _nSendSize$165891[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _nbi$165890[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 602  : 			nbi.m_LiVnMode = 27; //Encoded representation which represents NTP Client Request & NTP version 3.0

	mov	BYTE PTR _nbi$165890[ebp], 27		; 0000001bH

; 603  : 		nbi.m_TransmitTimestamp = CNtpTime::GetCurrentTime();

	lea	eax, DWORD PTR $T166522[ebp]
	push	eax
	lea	ecx, DWORD PTR $T166521[ebp]
	push	ecx
	call	?GetTickCount@CNtpTime@@SA?AV1@XZ	; CNtpTime::GetTickCount
	add	esp, 4
	mov	ecx, eax
	call	??BCNtpTime@@QBE?AUCNtpTimePacket@@XZ	; CNtpTime::operator CNtpTimePacket
	mov	edx, DWORD PTR $T166522[ebp]
	mov	DWORD PTR _nbi$165890[ebp+40], edx
	mov	eax, DWORD PTR $T166522[ebp+4]
	mov	DWORD PTR _nbi$165890[ebp+44], eax

; 604  : 
; 605  : 		//Send off the NtpBasicInfo packet
; 606  : 		if (!pSocket->Send((LPCSTR) &nbi, nSendSize))

	mov	ecx, DWORD PTR _nSendSize$165891[ebp]
	push	ecx
	lea	edx, DWORD PTR _nbi$165890[ebp]
	push	edx
	mov	ecx, DWORD PTR _pSocket$[ebp]
	call	?Send@CNtpSocket@@QAEHPBDH@Z		; CNtpSocket::Send
	test	eax, eax
	jne	$L165897

; 607  : 		{
; 608  : 		ATLTRACE(_T("Failed in call to send NTP request to the SNTP server, GetLastError returns %d\n"), GetLastError());

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET FLAT:$SG165900
	push	608					; 00000260H
	push	OFFSET FLAT:$SG165899
	lea	ecx, DWORD PTR $T166523[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 12					; 0000000cH

; 609  : 
; 610  : 		//Tidy up prior to returning
; 611  : 		DWORD dwError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwError$165901[ebp], eax

; 612  : 		delete pSocket;

	mov	eax, DWORD PTR _pSocket$[ebp]
	mov	DWORD PTR $T166525[ebp], eax
	mov	ecx, DWORD PTR $T166525[ebp]
	mov	DWORD PTR $T166524[ebp], ecx
	cmp	DWORD PTR $T166524[ebp], 0
	je	SHORT $L166526
	push	1
	mov	ecx, DWORD PTR $T166524[ebp]
	call	??_GCNtpSocket@@QAEPAXI@Z
	mov	DWORD PTR tv171[ebp], eax
	jmp	SHORT $L166527
$L166526:
	mov	DWORD PTR tv171[ebp], 0
$L166527:

; 613  : 		SetLastError(dwError);

	mov	esi, esp
	mov	edx, DWORD PTR _dwError$165901[ebp]
	push	edx
	call	DWORD PTR __imp__SetLastError@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 614  : 
; 615  : 		return FALSE;

	xor	eax, eax
	jmp	$L165864
$L165897:

; 616  : 		}
; 617  : 
; 618  : 		//Need to use select to determine readibilty of socket
; 619  : 		BOOL bReadable;
; 620  : 		if (!pSocket->IsReadible(bReadable, m_dwTimeout) || !bReadable)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _bReadable$165904[ebp]
	push	edx
	mov	ecx, DWORD PTR _pSocket$[ebp]
	call	?IsReadible@CNtpSocket@@QAEHAAHK@Z	; CNtpSocket::IsReadible
	test	eax, eax
	je	SHORT $L165906
	cmp	DWORD PTR _bReadable$165904[ebp], 0
	jne	$L165905
$L165906:

; 621  : 		{
; 622  : 		ATLTRACE(_T("Unable to wait for NTP reply from the SNTP server, GetLastError returns %d\n"), WSAETIMEDOUT);

	push	10060					; 0000274cH
	push	OFFSET FLAT:$SG165909
	push	622					; 0000026eH
	push	OFFSET FLAT:$SG165908
	lea	ecx, DWORD PTR $T166528[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 12					; 0000000cH

; 623  : 
; 624  : 		//Tidy up prior to returning
; 625  : 		delete pSocket;

	mov	eax, DWORD PTR _pSocket$[ebp]
	mov	DWORD PTR $T166530[ebp], eax
	mov	ecx, DWORD PTR $T166530[ebp]
	mov	DWORD PTR $T166529[ebp], ecx
	cmp	DWORD PTR $T166529[ebp], 0
	je	SHORT $L166531
	push	1
	mov	ecx, DWORD PTR $T166529[ebp]
	call	??_GCNtpSocket@@QAEPAXI@Z
	mov	DWORD PTR tv190[ebp], eax
	jmp	SHORT $L166532
$L166531:
	mov	DWORD PTR tv190[ebp], 0
$L166532:

; 626  : 		SetLastError(WSAETIMEDOUT);

	mov	esi, esp
	push	10060					; 0000274cH
	call	DWORD PTR __imp__SetLastError@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 627  : 
; 628  : 		return FALSE;

	xor	eax, eax
	jmp	$L165864
$L165905:

; 629  : 		}
; 630  : 		response.m_DestinationTime = CNtpTime::GetCurrentTime();

	lea	edx, DWORD PTR $T166533[ebp]
	push	edx
	call	?GetTickCount@CNtpTime@@SA?AV1@XZ	; CNtpTime::GetTickCount
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _response$[ebp]
	add	ecx, 32					; 00000020H
	call	??4CNtpTime@@QAEAAV0@ABV0@@Z		; CNtpTime::operator=

; 631  : 
; 632  : 		//read back the response into the NtpFullPacket struct
; 633  : 		NtpFullPacket nfp;
; 634  : 		int nReceiveSize = sizeof(NtpFullPacket);

	mov	DWORD PTR _nReceiveSize$165914[ebp], 68	; 00000044H

; 635  : 		ZeroMemory(&nfp, nReceiveSize);

	mov	eax, DWORD PTR _nReceiveSize$165914[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _nfp$165913[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 636  : 		if (!pSocket->Receive((LPSTR) &nfp, nReceiveSize))

	mov	edx, DWORD PTR _nReceiveSize$165914[ebp]
	push	edx
	lea	eax, DWORD PTR _nfp$165913[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSocket$[ebp]
	call	?Receive@CNtpSocket@@QAEHPADH@Z		; CNtpSocket::Receive
	test	eax, eax
	jne	$L165917

; 637  : 		{
; 638  : 		ATLTRACE(_T("Unable to read reply from the SNTP server, GetLastError returns %d\n"), GetLastError());

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	push	OFFSET FLAT:$SG165920
	push	638					; 0000027eH
	push	OFFSET FLAT:$SG165919
	lea	ecx, DWORD PTR $T166534[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 12					; 0000000cH

; 639  : 
; 640  : 		//Tidy up prior to returning
; 641  : 		DWORD dwError = GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwError$165921[ebp], eax

; 642  : 		delete pSocket;

	mov	ecx, DWORD PTR _pSocket$[ebp]
	mov	DWORD PTR $T166536[ebp], ecx
	mov	edx, DWORD PTR $T166536[ebp]
	mov	DWORD PTR $T166535[ebp], edx
	cmp	DWORD PTR $T166535[ebp], 0
	je	SHORT $L166537
	push	1
	mov	ecx, DWORD PTR $T166535[ebp]
	call	??_GCNtpSocket@@QAEPAXI@Z
	mov	DWORD PTR tv218[ebp], eax
	jmp	SHORT $L166538
$L166537:
	mov	DWORD PTR tv218[ebp], 0
$L166538:

; 643  : 		SetLastError(dwError);

	mov	esi, esp
	mov	eax, DWORD PTR _dwError$165921[ebp]
	push	eax
	call	DWORD PTR __imp__SetLastError@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  : 
; 645  : 		return FALSE;

	xor	eax, eax
	jmp	$L165864
$L165917:

; 646  : 		}
; 647  : 
; 648  : 		//Transfer all the useful info into the response structure
; 649  : 		response.m_nStratum = nfp.m_Basic.m_Stratum;

	movzx	ecx, BYTE PTR _nfp$165913[ebp+1]
	mov	edx, DWORD PTR _response$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 650  : 		response.m_nLeapIndicator = (nfp.m_Basic.m_LiVnMode & 0xC0) >> 6;

	movzx	eax, BYTE PTR _nfp$165913[ebp]
	and	eax, 192				; 000000c0H
	sar	eax, 6
	mov	ecx, DWORD PTR _response$[ebp]
	mov	DWORD PTR [ecx], eax

; 651  : 			response.m_OriginateTime = nfp.m_Basic.m_OriginateTimestamp;

	lea	edx, DWORD PTR _nfp$165913[ebp+24]
	push	edx
	lea	ecx, DWORD PTR $T166539[ebp]
	call	??0CNtpTime@@QAE@AAUCNtpTimePacket@@@Z	; CNtpTime::CNtpTime
	lea	eax, DWORD PTR $T166539[ebp]
	push	eax
	mov	ecx, DWORD PTR _response$[ebp]
	add	ecx, 8
	call	??4CNtpTime@@QAEAAV0@ABV0@@Z		; CNtpTime::operator=

; 652  : 		response.m_ReceiveTime = nfp.m_Basic.m_ReceiveTimestamp;

	lea	ecx, DWORD PTR _nfp$165913[ebp+32]
	push	ecx
	lea	ecx, DWORD PTR $T166540[ebp]
	call	??0CNtpTime@@QAE@AAUCNtpTimePacket@@@Z	; CNtpTime::CNtpTime
	lea	edx, DWORD PTR $T166540[ebp]
	push	edx
	mov	ecx, DWORD PTR _response$[ebp]
	add	ecx, 16					; 00000010H
	call	??4CNtpTime@@QAEAAV0@ABV0@@Z		; CNtpTime::operator=

; 653  : 		response.m_TransmitTime = nfp.m_Basic.m_TransmitTimestamp;

	lea	eax, DWORD PTR _nfp$165913[ebp+40]
	push	eax
	lea	ecx, DWORD PTR $T166541[ebp]
	call	??0CNtpTime@@QAE@AAUCNtpTimePacket@@@Z	; CNtpTime::CNtpTime
	lea	ecx, DWORD PTR $T166541[ebp]
	push	ecx
	mov	ecx, DWORD PTR _response$[ebp]
	add	ecx, 24					; 00000018H
	call	??4CNtpTime@@QAEAAV0@ABV0@@Z		; CNtpTime::operator=

; 654  : 		response.m_RoundTripDelay = (response.m_DestinationTime - response.m_OriginateTime) - (response.m_ReceiveTime - response.m_TransmitTime);

	mov	edx, DWORD PTR _response$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _response$[ebp]
	add	ecx, 32					; 00000020H
	call	??GCNtpTime@@QBENABV0@@Z		; CNtpTime::operator-
	fstp	QWORD PTR tv413[ebp]
	mov	eax, DWORD PTR _response$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _response$[ebp]
	add	ecx, 16					; 00000010H
	call	??GCNtpTime@@QBENABV0@@Z		; CNtpTime::operator-
	fsubr	QWORD PTR tv413[ebp]
	mov	ecx, DWORD PTR _response$[ebp]
	fstp	QWORD PTR [ecx+40]

; 655  : 		response.m_LocalClockOffset = ((response.m_ReceiveTime - response.m_OriginateTime) + (response.m_TransmitTime - response.m_DestinationTime)) / 2;

	mov	edx, DWORD PTR _response$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _response$[ebp]
	add	ecx, 16					; 00000010H
	call	??GCNtpTime@@QBENABV0@@Z		; CNtpTime::operator-
	fstp	QWORD PTR tv419[ebp]
	mov	eax, DWORD PTR _response$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _response$[ebp]
	add	ecx, 24					; 00000018H
	call	??GCNtpTime@@QBENABV0@@Z		; CNtpTime::operator-
	fadd	QWORD PTR tv419[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	mov	ecx, DWORD PTR _response$[ebp]
	fstp	QWORD PTR [ecx+48]

; 656  : 
; 657  : 		//Tidy up prior to returning
; 658  : 		delete pSocket;

	mov	edx, DWORD PTR _pSocket$[ebp]
	mov	DWORD PTR $T166543[ebp], edx
	mov	eax, DWORD PTR $T166543[ebp]
	mov	DWORD PTR $T166542[ebp], eax
	cmp	DWORD PTR $T166542[ebp], 0
	je	SHORT $L166544
	push	1
	mov	ecx, DWORD PTR $T166542[ebp]
	call	??_GCNtpSocket@@QAEPAXI@Z
	mov	DWORD PTR tv306[ebp], eax
	jmp	SHORT $L166545
$L166544:
	mov	DWORD PTR tv306[ebp], 0
$L166545:

; 659  : 
; 660  : 		return TRUE;

	mov	eax, 1
$L165864:

; 661  : 	}
; 662  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166560
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	add	esp, 380				; 0000017cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L166560:
	DD	3
	DD	$L166559
$L166559:
	DD	-96					; ffffffa0H
	DD	48					; 00000030H
	DD	$L166553
	DD	-116					; ffffff8cH
	DD	4
	DD	$L166554
	DD	-192					; ffffff40H
	DD	68					; 00000044H
	DD	$L166555
$L166555:
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	112					; 00000070H
	DB	0
$L166554:
	DB	98					; 00000062H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
$L166553:
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
$L166546:
	mov	eax, DWORD PTR $T166512[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?GetServerTime@CSNTPClient@@QAEHPBDAAUNtpServerResponse@@H@Z:
	mov	eax, OFFSET FLAT:$T166550
	jmp	___CxxFrameHandler
text$x	ENDS
?GetServerTime@CSNTPClient@@QAEHPBDAAUNtpServerResponse@@H@Z ENDP ; CSNTPClient::GetServerTime
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GCNtpSocket@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCNtpSocket@@QAEPAXI@Z PROC NEAR			; CNtpSocket::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CNtpSocket@@QAE@XZ			; CNtpSocket::~CNtpSocket
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L165932
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L165932:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCNtpSocket@@QAEPAXI@Z ENDP				; CNtpSocket::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?EnableSetTimePriviledge@CSNTPClient@@IAEHXZ	; CSNTPClient::EnableSetTimePriviledge
EXTRN	__imp__GetCurrentProcess@0:NEAR
EXTRN	__imp__OpenProcessToken@12:NEAR
EXTRN	__imp__AdjustTokenPrivileges@24:NEAR
EXTRN	__imp__LookupPrivilegeValueA@12:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T166568 = -36						; size = 8
$T166567 = -28						; size = 8
$T166566 = -20						; size = 8
_bSuccess$ = -12					; size = 4
_bOpenToken$ = -8					; size = 4
_this$ = -4						; size = 4
?EnableSetTimePriviledge@CSNTPClient@@IAEHXZ PROC NEAR	; CSNTPClient::EnableSetTimePriviledge
; _this$ = ecx

; 665  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 666  :   BOOL bOpenToken = OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | 
; 667  :                                      TOKEN_QUERY, &m_hToken);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	push	40					; 00000028H
	mov	edi, esp
	call	DWORD PTR __imp__GetCurrentProcess@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__OpenProcessToken@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bOpenToken$[ebp], eax

; 668  : 
; 669  :   m_bTakenPriviledge = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 670  :   if (!bOpenToken) 

	cmp	DWORD PTR _bOpenToken$[ebp], 0
	jne	SHORT $L165937

; 671  :   {
; 672  :     if (GetLastError() == ERROR_CALL_NOT_IMPLEMENTED) 

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 120				; 00000078H
	jne	SHORT $L165938

; 673  :     {
; 674  :       //Must be running on 95 or 98 not NT. In that case just ignore the error
; 675  :       SetLastError(ERROR_SUCCESS);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__SetLastError@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 676  :       return TRUE;

	mov	eax, 1
	jmp	$L165935
$L165938:

; 677  :     }
; 678  :     ATLTRACE(_T("Failed to get Adjust priviledge token\n"));

	push	OFFSET FLAT:$SG165941
	push	678					; 000002a6H
	push	OFFSET FLAT:$SG165940
	lea	ecx, DWORD PTR $T166566[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 8

; 679  :     return FALSE;

	xor	eax, eax
	jmp	$L165935
$L165937:

; 680  :   }
; 681  :   ZeroMemory(&m_TokenPriv, sizeof(TOKEN_PRIVILEGES));

	push	16					; 00000010H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 682  :   if (!LookupPrivilegeValue(NULL, SE_SYSTEMTIME_NAME, &m_TokenPriv.Privileges[0].Luid))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	push	OFFSET FLAT:$SG165944
	push	0
	call	DWORD PTR __imp__LookupPrivilegeValueA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $L165943

; 683  :   {
; 684  :     ATLTRACE(_T("Failed in callup to lookup priviledge\n"));

	push	OFFSET FLAT:$SG165947
	push	684					; 000002acH
	push	OFFSET FLAT:$SG165946
	lea	ecx, DWORD PTR $T166567[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 8

; 685  :     return FALSE;

	xor	eax, eax
	jmp	SHORT $L165935
$L165943:

; 686  :   }
; 687  :   m_TokenPriv.PrivilegeCount = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1

; 688  :   m_TokenPriv.Privileges[0].Attributes |= SE_PRIVILEGE_ENABLED;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	or	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 689  :   m_bTakenPriviledge = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 1

; 690  : 
; 691  :   BOOL bSuccess = AdjustTokenPrivileges(m_hToken, FALSE, &m_TokenPriv, 0, NULL, 0);

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__AdjustTokenPrivileges@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bSuccess$[ebp], eax

; 692  : 	if (!bSuccess)

	cmp	DWORD PTR _bSuccess$[ebp], 0
	jne	SHORT $L165949

; 693  : 	  ATLTRACE(_T("Failed to adjust SetTime priviledge\n"));

	push	OFFSET FLAT:$SG165952
	push	693					; 000002b5H
	push	OFFSET FLAT:$SG165951
	lea	ecx, DWORD PTR $T166568[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 8
$L165949:

; 694  : 
; 695  : 	return bSuccess;

	mov	eax, DWORD PTR _bSuccess$[ebp]
$L165935:

; 696  : }

	pop	edi
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?EnableSetTimePriviledge@CSNTPClient@@IAEHXZ ENDP	; CSNTPClient::EnableSetTimePriviledge
_TEXT	ENDS
PUBLIC	?RevertSetTimePriviledge@CSNTPClient@@IAEXXZ	; CSNTPClient::RevertSetTimePriviledge
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T166570 = -12						; size = 8
_this$ = -4						; size = 4
?RevertSetTimePriviledge@CSNTPClient@@IAEXXZ PROC NEAR	; CSNTPClient::RevertSetTimePriviledge
; _this$ = ecx

; 699  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 700  :   if (m_bTakenPriviledge) 

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $L165955

; 701  :   {
; 702  :     m_TokenPriv.Privileges[0].Attributes &= (~SE_PRIVILEGE_ENABLED);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], edx

; 703  :     if (!AdjustTokenPrivileges(m_hToken, FALSE, &m_TokenPriv, 0, NULL, 0))

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__AdjustTokenPrivileges@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $L165955

; 704  : 		  ATLTRACE(_T("Failed to reset SetTime priviledge\n"));

	push	OFFSET FLAT:$SG165960
	push	704					; 000002c0H
	push	OFFSET FLAT:$SG165959
	lea	ecx, DWORD PTR $T166570[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 8
$L165955:

; 705  :   }
; 706  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RevertSetTimePriviledge@CSNTPClient@@IAEXXZ ENDP	; CSNTPClient::RevertSetTimePriviledge
_TEXT	ENDS
PUBLIC	?SetClientTime@CSNTPClient@@QAEHABVCNtpTime@@@Z	; CSNTPClient::SetClientTime
EXTRN	__imp__SetSystemTime@4:NEAR
; Function compile flags: /Odt /RTCsu
_TEXT	SEGMENT
$T166573 = -56						; size = 8
$T166572 = -48						; size = 16
_st$165967 = -28					; size = 16
_bSuccess$ = -8						; size = 4
_this$ = -4						; size = 4
_NewTime$ = 8						; size = 4
?SetClientTime@CSNTPClient@@QAEHABVCNtpTime@@@Z PROC NEAR ; CSNTPClient::SetClientTime
; _this$ = ecx

; 709  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 710  :   BOOL bSuccess = FALSE;

	mov	DWORD PTR _bSuccess$[ebp], 0

; 711  :   if (EnableSetTimePriviledge())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnableSetTimePriviledge@CSNTPClient@@IAEHXZ ; CSNTPClient::EnableSetTimePriviledge
	test	eax, eax
	je	SHORT $L165966

; 712  :   {
; 713  :     SYSTEMTIME st = NewTime;

	lea	eax, DWORD PTR $T166572[ebp]
	push	eax
	mov	ecx, DWORD PTR _NewTime$[ebp]
	call	??BCNtpTime@@QBE?AU_SYSTEMTIME@@XZ	; CNtpTime::operator _SYSTEMTIME
	mov	ecx, DWORD PTR $T166572[ebp]
	mov	DWORD PTR _st$165967[ebp], ecx
	mov	edx, DWORD PTR $T166572[ebp+4]
	mov	DWORD PTR _st$165967[ebp+4], edx
	mov	eax, DWORD PTR $T166572[ebp+8]
	mov	DWORD PTR _st$165967[ebp+8], eax
	mov	ecx, DWORD PTR $T166572[ebp+12]
	mov	DWORD PTR _st$165967[ebp+12], ecx

; 714  :     bSuccess = SetSystemTime(&st);

	mov	esi, esp
	lea	edx, DWORD PTR _st$165967[ebp]
	push	edx
	call	DWORD PTR __imp__SetSystemTime@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _bSuccess$[ebp], eax

; 715  :     if (!bSuccess)

	cmp	DWORD PTR _bSuccess$[ebp], 0
	jne	SHORT $L165966

; 716  :       ATLTRACE(_T("Failed in call to set the system time\n"));

	push	OFFSET FLAT:$SG165973
	push	716					; 000002ccH
	push	OFFSET FLAT:$SG165972
	lea	ecx, DWORD PTR $T166573[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 8
$L165966:

; 717  :   }
; 718  :   RevertSetTimePriviledge();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RevertSetTimePriviledge@CSNTPClient@@IAEXXZ ; CSNTPClient::RevertSetTimePriviledge

; 719  : 
; 720  :   return bSuccess;

	mov	eax, DWORD PTR _bSuccess$[ebp]

; 721  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L166576
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L166576:
	DD	1
	DD	$L166575
$L166575:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$L166574
$L166574:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?SetClientTime@CSNTPClient@@QAEHABVCNtpTime@@@Z ENDP	; CSNTPClient::SetClientTime
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC NEAR	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 158  : 	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pszFileName$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nLineNo$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z		; ATL::CTrace::TraceV
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
EXTRN	?atlTraceGeneral@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceGeneral
; Function compile flags: /Odt /RTCsu
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_this$ = 8						; size = 4
_pszFmt$ = 12						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ PROC NEAR	; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 173  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 174  : 		va_list ptr; va_start(ptr, pszFmt);

	lea	eax, DWORD PTR _pszFmt$[ebp+4]
	mov	DWORD PTR _ptr$[ebp], eax

; 175  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, atlTraceGeneral, 0, pszFmt, ptr);

	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFmt$[ebp]
	push	edx
	push	0
	mov	ecx, OFFSET FLAT:?atlTraceGeneral@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceGeneral
	call	??BCTraceCategory@ATL@@QBEKXZ		; ATL::CTraceCategory::operator unsigned long
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET FLAT:?s_trace@CTrace@ATL@@2V12@A
	call	?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z	; ATL::CTrace::TraceV
	add	esp, 28					; 0000001cH

; 176  : 		va_end(ptr);

	mov	DWORD PTR _ptr$[ebp], 0

; 177  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVA:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z PROC NEAR		; ATL::CTrace::TraceV, COMDAT

; 121  : 	{

	push	ebp
	mov	ebp, esp

; 122  : 		AtlTraceVA(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwCategory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_AtlTraceVA
	add	esp, 28					; 0000001cH

; 123  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC NEAR			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	return( m_dwCategory );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 204  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
_TEXT	ENDS
PUBLIC	??0CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::CAtlWinModule
EXTRN	_atexit:NEAR
;	COMDAT CRT$XCU
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
CRT$XCU	SEGMENT
_$S3	DD	FLAT:_$E1
; Function compile flags: /Odt /RTCsu
CRT$XCU	ENDS
;	COMDAT _$E1
text$yc	SEGMENT
_$E1	PROC NEAR					; COMDAT

; 2602 : __declspec(selectany) CAtlWinModule _AtlWinModule;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
	call	??0CAtlWinModule@ATL@@QAE@XZ		; ATL::CAtlWinModule::CAtlWinModule
	push	OFFSET FLAT:_$E2
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E1	ENDP
text$yc	ENDS
PUBLIC	??0_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
EXTRN	?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z:NEAR ; ATL::AtlWinModuleInit
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
??0CAtlWinModule@ATL@@QAE@XZ PROC NEAR			; ATL::CAtlWinModule::CAtlWinModule, COMDAT
; _this$ = ecx

; 2573 : 	CAtlWinModule()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_ATL_WIN_MODULE70@ATL@@QAE@XZ

; 2574 : 	{
; 2575 : 		cbSize = sizeof(_ATL_WIN_MODULE);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 44			; 0000002cH

; 2576 : 		HRESULT hr = AtlWinModuleInit(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ; ATL::AtlWinModuleInit
	mov	DWORD PTR _hr$[ebp], eax

; 2577 : 		if (FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L88121

; 2578 : 			CAtlBaseModule::m_bInitFailed = true;

	mov	BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed
$L88121:

; 2579 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
PUBLIC	??0CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::CComCriticalSection
PUBLIC	??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC NEAR		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CComCriticalSection@ATL@@QAE@XZ	; ATL::CComCriticalSection::CComCriticalSection
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
_TEXT	ENDS
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CComCriticalSection@ATL@@QAE@XZ PROC NEAR		; ATL::CComCriticalSection::CComCriticalSection, COMDAT
; _this$ = ecx

; 114  : 	CComCriticalSection() throw()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	{
; 116  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::CComCriticalSection
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpcoll.h
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 97   : 	{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
PUBLIC	??1CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::~CAtlWinModule
; Function compile flags: /Odt /RTCsu
;	COMDAT _$E2
text$yd	SEGMENT
_$E2	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
	call	??1CAtlWinModule@ATL@@QAE@XZ		; ATL::CAtlWinModule::~CAtlWinModule
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E2	ENDP
text$yd	ENDS
PUBLIC	?Term@CAtlWinModule@ATL@@QAEXXZ			; ATL::CAtlWinModule::Term
PUBLIC	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
xdata$x	SEGMENT
$T166604 DD	0ffffffffH
	DD	FLAT:$L166600
$T166602 DD	019930520H
	DD	01H
	DD	FLAT:$T166604
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CAtlWinModule@ATL@@QAE@XZ PROC NEAR			; ATL::CAtlWinModule::~CAtlWinModule, COMDAT
; _this$ = ecx

; 2582 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CAtlWinModule@ATL@@QAE@XZ
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2583 : 		Term();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Term@CAtlWinModule@ATL@@QAEXXZ		; ATL::CAtlWinModule::Term

; 2584 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L166600:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
__ehhandler$??1CAtlWinModule@ATL@@QAE@XZ:
	mov	eax, OFFSET FLAT:$T166602
	jmp	___CxxFrameHandler
text$x	ENDS
??1CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::~CAtlWinModule
PUBLIC	?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
PUBLIC	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Term@CAtlWinModule@ATL@@QAEXXZ PROC NEAR		; ATL::CAtlWinModule::Term, COMDAT
; _this$ = ecx

; 2587 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2588 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	mov	ecx, OFFSET FLAT:?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A
	call	?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm

; 2589 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Term@CAtlWinModule@ATL@@QAEXXZ ENDP			; ATL::CAtlWinModule::Term
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ PROC NEAR ; ATL::CAtlBaseModule::GetModuleInstance, COMDAT
; _this$ = ecx

; 206  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		return m_hInst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 208  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ENDP ; ATL::CAtlBaseModule::GetModuleInstance
_TEXT	ENDS
PUBLIC	??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC NEAR		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
_TEXT	ENDS
PUBLIC	?Term@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Term
PUBLIC	?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
PUBLIC	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
PUBLIC	??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
EXTRN	__imp__UnregisterClassA@8:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_i$91551 = -4						; size = 4
_pWinModule$ = 8					; size = 4
_hInst$ = 12						; size = 4
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z PROC NEAR ; ATL::AtlWinModuleTerm, COMDAT

; 6215 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 6216 : 	if (pWinModule == NULL)

	cmp	DWORD PTR _pWinModule$[ebp], 0
	jne	SHORT $L91544

; 6217 : 		return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	$L91543
$L91544:

; 6218 : 	if (pWinModule->cbSize == 0)

	mov	eax, DWORD PTR _pWinModule$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L91546

; 6219 : 		return S_OK;

	xor	eax, eax
	jmp	SHORT $L91543
$L91546:

; 6220 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

	mov	ecx, DWORD PTR _pWinModule$[ebp]
	cmp	DWORD PTR [ecx], 44			; 0000002cH
	je	SHORT $L91549

; 6221 : 		return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $L91543
$L91549:

; 6222 : 
; 6223 : 	for (int i = 0; i < pWinModule->m_rgWindowClassAtoms.GetSize(); i++)

	mov	DWORD PTR _i$91551[ebp], 0
	jmp	SHORT $L91552
$L91553:
	mov	edx, DWORD PTR _i$91551[ebp]
	add	edx, 1
	mov	DWORD PTR _i$91551[ebp], edx
$L91552:
	mov	ecx, DWORD PTR _pWinModule$[ebp]
	add	ecx, 32					; 00000020H
	call	?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
	cmp	DWORD PTR _i$91551[ebp], eax
	jge	SHORT $L91554

; 6224 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

	mov	esi, esp
	mov	eax, DWORD PTR _hInst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$91551[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pWinModule$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
	movzx	edx, WORD PTR [eax]
	push	edx
	call	DWORD PTR __imp__UnregisterClassA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $L91553
$L91554:

; 6225 : 	pWinModule->m_rgWindowClassAtoms.RemoveAll();

	mov	ecx, DWORD PTR _pWinModule$[ebp]
	add	ecx, 32					; 00000020H
	call	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll

; 6226 : 	pWinModule->m_csWindowCreate.Term();

	mov	ecx, DWORD PTR _pWinModule$[ebp]
	add	ecx, 4
	call	?Term@CComCriticalSection@ATL@@QAEJXZ	; ATL::CComCriticalSection::Term

; 6227 : 	pWinModule->cbSize = 0;

	mov	eax, DWORD PTR _pWinModule$[ebp]
	mov	DWORD PTR [eax], 0

; 6228 : 	return S_OK;

	xor	eax, eax
$L91543:

; 6229 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ENDP ; ATL::AtlWinModuleTerm
_TEXT	ENDS
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Term@CComCriticalSection@ATL@@QAEJXZ PROC NEAR		; ATL::CComCriticalSection::Term, COMDAT
; _this$ = ecx

; 147  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		DeleteCriticalSection(&m_sec);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 149  : 		return S_OK;

	xor	eax, eax

; 150  : 	}	

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Term@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Term
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpcoll.h
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 100  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 		RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll

; 102  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize, COMDAT
; _this$ = ecx

; 135  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 136  : 		return m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 137  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
_TEXT	ENDS
EXTRN	_free:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_i$162915 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L162914

; 175  : 		{
; 176  : 			for(int i = 0; i < m_nSize; i++)

	mov	DWORD PTR _i$162915[ebp], 0
	jmp	SHORT $L162916
$L162917:
	mov	ecx, DWORD PTR _i$162915[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$162915[ebp], ecx
$L162916:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$162915[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $L162918

; 177  : 				m_aT[i].~T();

	jmp	SHORT $L162917
$L162918:

; 178  : 			free(m_aT);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_free
	add	esp, 4

; 179  : 			m_aT = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$L162914:

; 180  : 		}
; 181  : 		m_nSize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 182  : 		m_nAllocSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 183  : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
_TEXT	ENDS
PUBLIC	??_C@_0FE@GCCFFNOH@C?3?2Program?5Files?2Microsoft?5Visua@ ; `string'
PUBLIC	?_AtlRaiseException@ATL@@YAXKK@Z		; ATL::_AtlRaiseException
PUBLIC	??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
;	COMDAT ??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@
CONST	SEGMENT
??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ DB 'n'
	DB	'Index >= 0 && nIndex < m_nSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@GCCFFNOH@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT
??_C@_0FE@GCCFFNOH@C?3?2Program?5Files?2Microsoft?5Visua@ DB 'C:\Program '
	DB	'Files\Microsoft Visual Studio .NET 2003\Vc7\atlmfc\include\at'
	DB	'lsimpcoll.h', 00H				; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIndex$ = 8						; size = 4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 194  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 195  : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L166626
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L166627
$L166626:
	push	OFFSET FLAT:??_C@_0CA@CLKCNBMB@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@
	push	0
	push	195					; 000000c3H
	push	OFFSET FLAT:??_C@_0FE@GCCFFNOH@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L166627
	int	3
$L166627:

; 196  : 		if(nIndex < 0 || nIndex >= m_nSize)

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L162924
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L162923
$L162924:

; 197  : 		{
; 198  : 			_AtlRaiseException(EXCEPTION_ARRAY_BOUNDS_EXCEEDED);					

	push	1
	push	-1073741684				; c000008cH
	call	?_AtlRaiseException@ATL@@YAXKK@Z	; ATL::_AtlRaiseException
$L162923:

; 199  : 		}
; 200  : 		return m_aT[nIndex];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [eax+ecx*2]
$L166625:

; 201  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
_TEXT	ENDS
EXTRN	__imp__RaiseException@16:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT
_dwExceptionCode$ = 8					; size = 4
_dwExceptionFlags$ = 12					; size = 4
?_AtlRaiseException@ATL@@YAXKK@Z PROC NEAR		; ATL::_AtlRaiseException, COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 27   : 	RaiseException( dwExceptionCode, dwExceptionFlags, 0, NULL );

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _dwExceptionFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwExceptionCode$[ebp]
	push	ecx
	call	DWORD PTR __imp__RaiseException@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 28   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_AtlRaiseException@ATL@@YAXKK@Z ENDP			; ATL::_AtlRaiseException
_TEXT	ENDS
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 02cH DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
END
