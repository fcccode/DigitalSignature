; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\CRLCache.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0EJ@DPIMAKHN@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@DIDNGAPJ@s?5?$DN?$DN?50?5?$HM?$HM?5?$CIconst?5char?$CK?$CJ?5?$CKthis?5?$CB?$DN@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@PAOIECBF@s?5?$DN?$DN?50?5?$HM?$HM?5?$CIconst?5wchar_t?$CK?$CJ?5?$CKthis@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DD@NCNHACCB@s?5?$DN?$DN?50?5?$HM?$HM?5m_Data?5?$DN?$DN?50?5?$HM?$HM?5m_Data?9@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@LJMJHPFK@m_Data?5?$CB?$DN?50?5?$CG?$CG?5m_Data?9?$DORefCount?$CI@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FG@GKIPNLEE@?$CI?$CIthis?$CJ?9?$DOvt?$CJ?5?$CB?$DN?5VT_BSTR?5?$HM?$HM?5?$CIBSTR@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EC@EDNDDDBI@?$CI?$CIthis?$CJ?9?$DOvt?$CJ?5?$CB?$DN?5VT_BSTR?5?$HM?$HM?5pSrc?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EL@EEEMIENH@?$CI?$CIthis?$CJ?9?$DOvt?$CJ?5?$CB?$DN?5?$CIVT_I1?5?$HM?5VT_BYRE@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EH@IHHPLLAD@?$CI?$CIthis?$CJ?9?$DOvt?$CJ?5?$CB?$DN?5VT_DISPATCH?5?$HM?$HM?5p@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EF@LJOMBHMP@?$CI?$CIthis?$CJ?9?$DOvt?$CJ?5?$CB?$DN?5VT_UNKNOWN?5?$HM?$HM?5pS@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_17CGPNFONA@?$AA?7?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_19ELGCFCMM@?$AA?$AD?$AA?7?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BC@CBBHPGMH@?$EA?$AI?$EA?$AD?$EA?$AD?$EA?$AD?$EA?$AD?$AA?7?$AA?7?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1O@LPGBCEBP@?$AA?$AD?$AA?7?$EA?$AD?$AA?7?$AA?7?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1O@NEHKDCLA@?$EA?$AI?$EA?$AI?$EA?$AI?$EA?$AD?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_15ONFCDLDB@?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_19DICFMKI@?$AA?$AD?$AA?$AM?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@FFKIHFKI@?$AA?$AD?$AA?$AM?$AA?7?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_19NKKCEOAE@?$AA?$AD?$AA?$AD?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1M@KEKDCOCF@?$AA?$AD?$AA?$AD?$AA?7?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_17LHDNECBI@?$AA?$AD?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_17CANDCMNE@?$EA?$AL?$EA?$AD?$AA?7?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@HFEEKIIE@mbstr?5?$DN?$DN?50?5?$HM?$HM?5result?5?$DM?$DN?5?$CIint?$CJcou@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FB@DNILBHEN@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@JADEDFCN@wcstr?5?$DN?$DN?50?5?$HM?$HM?5result?5?$DM?$DN?5?$CIint?$CJcou@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@DFFCODPF@m_pData?9?$DOnRefs?5?$DN?$DN?5?91?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@KFNMPDFA@m_pData?9?$DOnDataLength?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@JINHKJCC@pData?9?$DOnRefs?5?$DM?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BB@HNGMIMJM@pData?9?$DOnRefs?5?$DM?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FB@EIPLHBJE@CFixedStringMgr?3?3Allocate?$CI?$CJ?5spil@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FD@PINPFILO@CFixedStringMgr?3?3Reallocate?$CI?$CJ?5sp@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MDHCGOCC@m_pMemMgr?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EP@ENACCIMA@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@KICONMKH@pData?9?$DOpStringMgr?5?$DN?$DN?5this?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@HPMMCKHL@?$CI?$CIWORD?$CJ?$CI?$CIDWORD_PTR?$CJ?$CIpsz?$CJ?5?$DO?$DO?516?$CJ?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BDLMIBLB@pFormat?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FA@JGFACAOB@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05LLAMLEHD@?$CFI64d?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05KCADNOJC@?$CF02ld?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CB@FKADHJGH@strFormat?4LoadStringA?$CInFormatID?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BO@OBIGOAOM@AtlIsValidString?$CI?5pszFormat?5?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GOIMFHNK@pStringMgr?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FJEKGMMD@Warning?3?5implicit?5LoadString?$CI?$CFu?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GNIEOBOF@nNewLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??H_bstr_t@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B_bstr_t@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??7_bstr_t@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@_bstr_t@@QAEXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Compare@_bstr_t@@ABEHABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RefCount@Data_t@_bstr_t@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QAEAAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@Data_t@_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@Data_t@_bstr_t@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2Data_t@_bstr_t@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@AAUtagVARIANT@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@JG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@ABV_bstr_t@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4_variant_t@@QAEAAV0@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8_variant_t@@QBE_NPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@_variant_t@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV_variant_t@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_com_error@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_com_error@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Error@_com_error@@QBEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Description@_com_error@@QBE?AV_bstr_t@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Source@_com_error@@QBE?AV_bstr_t@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ErrorMessage@_com_error@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_com_error@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValue@Field20@@QAE?AV_variant_t@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItem@Fields15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@ABV_variant_t@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@Connection15@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@Connection15@@QAEJV_bstr_t@@00J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PutRefActiveConnection@Recordset15@@QAEXPAUIDispatch@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetadoEOF@Recordset15@@QAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFields@Recordset15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRecordCount@Recordset15@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@Recordset15@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Delete@Recordset15@@QAEJW4AffectEnum@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MoveNext@Recordset15@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@Recordset15@@QAEJABV_variant_t@@0W4CursorTypeEnum@@W4LockTypeEnum@@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceill
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10l
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modfl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhl
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _frexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ldexpf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _acosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _atan2f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _ceilf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _coshf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _expf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fabsf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _floorf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _fmodf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _log10f
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _modff
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _powf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sinhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _tanhf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEnvironmentVariableWFake@ATL@@YGKPBGPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEnvironmentVariableWThunk@ATL@@YGKPBGPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CompareStringWFake@ATL@@YGHKKPBGH0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CompareStringWThunk@ATL@@YGHKKPBGH0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringTypeExWFake@ATL@@YGHKKPBGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringTypeExWThunk@ATL@@YGHKKPBGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lstrcmpiWFake@ATL@@YGHPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lstrcmpiWThunk@ATL@@YGHPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharLowerWFake@ATL@@YGPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharLowerWThunk@ATL@@YGPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharUpperWFake@ATL@@YGPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharUpperWThunk@ATL@@YGPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEnvironmentVariableW@?$ChTraitsCRT@G@ATL@@CGKPBGPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindString@?$ChTraitsCRT@G@ATL@@SAPBGPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFixedStringMgr@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CFixedStringMgr@ATL@@UAEPAUCStringData@2@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CFixedStringMgr@ATL@@UAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@CFixedStringMgr@ATL@@UAEPAUCStringData@2@PAU32@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNilString@CFixedStringMgr@ATL@@UAEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CFixedStringMgr@ATL@@UAEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFixedStringMgr@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CFixedStringLog@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnAllocateSpill@CFixedStringLog@ATL@@UAEXHHPBUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnReallocateSpill@CFixedStringLog@ATL@@UAEXHHPBUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCFixedStringLog@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IFixedStringLog@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAtlStringMgr@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CAtlStringMgr@ATL@@UAEPAUCStringData@2@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CAtlStringMgr@ATL@@UAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@CAtlStringMgr@ATL@@UAEPAUCStringData@2@PAU32@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNilString@CAtlStringMgr@ATL@@UAEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@CAtlStringMgr@ATL@@UAEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCAtlStringMgr@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CompareStringW@?$ChTraitsOS@G@ATL@@KGHKKPBGH0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStringTypeExW@?$ChTraitsOS@G@ATL@@KGHKKPBGHPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lstrcmpiW@?$ChTraitsOS@G@ATL@@KGHPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharLowerW@?$ChTraitsOS@G@ATL@@KGPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharUpperW@?$ChTraitsOS@G@ATL@@KGPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strchr@?$ChTraitsOS@G@ATL@@SAPBGPBGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strrchr@?$ChTraitsOS@G@ATL@@SAPBGPBGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_strrev@?$ChTraitsOS@G@ATL@@SAPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strstr@?$ChTraitsOS@G@ATL@@SAPBGPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strspn@?$ChTraitsOS@G@ATL@@SAHPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strcspn@?$ChTraitsOS@G@ATL@@SAHPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strpbrk@?$ChTraitsOS@G@ATL@@SAPBGPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindString@?$ChTraitsOS@G@ATL@@SAPBGPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@CTimeSpan@ATL@@QBE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@2@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@CTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@2@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatGmt@CTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@2@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E4
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E5
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT _$E7
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E8
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT _$E10
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E11
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??B?$CComPtrBase@UITypeInfo2@@@ATL@@QBEPAUITypeInfo2@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Preallocate@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObject@VCAxFrameWindow@ATL@@@ATL@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObject@VCAxUIWindow@ATL@@@ATL@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$_CopyInterface@UIUnknown@@@ATL@@SAJPAPAUIUnknown@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?init@?$_CopyInterface@UIUnknown@@@ATL@@SAXPAPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$_CopyInterface@UIUnknown@@@ATL@@SAXPAPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIUnknown@@$1?_GUID_00000000_0000_0000_c000_000000000046@@3U__s_GUID@@B@@@@QAE@PAUIUnknown@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIUnknown@@$1?_GUID_00000000_0000_0000_c000_000000000046@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UProperty@@$1?_GUID_00000503_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUProperty@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UProperty@@$1?_GUID_00000503_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UProperties@@$1?_GUID_00000504_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUProperties@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UProperties@@$1?_GUID_00000504_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UError@@$1?_GUID_00000500_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUError@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UError@@$1?_GUID_00000500_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUField@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUField@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@U_Parameter@@$1?_GUID_0000050c_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAU_Parameter@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@U_Parameter@@$1?_GUID_0000050c_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAU_Connection@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAU_Recordset@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UParameters@@$1?_GUID_0000050d_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUParameters@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UParameters@@$1?_GUID_0000050d_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UErrors@@$1?_GUID_00000501_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUErrors@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UErrors@@$1?_GUID_00000501_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUFields@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUFields@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@@@@QAE@PAUIDispatch@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendFormat@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIUnknown@@$1?_GUID_00000000_0000_0000_c000_000000000046@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIUnknown@@$1?_GUID_00000000_0000_0000_c000_000000000046@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UProperty@@$1?_GUID_00000503_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UProperty@@$1?_GUID_00000503_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UProperties@@$1?_GUID_00000504_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UProperties@@$1?_GUID_00000504_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UError@@$1?_GUID_00000500_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UError@@$1?_GUID_00000500_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@U_Parameter@@$1?_GUID_0000050c_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@U_Parameter@@$1?_GUID_0000050c_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UParameters@@$1?_GUID_0000050d_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UParameters@@$1?_GUID_0000050d_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UErrors@@$1?_GUID_00000501_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UErrors@@$1?_GUID_00000501_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UIDispatch@@$1?_GUID_00020400_0000_0000_c000_000000000046@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPBGI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendFormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendChar@?$CSimpleStringT@D$0A@@ATL@@QAEXD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateInstance@?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@SGJPAPAV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@N@@YANNH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@H@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@O@@YAOOH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$AtlAlignUp@H@ATL@@YGHHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalFinalConstructRelease@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@JELNCKOF@m_dwRef?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EP@FBJOMLAB@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_AtlFinalConstruct@CComObjectRootBase@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalConstruct@CComObjectRootBase@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalFinalConstructAddRef@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetVoid@CComObjectRootBase@ATL@@QAEXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IEnumUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComObjectRootBase@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_InternalQueryInterface@?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@QAEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalQueryInterface@CComObjectRootBase@ATL@@SGJPAXPBU_ATL_INTMAP_ENTRY@2@ABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0P@BMHEGBAP@ppvObject?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@DBHNDLKF@pThis?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DC@BBKMJDPM@pEntries?9?$DOpFunc?5?$DN?$DN?5?$CI?$CIATL?3?3_ATL_C@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_GetEntries@?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09BEHAHIFA@_CComEnum?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000100_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_entries@?1??_GetEntries@?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalAddRef@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0P@IDNKKMJE@m_dwRef?5?$CB?$DN?5?91L?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Increment@CComSingleThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalRelease@?$CComObjectRootEx@VCComSingleThreadModel@ATL@@@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComSingleThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0EC@FOHBGNDM@0?5?$CG?$CG?5?$CCRelease?5called?5on?5a?5pointe@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Next@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAGJKPAPAUIUnknown@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Skip@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAGJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clone@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@UAGJPAPAUIEnumUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$CComEnumImpl@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@@ATL@@QAEJPAPAUIUnknown@@0PAU3@W4CComEnumFlags@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIUnknown@@@ATL@@QAEPAUIUnknown@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtrBase@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIUnknown@@@ATL@@IAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComObject@V?$CComEnum@UIEnumUnknown@@$1?_GUID_00000100_0000_0000_c000_000000000046@@3U__s_GUID@@BPAUIUnknown@@V?$_CopyInterface@UIUnknown@@@ATL@@VCComSingleThreadModel@6@@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalRelease@CComObjectRootBase@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FA@KBNNCCJL@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09HIEJFN@m_bLocked?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0N@ILOMLJGA@nLength?5?$DO?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEFFJEGJ@nLength?5?$DM?$DN?5GetData?$CI?$CJ?9?$DOnAllocLeng@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@OIIMFBNE@nRefs?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FD@MKDEOELP@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlIsValidString@ATL@@YAHPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CComObject@VCAxUIWindow@ATL@@@ATL@@6BIOleInPlaceUIWindow@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_InternalQueryInterface@CAxUIWindow@ATL@@QAEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEntries@CAxUIWindow@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0M@EHKCMBND@CAxUIWindow?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000115_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000114_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_entries@?1??_GetEntries@CAxUIWindow@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindow@CAxUIWindow@ATL@@UAGJPAPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEPAUHWND__@@PAU3@V_U_RECT@2@PBDKKV_U_MENUorID@2@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndClassName@CWindow@ATL@@SAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Register@_ATL_WNDCLASSINFOA@ATL@@QAEGPAP6GJPAUHWND__@@IIJ@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _$E2
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
;	COMDAT ?GetWndClassInfo@?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAAAU_ATL_WNDCLASSINFOA@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StartWindowProc@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExtractCreateWndData@CAtlWinModule@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CWndProcThunk@ATL@@QAEXP6GJPAUHWND__@@IIJ@ZPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CDynamicStdCallThunk@ATL@@QAEXKPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_06CIAHICCP@pThunk?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Init@_stdcallthunk@ATL@@QAEXKPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWNDPROC@CWndProcThunk@ATL@@QAEP6GJPAUHWND__@@IIJ@ZXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCodeAddress@CDynamicStdCallThunk@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCodeAddress@_stdcallthunk@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindowLongPtrA@@YAJPAUHWND__@@HJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?wc@?1??GetWndClassInfo@?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAAAU_ATL_WNDCLASSINFOA@3@XZ@4U43@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GetWndStyle@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndStyle@?$CWinTraits@$0FGAAAAAA@$0A@@ATL@@SAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndExStyle@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndExStyle@?$CWinTraits@$0FGAAAAAA@$0A@@ATL@@SAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndCaption@?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEPAUHWND__@@PAU3@V_U_RECT@2@PBDKKV_U_MENUorID@2@GPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCreateWndData@CAtlWinModule@ATL@@QAEXPAU_AtlCreateWndData@2@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rcDefault@CWindow@ATL@@2UtagRECT@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0_U_MENUorID@ATL@@QAE@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@FJBCDDKK@AXWIN?5UI?5Window?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0_U_RECT@ATL@@QAE@PAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ContextSensitiveHelp@CAxUIWindow@ATL@@UAGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBorder@CAxUIWindow@ATL@@UAGJPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RequestBorderSpace@CAxUIWindow@ATL@@UAGJPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorderSpace@CAxUIWindow@ATL@@UAGJPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetActiveObject@CAxUIWindow@ATL@@UAGJPAUIOleInPlaceActiveObject@@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIOleInPlaceActiveObject@@@ATL@@QAEPAUIOleInPlaceActiveObject@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CComObject@VCAxUIWindow@ATL@@@ATL@@6B?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ProcessWindowMessage@CAxUIWindow@ATL@@UAEHPAUHWND__@@IIJAAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComObject@VCAxUIWindow@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalRelease@CAxUIWindow@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComPtrBase@UIOleInPlaceActiveObject@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DestroyWindow@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OAFOKPBM@?3?3IsWindow?$CIm_hWnd?$CJ?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0EP@FECMNBMC@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetWindowProc@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAEP6GJPAUHWND__@@IIJ@ZXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WindowProc@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_ATL_MSG@ATL@@QAE@PAUHWND__@@IIJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DefWindowProcA@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEJIIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindowLongPtrA@@YAJPAUHWND__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnFinalMessage@?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAEXPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAxUIWindow@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CWindowImplRoot@VCWindow@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CWndProcThunk@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CDynamicStdCallThunk@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0DE@JJEOCICO@ERROR?5?9?5Object?5deleted?5before?5wi@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1?$CComPtr@UIOleInPlaceActiveObject@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtrBase@UIOleInPlaceActiveObject@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAxUIWindow@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CWindowImpl@VCAxUIWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CWindowImplBaseT@VCWindow@ATL@@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CWindowImplRoot@VCWindow@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWindow@ATL@@QAE@PAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMessageMap@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CWndProcThunk@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CDynamicStdCallThunk@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IOleInPlaceUIWindow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IOleWindow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIOleInPlaceActiveObject@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtrBase@UIOleInPlaceActiveObject@@@ATL@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7?$CComObject@VCAxFrameWindow@ATL@@@ATL@@6BIOleInPlaceFrame@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_InternalQueryInterface@CAxFrameWindow@ATL@@QAEJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_GetEntries@CAxFrameWindow@ATL@@SGPBU_ATL_INTMAP_ENTRY@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0P@MFMDEJMN@CAxFrameWindow?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000116_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_entries@?1??_GetEntries@CAxFrameWindow@ATL@@SGPBU_ATL_INTMAP_ENTRY@3@XZ@4QBU43@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWindow@CAxFrameWindow@ATL@@UAGJPAPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0L@JIHHHPOK@phwnd?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FA@NHACCMFP@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Create@?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAEPAUHWND__@@PAU3@V_U_RECT@2@PBDKKV_U_MENUorID@2@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWndClassInfo@?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAAAU_ATL_WNDCLASSINFOA@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?wc@?1??GetWndClassInfo@?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAAAU_ATL_WNDCLASSINFOA@3@XZ@4U43@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GetWndCaption@?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@SAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@LIOMMJMF@AXWIN?5Frame?5Window?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ContextSensitiveHelp@CAxFrameWindow@ATL@@UAGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBorder@CAxFrameWindow@ATL@@UAGJPAUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RequestBorderSpace@CAxFrameWindow@ATL@@UAGJPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBorderSpace@CAxFrameWindow@ATL@@UAGJPBUtagRECT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetActiveObject@CAxFrameWindow@ATL@@UAGJPAUIOleInPlaceActiveObject@@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertMenus@CAxFrameWindow@ATL@@UAGJPAUHMENU__@@PAUtagOleMenuGroupWidths@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMenu@CAxFrameWindow@ATL@@UAGJPAUHMENU__@@PAXPAUHWND__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveMenus@CAxFrameWindow@ATL@@UAGJPAUHMENU__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStatusText@CAxFrameWindow@ATL@@UAGJPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EnableModeless@CAxFrameWindow@ATL@@UAGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TranslateAcceleratorA@CAxFrameWindow@ATL@@UAGJPAUtagMSG@@G@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CComObject@VCAxFrameWindow@ATL@@@ATL@@6B?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@1@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ProcessWindowMessage@CAxFrameWindow@ATL@@UAEHPAUHWND__@@IIJAAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComObject@VCAxFrameWindow@ATL@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FinalRelease@CAxFrameWindow@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAxFrameWindow@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAxFrameWindow@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CWindowImpl@VCAxFrameWindow@ATL@@VCWindow@2@V?$CWinTraits@$0FGAAAAAA@$0A@@2@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IOleInPlaceFrame@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0CB@GFHAPKDK@pOldData?9?$DOnAllocLength?5?$DM?5nLength@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000535_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0?AV_com_error@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000514_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szInvalidDateTimeSpan@ATL@@3QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szInvalidDateTime@ATL@@3QBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Week@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Day@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Hour@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Minute@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Second@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Millisecond@CFileTime@ATL@@2_KB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@GV?$StrTraitATL@GV?$ChTraitsCRT@G@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09BBJEMDLA@nRet?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09EEBKLCFA@nRefs?5?$DO?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?SetManager@CNilStringData@ATL@@QAEXPAUIAtlStringMgr@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BA@MLJMCNFJ@pStringMgr?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CNilStringData@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CAtlStringMgr@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7IFixedStringLog@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CFixedStringLog@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CFixedStringMgr@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0FC@CFIFHLCH@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_strthunks@ATL@@3U_AtlStringThunks@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0FB@IAFJMJBP@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_00000562_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000403_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000402_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000556_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000555_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000054f_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000050e_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000550_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000515_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_b08400bd_f9d1_4d02_b856_71d5dba123e9
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000054e_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000508_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000505_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000283_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000517_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000568_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000567_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000565_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000516_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000050d_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000050c_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000564_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000054d_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000506_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000569_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_0000054c_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000501_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000500_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000534_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000504_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000503_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000513_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000512_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __GUID_00000000_0000_0000_0000_000000000000
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7_com_error@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCU
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A ; ATL::CFixedStringMgr::s_pLog
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@GV?$StrTraitATL@GV?$ChTraitsCRT@G@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<unsigned short,ATL::StrTraitATL<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::c_bIsMFCDLLTraits
PUBLIC	?_strthunks@ATL@@3U_AtlStringThunks@1@A		; ATL::_strthunks
PUBLIC	?GetEnvironmentVariableWThunk@ATL@@YGKPBGPAGK@Z	; ATL::GetEnvironmentVariableWThunk
PUBLIC	?CompareStringWThunk@ATL@@YGHKKPBGH0H@Z		; ATL::CompareStringWThunk
PUBLIC	?GetStringTypeExWThunk@ATL@@YGHKKPBGHPAG@Z	; ATL::GetStringTypeExWThunk
PUBLIC	?lstrcmpiWThunk@ATL@@YGHPBG0@Z			; ATL::lstrcmpiWThunk
PUBLIC	?CharLowerWThunk@ATL@@YGPAGPAG@Z		; ATL::CharLowerWThunk
PUBLIC	?CharUpperWThunk@ATL@@YGPAGPAG@Z		; ATL::CharUpperWThunk
PUBLIC	?rcDefault@CWindow@ATL@@2UtagRECT@@A		; ATL::CWindow::rcDefault
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
PUBLIC	?Millisecond@CFileTime@ATL@@2_KB		; ATL::CFileTime::Millisecond
PUBLIC	?Second@CFileTime@ATL@@2_KB			; ATL::CFileTime::Second
PUBLIC	?Minute@CFileTime@ATL@@2_KB			; ATL::CFileTime::Minute
PUBLIC	?Hour@CFileTime@ATL@@2_KB			; ATL::CFileTime::Hour
PUBLIC	?Day@CFileTime@ATL@@2_KB			; ATL::CFileTime::Day
PUBLIC	?Week@CFileTime@ATL@@2_KB			; ATL::CFileTime::Week
PUBLIC	?szInvalidDateTime@ATL@@3QBDB			; ATL::szInvalidDateTime
PUBLIC	?szInvalidDateTimeSpan@ATL@@3QBDB		; ATL::szInvalidDateTimeSpan
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A
_BSS	SEGMENT
?s_pLog@CFixedStringMgr@ATL@@2PAVIFixedStringLog@2@A DD 01H DUP (?) ; ATL::CFixedStringMgr::s_pLog
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_strthunks@ATL@@3U_AtlStringThunks@1@A
_DATA	SEGMENT
?_strthunks@ATL@@3U_AtlStringThunks@1@A DD FLAT:?CompareStringWThunk@ATL@@YGHKKPBGH0H@Z ; ATL::_strthunks
	DD	FLAT:?GetStringTypeExWThunk@ATL@@YGHKKPBGHPAG@Z
	DD	FLAT:?lstrcmpiWThunk@ATL@@YGHPBG0@Z
	DD	FLAT:?CharLowerWThunk@ATL@@YGPAGPAG@Z
	DD	FLAT:?CharUpperWThunk@ATL@@YGPAGPAG@Z
	DD	FLAT:?GetEnvironmentVariableWThunk@ATL@@YGKPBGPAGK@Z
_DATA	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB DB 00H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@GV?$StrTraitATL@GV?$ChTraitsCRT@G@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB
CONST	SEGMENT
?c_bIsMFCDLLTraits@?$_MFCDLLTraitsCheck@GV?$StrTraitATL@GV?$ChTraitsCRT@G@ATL@@@ATL@@@_CSTRING_IMPL_@ATL@@2_NB DB 00H ; ATL::_CSTRING_IMPL_::_MFCDLLTraitsCheck<unsigned short,ATL::StrTraitATL<unsigned short,ATL::ChTraitsCRT<unsigned short> > >::c_bIsMFCDLLTraits
CONST	ENDS
;	COMDAT ?Millisecond@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Millisecond@CFileTime@ATL@@2_KB DQ 0000000000002710H	; ATL::CFileTime::Millisecond
CONST	ENDS
;	COMDAT ?Second@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Second@CFileTime@ATL@@2_KB DQ 0000000000989680H	; ATL::CFileTime::Second
CONST	ENDS
;	COMDAT ?Minute@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Minute@CFileTime@ATL@@2_KB DQ 0000000023c34600H	; ATL::CFileTime::Minute
CONST	ENDS
;	COMDAT ?Hour@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Hour@CFileTime@ATL@@2_KB DQ 0000000861c46800H		; ATL::CFileTime::Hour
CONST	ENDS
;	COMDAT ?Day@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Day@CFileTime@ATL@@2_KB DQ 000000c92a69c000H		; ATL::CFileTime::Day
CONST	ENDS
;	COMDAT ?Week@CFileTime@ATL@@2_KB
CONST	SEGMENT
?Week@CFileTime@ATL@@2_KB DQ 0000058028e44000H		; ATL::CFileTime::Week
CONST	ENDS
CONST	SEGMENT
$SG182241 DB	'Invalid DateTime', 00H
CONST	ENDS
;	COMDAT ?szInvalidDateTime@ATL@@3QBDB
CONST	SEGMENT
?szInvalidDateTime@ATL@@3QBDB DD FLAT:$SG182241		; ATL::szInvalidDateTime
CONST	ENDS
CONST	SEGMENT
	ORG $+3
$SG182243 DB	'Invalid DateTimeSpan', 00H
CONST	ENDS
;	COMDAT ?szInvalidDateTimeSpan@ATL@@3QBDB
CONST	SEGMENT
?szInvalidDateTimeSpan@ATL@@3QBDB DD FLAT:$SG182243	; ATL::szInvalidDateTimeSpan
CONST	ENDS
CONST	SEGMENT
	ORG $+7
$SG182546 DB	'SELECT CRLData, FetchTime FROM CRLCache Where Certificat'
	DB	'eIssuer = ', 00H
	ORG $+1
$SG182553 DB	'Insert Into CRLCache (CertificateIssuer, CRLData) Values'
	DB	' ', 00H
	ORG $+2
$SG182560 DB	'Delete From CRLCache Where ', 00H
$SG182587 DB	00H
$SG182588 DB	00H
$SG182589 DB	00H
	ORG $+1
$SG182608 DB	' Error: ', 00H
	ORG $+3
$SG182609 DB	' Msg: ', 00H
	ORG $+1
$SG182610 DB	' Description: ', 00H
	ORG $+1
$SG182636 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182637 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182646 DB	'''', 00H
	ORG $+2
$SG182647 DB	'''', 00H
$SG182657 DB	00H
$SG182658 DB	00H
$SG182659 DB	00H
	ORG $+3
$SG182668 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182669 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182694 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182695 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182698 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182699 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182705 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182706 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182720 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182721 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182724 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182725 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182748 DB	' Error: ', 00H
	ORG $+3
$SG182749 DB	' Msg: ', 00H
	ORG $+1
$SG182750 DB	' Description: ', 00H
	ORG $+1
$SG182754 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182755 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182756 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182757 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182759 DB	'CRLCache::FetchCRLFromCRLCache', 00H
	ORG $+1
$SG182760 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182778 DB	'CRLCache::EnterCRLIntoCRLCache', 00H
	ORG $+1
$SG182779 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182783 DB	'CRLCache::EnterCRLIntoCRLCache', 00H
	ORG $+1
$SG182784 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182798 DB	'(''', 00H
	ORG $+1
$SG182799 DB	''',''', 00H
$SG182800 DB	''')', 00H
	ORG $+1
$SG182801 DB	'CRLCache::EnterCRLIntoCRLCache', 00H
	ORG $+1
$SG182802 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182803 DB	'CRLCache::EnterCRLIntoCRLCache', 00H
	ORG $+1
$SG182804 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182805 DB	'CRLCache::EnterCRLIntoCRLCache', 00H
	ORG $+1
$SG182806 DB	'.\CRLCache.cpp', 00H
$SG182815 DB	00H
$SG182816 DB	00H
$SG182817 DB	00H
	ORG $+2
$SG182837 DB	' Error: ', 00H
	ORG $+3
$SG182838 DB	' Msg: ', 00H
	ORG $+1
$SG182839 DB	' Description: ', 00H
	ORG $+1
$SG182858 DB	'CRLCache::DeleteCRLFromCRLCache', 00H
$SG182859 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182868 DB	'CertificateIssuer = ''', 00H
	ORG $+2
$SG182869 DB	'''', 00H
	ORG $+2
$SG182870 DB	'CRLCache::DeleteCRLFromCRLCache', 00H
$SG182871 DB	'.\CRLCache.cpp', 00H
	ORG $+1
$SG182872 DB	'CRLCache::DeleteCRLFromCRLCache', 00H
$SG182873 DB	'.\CRLCache.cpp', 00H
$SG182883 DB	00H
$SG182884 DB	00H
$SG182885 DB	00H
	ORG $+2
$SG182905 DB	' Error: ', 00H
	ORG $+3
$SG182906 DB	' Msg: ', 00H
	ORG $+1
$SG182907 DB	' Description: ', 00H
	ORG $+1
$SG183251 DB	'pp != 0', 00H
	ORG $+4
$SG183252 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlcom.h', 00H
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
;	COMDAT ?rcDefault@CWindow@ATL@@2UtagRECT@@A
_DATA	SEGMENT
?rcDefault@CWindow@ATL@@2UtagRECT@@A DD 080000000H	; ATL::CWindow::rcDefault
	DD	080000000H
	DD	00H
	DD	00H
_DATA	ENDS
CONST	SEGMENT
	ORG $+1
$SG160733 DB	'pThis != 0', 00H
	ORG $+5
$SG160734 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG160741 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG160742 DB	'Subclassing through a hook discarded.', 0aH, 00H
	ORG $+1
$SG160758 DB	'pThis->m_pCurrentMsg == &msg', 00H
	ORG $+3
$SG160759 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG160782 DB	'm_hWnd == 0', 00H
	ORG $+4
$SG160783 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG160794 DB	'm_hWnd == hWnd', 00H
	ORG $+1
$SG160795 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlwin.h', 00H
	ORG $+1
$SG161005 DB	'm_begin == 0', 00H
	ORG $+3
$SG161006 DB	'C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\a'
	DB	'tlmfc\include\atlcom.h', 00H
CONST	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
EXTRN	__imp__GetVersionExA@4:NEAR
EXTRN	__RTC_InitBase:NEAR
EXTRN	__RTC_Shutdown:NEAR
EXTRN	__RTC_CheckEsp:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@_RTC_CheckStackVars@8:NEAR
EXTRN	@__security_check_cookie@4:NEAR
;	COMDAT rtc$IMZ
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
; Function compile flags: /Odt /RTCsu
rtc$TMZ	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_pfnGetThreadACP$ = -164				; size = 4
_ver$ = -156						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-164]
	mov	ecx, 41					; 00000029H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );

	mov	DWORD PTR _ver$[ebp], 148		; 00000094H

; 139  : 	::GetVersionEx( &ver );

	mov	esi, esp
	lea	eax, DWORD PTR _ver$[ebp]
	push	eax
	call	DWORD PTR __imp__GetVersionExA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

	cmp	DWORD PTR _ver$[ebp+16], 2
	jne	SHORT $L75782
	cmp	DWORD PTR _ver$[ebp+4], 5
	jb	SHORT $L75782

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal

; 144  : 	}
; 145  : 	else

	jmp	SHORT $L75783
$L75782:

; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

	mov	DWORD PTR _pfnGetThreadACP$[ebp], OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L75783:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

	mov	ecx, DWORD PTR _pfnGetThreadACP$[ebp]
	push	ecx
	push	OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	call	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184045
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	add	esp, 164				; 000000a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L184045:
	DD	1
	DD	$L184044
$L184044:
	DD	-156					; ffffff64H
	DD	148					; 00000094H
	DD	$L184041
$L184041:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

	mov	esi, esp
	mov	eax, DWORD PTR _pNew$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pp$[ebp]
	push	ecx
	call	DWORD PTR __imp__InterlockedExchange@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_pch$75770 = -32					; size = 4
_szACP$ = -24						; size = 7
_lcidThread$ = -12					; size = 4
_nACP$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 102  : 	UINT nACP = 0;

	mov	DWORD PTR _nACP$[ebp], 0

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

	mov	esi, esp
	call	DWORD PTR __imp__GetThreadLocale@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lcidThread$[ebp], eax

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

	mov	esi, esp
	push	7
	lea	eax, DWORD PTR _szACP$[ebp]
	push	eax
	push	4100					; 00001004H
	mov	ecx, DWORD PTR _lcidThread$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $L75769

; 111  : 	{
; 112  : 		char* pch = szACP;

	lea	edx, DWORD PTR _szACP$[ebp]
	mov	DWORD PTR _pch$75770[ebp], edx
$L75772:

; 113  : 		while (*pch != '\0')

	mov	eax, DWORD PTR _pch$75770[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $L75769

; 114  : 		{
; 115  : 			nACP *= 10;

	mov	edx, DWORD PTR _nACP$[ebp]
	imul	edx, 10					; 0000000aH
	mov	DWORD PTR _nACP$[ebp], edx

; 116  : 			nACP += *pch++ - '0';

	mov	eax, DWORD PTR _pch$75770[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _nACP$[ebp]
	lea	eax, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _nACP$[ebp], eax
	mov	ecx, DWORD PTR _pch$75770[ebp]
	add	ecx, 1
	mov	DWORD PTR _pch$75770[ebp], ecx

; 117  : 		}

	jmp	SHORT $L75772
$L75769:

; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

	cmp	DWORD PTR _nACP$[ebp], 0
	jne	SHORT $L75774

; 121  : 		nACP = ::GetACP();

	mov	esi, esp
	call	DWORD PTR __imp__GetACP@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nACP$[ebp], eax
$L75774:

; 122  : 
; 123  : 	return nACP;

	mov	eax, DWORD PTR _nACP$[ebp]

; 124  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184058
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L184058:
	DD	1
	DD	$L184057
$L184057:
	DD	-24					; ffffffe8H
	DD	7
	DD	$L184055
$L184055:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	65					; 00000041H
	DB	67					; 00000043H
	DB	80					; 00000050H
	DB	0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp

; 128  : 	return( CP_THREAD_ACP );

	mov	eax, 3

; 129  : }

	pop	ebp
	ret	0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
PUBLIC	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z	; ATL::_AtlInstallStringThunk
PUBLIC	?GetEnvironmentVariableWFake@ATL@@YGKPBGPAGK@Z	; ATL::GetEnvironmentVariableWFake
EXTRN	__imp__GetEnvironmentVariableW@12:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?GetEnvironmentVariableWThunk@ATL@@YGKPBGPAGK@Z
_TEXT	SEGMENT
_pszName$ = 8						; size = 4
_pszBuffer$ = 12					; size = 4
_nSize$ = 16						; size = 4
?GetEnvironmentVariableWThunk@ATL@@YGKPBGPAGK@Z PROC NEAR ; ATL::GetEnvironmentVariableWThunk, COMDAT

; 183  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 184  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnGetEnvironmentVariableW), 
; 185  : 		GetEnvironmentVariableWFake, ::GetEnvironmentVariableW);

	mov	eax, DWORD PTR __imp__GetEnvironmentVariableW@12
	push	eax
	push	OFFSET FLAT:?GetEnvironmentVariableWFake@ATL@@YGKPBGPAGK@Z ; ATL::GetEnvironmentVariableWFake
	push	OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+20
	call	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
	add	esp, 12					; 0000000cH

; 186  : 
; 187  : 	return _strthunks.pfnGetEnvironmentVariableW(pszName, pszBuffer, nSize);

	mov	esi, esp
	mov	ecx, DWORD PTR _nSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszName$[ebp]
	push	eax
	call	DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 188  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?GetEnvironmentVariableWThunk@ATL@@YGKPBGPAGK@Z ENDP	; ATL::GetEnvironmentVariableWThunk
_TEXT	ENDS
PUBLIC	?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
PUBLIC	??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51 ; `ATL::_AtlInstallStringThunk'::`2'::`local static guard'
EXTRN	__imp__GetVersion@0:NEAR
;	COMDAT ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA
_BSS	SEGMENT
?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA DB 01H DUP (?) ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
_BSS	ENDS
;	COMDAT ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
_BSS	SEGMENT
??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51 DD 01H DUP (?) ; `ATL::_AtlInstallStringThunk'::`2'::`local static guard'
; Function compile flags: /Odt /RTCsu
_BSS	ENDS
;	COMDAT ?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z
_TEXT	SEGMENT
_pfn$ = -4						; size = 4
_ppThunk$ = 8						; size = 4
_pfnWin9x$ = 12						; size = 4
_pfnNT$ = 16						; size = 4
?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z PROC NEAR	; ATL::_AtlInstallStringThunk, COMDAT

; 115  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 116  : #pragma warning (push)
; 117  : #pragma warning (disable : 4640)	// construction of local static object is not thread-safe
; 118  : 
; 119  : 	static bool s_bWin9x = (::GetVersion()&0x80000000) != 0;

	mov	eax, DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
	and	eax, 1
	jne	SHORT $L179521
	mov	ecx, DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@51, ecx
	mov	esi, esp
	call	DWORD PTR __imp__GetVersion@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, -2147483648			; 80000000H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA, al ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
$L179521:

; 120  : 	
; 121  : #pragma warning (pop)
; 122  : 
; 123  : 	void* pfn;
; 124  : 	if (s_bWin9x)

	movzx	edx, BYTE PTR ?s_bWin9x@?1??_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z@4_NA ; `ATL::_AtlInstallStringThunk'::`2'::s_bWin9x
	test	edx, edx
	je	SHORT $L179523

; 125  : 		pfn = pfnWin9x;

	mov	eax, DWORD PTR _pfnWin9x$[ebp]
	mov	DWORD PTR _pfn$[ebp], eax

; 126  : 	else

	jmp	SHORT $L179524
$L179523:

; 127  : 	{
; 128  : #ifdef _CSTRING_ALWAYS_THUNK
; 129  : 		pfn = pfnWin9x;
; 130  : 		(void)pfnNT;
; 131  : #else
; 132  : 		pfn = pfnNT;

	mov	ecx, DWORD PTR _pfnNT$[ebp]
	mov	DWORD PTR _pfn$[ebp], ecx
$L179524:

; 133  : #endif
; 134  : 	}
; 135  : 	InterlockedExchangePointer(ppThunk, pfn);

	mov	edx, DWORD PTR _pfn$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppThunk$[ebp]
	push	eax
	call	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ; InterlockedExchangePointer

; 136  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ENDP	; ATL::_AtlInstallStringThunk
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
PUBLIC	??_C@_0FB@DNILBHEN@C?3?2Program?5Files?2Microsoft?5Visua@ ; `string'
PUBLIC	??0?$CW2AEX@$0IA@@ATL@@QAE@PBG@Z		; ATL::CW2AEX<128>::CW2AEX<128>
PUBLIC	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ			; ATL::CW2AEX<128>::~CW2AEX<128>
PUBLIC	??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ			; ATL::CW2AEX<128>::operator char *
PUBLIC	??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@	; `string'
PUBLIC	??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
PUBLIC	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
PUBLIC	??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
PUBLIC	?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate
EXTRN	__imp__MultiByteToWideChar@24:NEAR
EXTRN	__imp__GetEnvironmentVariableA@12:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__CrtDbgReport:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184085 DD	0ffffffffH
	DD	FLAT:$L184072
	DD	00H
	DD	FLAT:$L184073
$T184077 DD	019930520H
	DD	02H
	DD	FLAT:$T184085
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
CONST	SEGMENT
??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@ DB 'nSize >= nSizeW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@DNILBHEN@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT
??_C@_0FB@DNILBHEN@C?3?2Program?5Files?2Microsoft?5Visua@ DB 'C:\Program '
	DB	'Files\Microsoft Visual Studio .NET 2003\Vc7\atlmfc\include\cs'
	DB	'tringt.h', 00H				; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetEnvironmentVariableWFake@ATL@@YGKPBGPAGK@Z
_TEXT	SEGMENT
$T184071 = -316						; size = 4
$T184069 = -312						; size = 4
$T184068 = -308						; size = 4
_pszNameA$ = -300					; size = 132
_pszBufferA$ = -160					; size = 132
_nSizeW$ = -24						; size = 4
_nSizeA$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_pszName$ = 8						; size = 4
_pszBuffer$ = 12					; size = 4
_nSize$ = 16						; size = 4
?GetEnvironmentVariableWFake@ATL@@YGKPBGPAGK@Z PROC NEAR ; ATL::GetEnvironmentVariableWFake, COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetEnvironmentVariableWFake@ATL@@YGKPBGPAGK@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 304				; 00000130H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 160  : 	ULONG nSizeA;
; 161  : 	ULONG nSizeW;
; 162  : 	CTempBuffer<char> pszBufferA;

	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	call	??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 163  : 	CW2A pszNameA(pszName);

	mov	eax, DWORD PTR _pszName$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pszNameA$[ebp]
	call	??0?$CW2AEX@$0IA@@ATL@@QAE@PBG@Z	; ATL::CW2AEX<128>::CW2AEX<128>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 164  : 
; 165  : 	nSizeA = ::GetEnvironmentVariableA(pszNameA, NULL, 0);

	mov	esi, esp
	push	0
	push	0
	lea	ecx, DWORD PTR _pszNameA$[ebp]
	call	??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ		; ATL::CW2AEX<128>::operator char *
	push	eax
	call	DWORD PTR __imp__GetEnvironmentVariableA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nSizeA$[ebp], eax

; 166  : 	if (nSizeA == 0)

	cmp	DWORD PTR _nSizeA$[ebp], 0
	jne	SHORT $L179595

; 167  : 		return 0;

	mov	DWORD PTR $T184068[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _pszNameA$[ebp]
	call	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ		; ATL::CW2AEX<128>::~CW2AEX<128>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	call	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
	mov	eax, DWORD PTR $T184068[ebp]
	jmp	$L179567
$L179595:

; 168  : 
; 169  : 	pszBufferA.Allocate(nSizeA*2);

	mov	ecx, DWORD PTR _nSizeA$[ebp]
	shl	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	call	?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate

; 170  : 	::GetEnvironmentVariableA(pszNameA, pszBufferA, nSizeA);

	mov	esi, esp
	mov	edx, DWORD PTR _nSizeA$[ebp]
	push	edx
	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	call	??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
	push	eax
	lea	ecx, DWORD PTR _pszNameA$[ebp]
	call	??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ		; ATL::CW2AEX<128>::operator char *
	push	eax
	call	DWORD PTR __imp__GetEnvironmentVariableA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 171  : 
; 172  : 	nSizeW = ::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, NULL, 0);

	mov	esi, esp
	push	0
	push	0
	push	-1
	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	call	??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
	push	eax
	push	0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nSizeW$[ebp], eax

; 173  : 	if (nSize == 0)

	cmp	DWORD PTR _nSize$[ebp], 0
	jne	SHORT $L179597

; 174  : 		return nSizeW;

	mov	eax, DWORD PTR _nSizeW$[ebp]
	mov	DWORD PTR $T184069[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _pszNameA$[ebp]
	call	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ		; ATL::CW2AEX<128>::~CW2AEX<128>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	call	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
	mov	eax, DWORD PTR $T184069[ebp]
	jmp	$L179567
$L179597:

; 175  : 	ATLASSERT(nSize >= nSizeW);

	mov	ecx, DWORD PTR _nSize$[ebp]
	cmp	ecx, DWORD PTR _nSizeW$[ebp]
	jae	SHORT $L184070
	push	OFFSET FLAT:??_C@_0BA@CLMJJCOM@nSize?5?$DO?$DN?5nSizeW?$AA@
	push	0
	push	175					; 000000afH
	push	OFFSET FLAT:??_C@_0FB@DNILBHEN@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L184070
	int	3
$L184070:

; 176  : 	::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, pszBuffer, nSizeW);

	mov	esi, esp
	mov	eax, DWORD PTR _nSizeW$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszBuffer$[ebp]
	push	ecx
	push	-1
	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	call	??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
	push	eax
	push	0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp

; 177  : 
; 178  : 	return nSizeW;

	mov	edx, DWORD PTR _nSizeW$[ebp]
	mov	DWORD PTR $T184071[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _pszNameA$[ebp]
	call	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ		; ATL::CW2AEX<128>::~CW2AEX<128>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	call	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
	mov	eax, DWORD PTR $T184071[ebp]
$L179567:

; 179  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184084
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L184084:
	DD	2
	DD	$L184083
$L184083:
	DD	-160					; ffffff60H
	DD	132					; 00000084H
	DD	$L184078
	DD	-300					; fffffed4H
	DD	132					; 00000084H
	DD	$L184079
$L184079:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	65					; 00000041H
	DB	0
$L184078:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	65					; 00000041H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184072:
	lea	ecx, DWORD PTR _pszBufferA$[ebp]
	jmp	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
$L184073:
	lea	ecx, DWORD PTR _pszNameA$[ebp]
	jmp	??1?$CW2AEX@$0IA@@ATL@@QAE@XZ		; ATL::CW2AEX<128>::~CW2AEX<128>
__ehhandler$?GetEnvironmentVariableWFake@ATL@@YGKPBGPAGK@Z:
	mov	eax, OFFSET FLAT:$T184077
	jmp	___CxxFrameHandler
text$x	ENDS
?GetEnvironmentVariableWFake@ATL@@YGKPBGPAGK@Z ENDP	; ATL::GetEnvironmentVariableWFake
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 158  : 	return( g_pfnGetThreadACP() );

	mov	esi, esp
	call	DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
PUBLIC	?CompareStringWFake@ATL@@YGHKKPBGH0H@Z		; ATL::CompareStringWFake
EXTRN	__imp__CompareStringW@24:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?CompareStringWThunk@ATL@@YGHKKPBGH0H@Z
_TEXT	SEGMENT
_lcid$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_pszString1$ = 16					; size = 4
_nLength1$ = 20						; size = 4
_pszString2$ = 24					; size = 4
_nLength2$ = 28						; size = 4
?CompareStringWThunk@ATL@@YGHKKPBGH0H@Z PROC NEAR	; ATL::CompareStringWThunk, COMDAT

; 216  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 217  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCompareStringW), CompareStringWFake, ::CompareStringW);

	mov	eax, DWORD PTR __imp__CompareStringW@24
	push	eax
	push	OFFSET FLAT:?CompareStringWFake@ATL@@YGHKKPBGH0H@Z ; ATL::CompareStringWFake
	push	OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A ; ATL::_strthunks
	call	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
	add	esp, 12					; 0000000cH

; 218  : 
; 219  : 	return _strthunks.pfnCompareStringW(lcid, dwFlags, pszString1, nLength1, pszString2, nLength2);

	mov	esi, esp
	mov	ecx, DWORD PTR _nLength2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszString2$[ebp]
	push	edx
	mov	eax, DWORD PTR _nLength1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszString1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcid$[ebp]
	push	eax
	call	DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A
	cmp	esi, esp
	call	__RTC_CheckEsp

; 220  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	24					; 00000018H
?CompareStringWThunk@ATL@@YGHKKPBGH0H@Z ENDP		; ATL::CompareStringWThunk
_TEXT	ENDS
PUBLIC	?AtlW2AHelper@@YGPADPADPBGHI@Z			; AtlW2AHelper
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
PUBLIC	??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
PUBLIC	?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
EXTRN	__imp__lstrlenW@4:NEAR
EXTRN	__imp__CompareStringA@24:NEAR
EXTRN	__alloca_probe:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184112 DD	0ffffffffH
	DD	FLAT:$L184104
$T184106 DD	019930520H
	DD	01H
	DD	FLAT:$T184112
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?CompareStringWFake@ATL@@YGHKKPBGH0H@Z
_TEXT	SEGMENT
tv147 = -76						; size = 4
tv142 = -72						; size = 4
tv149 = -68						; size = 4
tv89 = -64						; size = 4
tv84 = -60						; size = 4
tv91 = -56						; size = 4
$T184103 = -52						; size = 4
_pszAString2$ = -48					; size = 4
_pszAString1$ = -44					; size = 4
__AtlSafeAllocaManager$ = -36				; size = 4
__lpa_ex$ = -28						; size = 4
__lpw_ex$ = -24						; size = 4
__acp_ex$ = -20						; size = 4
__convert_ex$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lcid$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_pszString1$ = 16					; size = 4
_nLength1$ = 20						; size = 4
_pszString2$ = 24					; size = 4
_nLength2$ = 28						; size = 4
?CompareStringWFake@ATL@@YGHKKPBGH0H@Z PROC NEAR	; ATL::CompareStringWFake, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CompareStringWFake@ATL@@YGHKKPBGH0H@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 193  : 	USES_CONVERSION_EX;

	mov	DWORD PTR __convert_ex$[ebp], 0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	mov	DWORD PTR __acp_ex$[ebp], eax
	mov	DWORD PTR __lpw_ex$[ebp], 0
	mov	DWORD PTR __lpa_ex$[ebp], 0
	lea	ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
	call	??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 194  : 	
; 195  : 	LPCSTR pszAString1 = NULL;

	mov	DWORD PTR _pszAString1$[ebp], 0

; 196  : 	if(pszString1 != NULL)

	cmp	DWORD PTR _pszString1$[ebp], 0
	je	$L179622

; 197  : 	{
; 198  : 		pszAString1 = W2A_EX(pszString1,_ATL_SAFE_ALLOCA_DEF_THRESHOLD);

	mov	eax, DWORD PTR _pszString1$[ebp]
	mov	DWORD PTR __lpw_ex$[ebp], eax
	cmp	DWORD PTR __lpw_ex$[ebp], 0
	jne	SHORT $L184097
	mov	DWORD PTR tv91[ebp], 0
	jmp	SHORT $L184098
$L184097:
	mov	esi, esp
	mov	ecx, DWORD PTR __lpw_ex$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	edx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __convert_ex$[ebp], edx
	cmp	DWORD PTR __convert_ex$[ebp], 1024	; 00000400H
	jg	SHORT $L184095
	mov	eax, DWORD PTR __convert_ex$[ebp]
	push	eax
	call	?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $L184095
	mov	eax, DWORD PTR __convert_ex$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv84[ebp], esp
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $L184096
$L184095:
	mov	eax, DWORD PTR __convert_ex$[ebp]
	push	eax
	lea	ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
	call	?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
	mov	DWORD PTR tv89[ebp], eax
$L184096:
	mov	ecx, DWORD PTR __acp_ex$[ebp]
	push	ecx
	mov	edx, DWORD PTR __convert_ex$[ebp]
	push	edx
	mov	eax, DWORD PTR __lpw_ex$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv89[ebp]
	push	ecx
	call	?AtlW2AHelper@@YGPADPADPBGHI@Z		; AtlW2AHelper
	mov	DWORD PTR tv91[ebp], eax
$L184098:
	mov	edx, DWORD PTR tv91[ebp]
	mov	DWORD PTR _pszAString1$[ebp], edx

; 199  : 		if(pszAString1 == NULL)

	cmp	DWORD PTR _pszAString1$[ebp], 0
	jne	SHORT $L179622

; 200  : 			AtlThrow(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L179622:

; 201  : 	}
; 202  : 
; 203  : 	LPCSTR pszAString2 = NULL;

	mov	DWORD PTR _pszAString2$[ebp], 0

; 204  : 	if(pszString2 != NULL)

	cmp	DWORD PTR _pszString2$[ebp], 0
	je	$L179628

; 205  : 	{
; 206  : 		pszAString2 = W2A_EX(pszString2,_ATL_SAFE_ALLOCA_DEF_THRESHOLD);

	mov	eax, DWORD PTR _pszString2$[ebp]
	mov	DWORD PTR __lpw_ex$[ebp], eax
	cmp	DWORD PTR __lpw_ex$[ebp], 0
	jne	SHORT $L184101
	mov	DWORD PTR tv149[ebp], 0
	jmp	SHORT $L184102
$L184101:
	mov	esi, esp
	mov	ecx, DWORD PTR __lpw_ex$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	edx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __convert_ex$[ebp], edx
	cmp	DWORD PTR __convert_ex$[ebp], 1024	; 00000400H
	jg	SHORT $L184099
	mov	eax, DWORD PTR __convert_ex$[ebp]
	push	eax
	call	?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $L184099
	mov	eax, DWORD PTR __convert_ex$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv142[ebp], esp
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv147[ebp], edx
	jmp	SHORT $L184100
$L184099:
	mov	eax, DWORD PTR __convert_ex$[ebp]
	push	eax
	lea	ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
	call	?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
	mov	DWORD PTR tv147[ebp], eax
$L184100:
	mov	ecx, DWORD PTR __acp_ex$[ebp]
	push	ecx
	mov	edx, DWORD PTR __convert_ex$[ebp]
	push	edx
	mov	eax, DWORD PTR __lpw_ex$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv147[ebp]
	push	ecx
	call	?AtlW2AHelper@@YGPADPADPBGHI@Z		; AtlW2AHelper
	mov	DWORD PTR tv149[ebp], eax
$L184102:
	mov	edx, DWORD PTR tv149[ebp]
	mov	DWORD PTR _pszAString2$[ebp], edx

; 207  : 		if(pszAString2 == NULL)

	cmp	DWORD PTR _pszAString2$[ebp], 0
	jne	SHORT $L179628

; 208  : 			AtlThrow(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L179628:

; 209  : 	}
; 210  : 
; 211  : 	return ::CompareStringA(lcid, dwFlags, pszAString1, nLength1, pszAString2, nLength2);

	mov	esi, esp
	mov	eax, DWORD PTR _nLength2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszAString2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLength1$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszAString1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcid$[ebp]
	push	edx
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T184103[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
	call	??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
	mov	eax, DWORD PTR $T184103[ebp]
$L184094:

; 212  : }

	lea	esp, DWORD PTR [ebp-84]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184111
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$L184111:
	DD	1
	DD	$L184110
$L184110:
	DD	-36					; ffffffdcH
	DD	4
	DD	$L184108
$L184108:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	116					; 00000074H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	97					; 00000061H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184104:
	lea	ecx, DWORD PTR __AtlSafeAllocaManager$[ebp]
	jmp	??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
__ehhandler$?CompareStringWFake@ATL@@YGHKKPBGH0H@Z:
	mov	eax, OFFSET FLAT:$T184106
	jmp	___CxxFrameHandler
text$x	ENDS
?CompareStringWFake@ATL@@YGHKKPBGH0H@Z ENDP		; ATL::CompareStringWFake
EXTRN	__resetstkoflw:NEAR
EXTRN	__except_handler3:NEAR
;	COMDAT CONST
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
CONST	SEGMENT
$T184123 DD	0ffffffffH
	DD	FLAT:$L184118
	DD	FLAT:$L184119
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT
tv65 = -48						; size = 4
$T184122 = -44						; size = 4
_p$75737 = -36						; size = 4
_bStackAvailable$ = -25					; size = 1
__$SEHRec$ = -24					; size = 24
_Size$ = 8						; size = 4
?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable, COMDAT

; 331  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	OFFSET FLAT:$T184123
	push	OFFSET FLAT:__except_handler3
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	add	esp, -32				; ffffffe0H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR __$SEHRec$[ebp], esp

; 332  :     bool bStackAvailable = true;

	mov	BYTE PTR _bStackAvailable$[ebp], 1

; 333  : 
; 334  :     __try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 335  :     {
; 336  :         PVOID p = _alloca(Size + _ATL_STACK_MARGIN);

	mov	eax, DWORD PTR _Size$[ebp]
	add	eax, 8195				; 00002003H
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv65[ebp], esp
	mov	DWORD PTR __$SEHRec$[ebp], esp
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR _p$75737[ebp], eax
	mov	DWORD PTR __$SEHRec$[ebp+20], -1
	jmp	SHORT $L184121
$L184118:
$L184130:

; 337  :         (p);
; 338  :     }
; 339  :     __except ((EXCEPTION_STACK_OVERFLOW == GetExceptionCode()) ?
; 340  :                    EXCEPTION_EXECUTE_HANDLER :
; 341  :                    EXCEPTION_CONTINUE_SEARCH)

	mov	ecx, DWORD PTR __$SEHRec$[ebp+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T184122[ebp], eax
	mov	eax, DWORD PTR $T184122[ebp]
	sub	eax, -1073741571			; c00000fdH
	neg	eax
	sbb	eax, eax
	inc	eax
$L184120:
$L184129:
	ret	0
$L184119:
	mov	esp, DWORD PTR __$SEHRec$[ebp]

; 342  :     {
; 343  :         bStackAvailable = false;

	mov	BYTE PTR _bStackAvailable$[ebp], 0

; 344  :         _resetstkoflw();

	call	__resetstkoflw
	mov	DWORD PTR __$SEHRec$[ebp+20], -1
$L184121:

; 345  :     }
; 346  :     return bStackAvailable;

	mov	al, BYTE PTR _bStackAvailable$[ebp]
$L184117:

; 347  : }

	lea	esp, DWORD PTR [ebp-60]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184128
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L184128:
	DD	1
	DD	$L184127
$L184127:
	DD	-36					; ffffffdcH
	DD	4
	DD	$L184125
$L184125:
	DB	112					; 00000070H
	DB	0
?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::_AtlVerifyStackAvailable
_TEXT	ENDS
PUBLIC	??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@ ; `string'
PUBLIC	??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@		; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
EXTRN	__imp__WideCharToMultiByte@32:NEAR
;	COMDAT ??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
CONST	SEGMENT
??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@ DB 'lpw != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT
??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@ DB 'C:\Program '
	DB	'Files\Microsoft Visual Studio .NET 2003\Vc7\atlmfc\include\at'
	DB	'lconv.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@ DB 'lpa != 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_lpa$ = 8						; size = 4
_lpw$ = 12						; size = 4
_nChars$ = 16						; size = 4
_acp$ = 20						; size = 4
?AtlW2AHelper@@YGPADPADPBGHI@Z PROC NEAR		; AtlW2AHelper, COMDAT

; 573  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 574  : 	ATLASSERT(lpw != NULL);

	cmp	DWORD PTR _lpw$[ebp], 0
	jne	SHORT $L184135
	push	OFFSET FLAT:??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
	push	0
	push	574					; 0000023eH
	push	OFFSET FLAT:??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L184135
	int	3
$L184135:

; 575  : 	ATLASSERT(lpa != NULL);

	cmp	DWORD PTR _lpa$[ebp], 0
	jne	SHORT $L184136
	push	OFFSET FLAT:??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
	push	0
	push	575					; 0000023fH
	push	OFFSET FLAT:??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L184136
	int	3
$L184136:

; 576  : 	if (lpa == NULL || lpw == NULL)

	cmp	DWORD PTR _lpa$[ebp], 0
	je	SHORT $L75958
	cmp	DWORD PTR _lpw$[ebp], 0
	jne	SHORT $L75957
$L75958:

; 577  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L75954
$L75957:

; 578  : 	// verify that no illegal character present
; 579  : 	// since lpa was allocated based on the size of lpw
; 580  : 	// don't worry about the number of chars
; 581  : 	lpa[0] = '\0';

	mov	edx, DWORD PTR _lpa$[ebp]
	mov	BYTE PTR [edx], 0

; 582  : 	int ret = WideCharToMultiByte(acp, 0, lpw, -1, lpa, nChars, NULL, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _nChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpa$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _lpw$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _acp$[ebp]
	push	eax
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 583  : 	if(ret == 0)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $L75960

; 584  : 	{
; 585  : 		ATLASSERT(FALSE);

	xor	ecx, ecx
	jne	SHORT $L184137
	push	OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
	push	0
	push	585					; 00000249H
	push	OFFSET FLAT:??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L184137
	int	3
$L184137:

; 586  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L75954
$L75960:

; 587  : 	}
; 588  : 	return lpa;

	mov	eax, DWORD PTR _lpa$[ebp]
$L75954:

; 589  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AtlW2AHelper@@YGPADPADPBGHI@Z ENDP			; AtlW2AHelper
_TEXT	ENDS
PUBLIC	??BCTraceCategory@ATL@@QBEKXZ			; ATL::CTraceCategory::operator unsigned long
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??0CAtlException@ATL@@QAE@J@Z			; ATL::CAtlException::CAtlException
PUBLIC	??_C@_0FC@CFIFHLCH@C?3?2Program?5Files?2Microsoft?5Visua@ ; `string'
PUBLIC	??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@ ; `string'
PUBLIC	__TI1?AVCAtlException@ATL@@
PUBLIC	__CTA1?AVCAtlException@ATL@@
PUBLIC	??_R0?AVCAtlException@ATL@@@8			; ATL::CAtlException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCAtlException@ATL@@@84
EXTRN	?atlTraceException@ATL@@3VCTraceCategory@1@A:DWORD ; ATL::atlTraceException
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT ??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
CONST	SEGMENT
??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@ DB 'AtlThrow: hr '
	DB	'= 0x%x', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@CFIFHLCH@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT
??_C@_0FC@CFIFHLCH@C?3?2Program?5Files?2Microsoft?5Visua@ DB 'C:\Program '
	DB	'Files\Microsoft Visual Studio .NET 2003\Vc7\atlmfc\include\at'
	DB	'lexcept.h', 00H				; `string'
CONST	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__TI1?AVCAtlException@ATL@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCAtlException@ATL@@
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__CTA1?AVCAtlException@ATL@@ DD 01H
	DD	FLAT:__CT??_R0?AVCAtlException@ATL@@@84
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT
__CT??_R0?AVCAtlException@ATL@@@84 DD 00H
	DD	FLAT:??_R0?AVCAtlException@ATL@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT
??_R0?AVCAtlException@ATL@@@8 DD FLAT:??_7type_info@@6B@ ; ATL::CAtlException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAtlException@ATL@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T184142 = -16						; size = 4
$T184141 = -12						; size = 4
$T184140 = -8						; size = 8
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_0BF@IAAKIJDJ@AtlThrow?3?5hr?5?$DN?50x?$CFx?6?$AA@
	push	0
	mov	ecx, OFFSET FLAT:?atlTraceException@ATL@@3VCTraceCategory@1@A ; ATL::atlTraceException
	call	??BCTraceCategory@ATL@@QBEKXZ		; ATL::CTraceCategory::operator unsigned long
	push	eax
	push	62					; 0000003eH
	push	OFFSET FLAT:??_C@_0FC@CFIFHLCH@C?3?2Program?5Files?2Microsoft?5Visua@
	lea	ecx, DWORD PTR $T184140[ebp]
	call	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
	push	eax
	call	??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
	add	esp, 20					; 00000014H

; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )
; 65   : 	{
; 66   : 		AfxThrowMemoryException();
; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );
; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T184142[ebp]
	call	??0CAtlException@ATL@@QAE@J@Z		; ATL::CAtlException::CAtlException
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T184141[ebp], edx
	push	OFFSET FLAT:__TI1?AVCAtlException@ATL@@
	lea	eax, DWORD PTR $T184141[ebp]
	push	eax
	call	__CxxThrowException@8
$L184139:

; 74   : #endif
; 75   : };

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atltrace.h
_TEXT	ENDS
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC NEAR	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 158  : 	{}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pszFileName$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nLineNo$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
PUBLIC	?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z		; ATL::CTrace::TraceV
EXTRN	?s_trace@CTrace@ATL@@2V12@A:QWORD		; ATL::CTrace::s_trace
; Function compile flags: /Odt /RTCsu
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ
_TEXT	SEGMENT
_ptr$ = -4						; size = 4
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ PROC NEAR	; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 161  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 162  : 		va_list ptr; va_start(ptr, pszFmt);

	lea	eax, DWORD PTR _pszFmt$[ebp+4]
	mov	DWORD PTR _ptr$[ebp], eax

; 163  : 		ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _nLevel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwCategory$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET FLAT:?s_trace@CTrace@ATL@@2V12@A
	call	?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z	; ATL::CTrace::TraceV
	add	esp, 28					; 0000001cH

; 164  : 		va_end(ptr);

	mov	DWORD PTR _ptr$[ebp], 0

; 165  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??RCTraceFileAndLineInfo@ATL@@QBAXKIPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
_TEXT	ENDS
EXTRN	_AtlTraceVA:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFileName$ = 12					; size = 4
_nLine$ = 16						; size = 4
_dwCategory$ = 20					; size = 4
_nLevel$ = 24						; size = 4
_pszFmt$ = 28						; size = 4
_args$ = 32						; size = 4
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z PROC NEAR		; ATL::CTrace::TraceV, COMDAT

; 121  : 	{

	push	ebp
	mov	ebp, esp

; 122  : 		AtlTraceVA(m_dwModule, pszFileName, nLine, dwCategory, nLevel, pszFmt, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszFmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLevel$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwCategory$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFileName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_AtlTraceVA
	add	esp, 28					; 0000001cH

; 123  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?TraceV@CTrace@ATL@@QBAXPBDHKI0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??BCTraceCategory@ATL@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCTraceCategory@ATL@@QBEKXZ PROC NEAR			; ATL::CTraceCategory::operator unsigned long, COMDAT
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	return( m_dwCategory );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 204  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??BCTraceCategory@ATL@@QBEKXZ ENDP			; ATL::CTraceCategory::operator unsigned long
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
_TEXT	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hr$ = 8						; size = 4
??0CAtlException@ATL@@QAE@J@Z PROC NEAR			; ATL::CAtlException::CAtlException, COMDAT
; _this$ = ecx

; 40   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hr$[ebp]
	mov	DWORD PTR [eax], ecx

; 41   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CAtlException@ATL@@QAE@J@Z ENDP			; ATL::CAtlException::CAtlException
_TEXT	ENDS
PUBLIC	?GetStringTypeExWFake@ATL@@YGHKKPBGHPAG@Z	; ATL::GetStringTypeExWFake
EXTRN	__imp__GetStringTypeExW@20:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?GetStringTypeExWThunk@ATL@@YGHKKPBGHPAG@Z
_TEXT	SEGMENT
_lcid$ = 8						; size = 4
_dwInfoType$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nLength$ = 20						; size = 4
_pwCharType$ = 24					; size = 4
?GetStringTypeExWThunk@ATL@@YGHKKPBGHPAG@Z PROC NEAR	; ATL::GetStringTypeExWThunk, COMDAT

; 240  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 241  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnGetStringTypeExW), GetStringTypeExWFake, ::GetStringTypeExW);

	mov	eax, DWORD PTR __imp__GetStringTypeExW@20
	push	eax
	push	OFFSET FLAT:?GetStringTypeExWFake@ATL@@YGHKKPBGHPAG@Z ; ATL::GetStringTypeExWFake
	push	OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+4
	call	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
	add	esp, 12					; 0000000cH

; 242  : 
; 243  : 	return _strthunks.pfnGetStringTypeExW(lcid, dwInfoType, pszSrc, nLength, pwCharType);

	mov	esi, esp
	mov	ecx, DWORD PTR _pwCharType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLength$[ebp]
	push	edx
	mov	eax, DWORD PTR _pszSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwInfoType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lcid$[ebp]
	push	edx
	call	DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 244  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	20					; 00000014H
?GetStringTypeExWThunk@ATL@@YGHKKPBGHPAG@Z ENDP		; ATL::GetStringTypeExWThunk
_TEXT	ENDS
EXTRN	__imp__GetStringTypeExA@20:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184168 DD	0ffffffffH
	DD	FLAT:$L184160
$T184162 DD	019930520H
	DD	01H
	DD	FLAT:$T184168
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?GetStringTypeExWFake@ATL@@YGHKKPBGHPAG@Z
_TEXT	SEGMENT
$T184159 = -164						; size = 4
_pszA$ = -156						; size = 132
_nLengthA$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_lcid$ = 8						; size = 4
_dwInfoType$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nLength$ = 20						; size = 4
_pwCharType$ = 24					; size = 4
?GetStringTypeExWFake@ATL@@YGHKKPBGHPAG@Z PROC NEAR	; ATL::GetStringTypeExWFake, COMDAT

; 224  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetStringTypeExWFake@ATL@@YGHKKPBGHPAG@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-164]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 225  : 	int nLengthA;
; 226  : 	CTempBuffer<char> pszA;

	lea	ecx, DWORD PTR _pszA$[ebp]
	call	??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 227  : 
; 228  : 	nLengthA = ::WideCharToMultiByte(_AtlGetConversionACP(), 0, pszSrc, nLength, NULL, 0, NULL, NULL);

	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _nLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	push	ecx
	push	0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nLengthA$[ebp], eax

; 229  : 	pszA.Allocate(nLengthA);

	mov	edx, DWORD PTR _nLengthA$[ebp]
	push	edx
	lea	ecx, DWORD PTR _pszA$[ebp]
	call	?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate

; 230  : 	::WideCharToMultiByte(_AtlGetConversionACP(), 0, pszSrc, nLength, pszA, nLengthA, NULL, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _nLengthA$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pszA$[ebp]
	call	??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
	push	eax
	mov	ecx, DWORD PTR _nLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszSrc$[ebp]
	push	edx
	push	0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp

; 231  : 
; 232  : 	if (nLength == -1)

	cmp	DWORD PTR _nLength$[ebp], -1
	jne	SHORT $L179654

; 233  : 		nLengthA = -1;

	mov	DWORD PTR _nLengthA$[ebp], -1
$L179654:

; 234  : 
; 235  : 	return ::GetStringTypeExA(lcid, dwInfoType, pszA, nLengthA, pwCharType);

	mov	esi, esp
	mov	eax, DWORD PTR _pwCharType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nLengthA$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pszA$[ebp]
	call	??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
	push	eax
	mov	edx, DWORD PTR _dwInfoType$[ebp]
	push	edx
	mov	eax, DWORD PTR _lcid$[ebp]
	push	eax
	call	DWORD PTR __imp__GetStringTypeExA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T184159[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pszA$[ebp]
	call	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
	mov	eax, DWORD PTR $T184159[ebp]

; 236  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184167
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	call	@__security_check_cookie@4
	pop	edi
	pop	esi
	add	esp, 164				; 000000a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$L184167:
	DD	1
	DD	$L184166
$L184166:
	DD	-156					; ffffff64H
	DD	132					; 00000084H
	DD	$L184163
$L184163:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	65					; 00000041H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184160:
	lea	ecx, DWORD PTR _pszA$[ebp]
	jmp	??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
__ehhandler$?GetStringTypeExWFake@ATL@@YGHKKPBGHPAG@Z:
	mov	eax, OFFSET FLAT:$T184162
	jmp	___CxxFrameHandler
text$x	ENDS
?GetStringTypeExWFake@ATL@@YGHKKPBGHPAG@Z ENDP		; ATL::GetStringTypeExWFake
PUBLIC	?lstrcmpiWFake@ATL@@YGHPBG0@Z			; ATL::lstrcmpiWFake
EXTRN	__imp__lstrcmpiW@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?lstrcmpiWThunk@ATL@@YGHPBG0@Z
_TEXT	SEGMENT
_psz1$ = 8						; size = 4
_psz2$ = 12						; size = 4
?lstrcmpiWThunk@ATL@@YGHPBG0@Z PROC NEAR		; ATL::lstrcmpiWThunk, COMDAT

; 254  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 255  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnlstrcmpiW), lstrcmpiWFake, ::lstrcmpiW);

	mov	eax, DWORD PTR __imp__lstrcmpiW@8
	push	eax
	push	OFFSET FLAT:?lstrcmpiWFake@ATL@@YGHPBG0@Z ; ATL::lstrcmpiWFake
	push	OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+8
	call	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
	add	esp, 12					; 0000000cH

; 256  : 
; 257  : 	return _strthunks.pfnlstrcmpiW(psz1, psz2);

	mov	esi, esp
	mov	ecx, DWORD PTR _psz2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _psz1$[ebp]
	push	edx
	call	DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 258  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?lstrcmpiWThunk@ATL@@YGHPBG0@Z ENDP			; ATL::lstrcmpiWThunk
_TEXT	ENDS
EXTRN	__imp__lstrcmpiA@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?lstrcmpiWFake@ATL@@YGHPBG0@Z
_TEXT	SEGMENT
tv91 = -32						; size = 4
tv94 = -28						; size = 4
tv76 = -24						; size = 4
tv79 = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz1$ = 8						; size = 4
_psz2$ = 12						; size = 4
?lstrcmpiWFake@ATL@@YGHPBG0@Z PROC NEAR			; ATL::lstrcmpiWFake, COMDAT

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 248  : 	USES_CONVERSION;

	mov	DWORD PTR __convert$[ebp], 0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	mov	DWORD PTR __acp$[ebp], eax
	mov	DWORD PTR __lpw$[ebp], 0
	mov	DWORD PTR __lpa$[ebp], 0

; 249  : 
; 250  : 	return ::lstrcmpiA(W2A(psz1), W2A(psz2));

	mov	eax, DWORD PTR _psz2$[ebp]
	mov	DWORD PTR __lpw$[ebp], eax
	cmp	DWORD PTR __lpw$[ebp], 0
	jne	SHORT $L184175
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $L184176
$L184175:
	mov	esi, esp
	mov	ecx, DWORD PTR __lpw$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	edx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __convert$[ebp], edx
	mov	eax, DWORD PTR __convert$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv76[ebp], esp
	mov	eax, DWORD PTR __acp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __convert$[ebp]
	push	ecx
	mov	edx, DWORD PTR __lpw$[ebp]
	push	edx
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	call	?AtlW2AHelper@@YGPADPADPBGHI@Z		; AtlW2AHelper
	mov	DWORD PTR tv79[ebp], eax
$L184176:
	mov	ecx, DWORD PTR _psz1$[ebp]
	mov	DWORD PTR __lpw$[ebp], ecx
	cmp	DWORD PTR __lpw$[ebp], 0
	jne	SHORT $L184177
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $L184178
$L184177:
	mov	esi, esp
	mov	edx, DWORD PTR __lpw$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	eax, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __convert$[ebp], eax
	mov	eax, DWORD PTR __convert$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv91[ebp], esp
	mov	ecx, DWORD PTR __acp$[ebp]
	push	ecx
	mov	edx, DWORD PTR __convert$[ebp]
	push	edx
	mov	eax, DWORD PTR __lpw$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv91[ebp]
	push	ecx
	call	?AtlW2AHelper@@YGPADPADPBGHI@Z		; AtlW2AHelper
	mov	DWORD PTR tv94[ebp], eax
$L184178:
	mov	esi, esp
	mov	edx, DWORD PTR tv79[ebp]
	push	edx
	mov	eax, DWORD PTR tv94[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcmpiA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 251  : }

	lea	esp, DWORD PTR [ebp-36]
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?lstrcmpiWFake@ATL@@YGHPBG0@Z ENDP			; ATL::lstrcmpiWFake
_TEXT	ENDS
PUBLIC	?CharLowerWFake@ATL@@YGPAGPAG@Z			; ATL::CharLowerWFake
EXTRN	__imp__CharLowerW@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharLowerWThunk@ATL@@YGPAGPAG@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?CharLowerWThunk@ATL@@YGPAGPAG@Z PROC NEAR		; ATL::CharLowerWThunk, COMDAT

; 273  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 274  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCharLowerW), CharLowerWFake, ::CharLowerW);

	mov	eax, DWORD PTR __imp__CharLowerW@4
	push	eax
	push	OFFSET FLAT:?CharLowerWFake@ATL@@YGPAGPAG@Z ; ATL::CharLowerWFake
	push	OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+12
	call	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
	add	esp, 12					; 0000000cH

; 275  : 
; 276  : 	return _strthunks.pfnCharLowerW(psz);

	mov	esi, esp
	mov	ecx, DWORD PTR _psz$[ebp]
	push	ecx
	call	DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 277  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CharLowerWThunk@ATL@@YGPAGPAG@Z ENDP			; ATL::CharLowerWThunk
_TEXT	ENDS
PUBLIC	?AtlA2WHelper@@YGPAGPAGPBDHI@Z			; AtlA2WHelper
EXTRN	__imp__CharLowerA@4:NEAR
EXTRN	__imp__lstrlenA@4:NEAR
EXTRN	_wcscpy:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharLowerWFake@ATL@@YGPAGPAG@Z
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv94 = -32						; size = 4
tv75 = -28						; size = 4
tv78 = -24						; size = 4
_pszA$ = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz$ = 8						; size = 4
?CharLowerWFake@ATL@@YGPAGPAG@Z PROC NEAR		; ATL::CharLowerWFake, COMDAT

; 261  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 262  : 	USES_CONVERSION;

	mov	DWORD PTR __convert$[ebp], 0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	mov	DWORD PTR __acp$[ebp], eax
	mov	DWORD PTR __lpw$[ebp], 0
	mov	DWORD PTR __lpa$[ebp], 0

; 263  : 	LPSTR pszA;
; 264  : 
; 265  : 	pszA = W2A(psz);

	mov	eax, DWORD PTR _psz$[ebp]
	mov	DWORD PTR __lpw$[ebp], eax
	cmp	DWORD PTR __lpw$[ebp], 0
	jne	SHORT $L184183
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $L184184
$L184183:
	mov	esi, esp
	mov	ecx, DWORD PTR __lpw$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	edx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __convert$[ebp], edx
	mov	eax, DWORD PTR __convert$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv75[ebp], esp
	mov	eax, DWORD PTR __acp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __convert$[ebp]
	push	ecx
	mov	edx, DWORD PTR __lpw$[ebp]
	push	edx
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	call	?AtlW2AHelper@@YGPADPADPBGHI@Z		; AtlW2AHelper
	mov	DWORD PTR tv78[ebp], eax
$L184184:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _pszA$[ebp], ecx

; 266  : 	::CharLowerA(pszA);

	mov	esi, esp
	mov	edx, DWORD PTR _pszA$[ebp]
	push	edx
	call	DWORD PTR __imp__CharLowerA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 267  : 	wcscpy(psz, A2W(pszA));

	mov	eax, DWORD PTR _pszA$[ebp]
	mov	DWORD PTR __lpa$[ebp], eax
	cmp	DWORD PTR __lpa$[ebp], 0
	jne	SHORT $L184185
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $L184186
$L184185:
	mov	esi, esp
	mov	ecx, DWORD PTR __lpa$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR __convert$[ebp], eax
	mov	eax, DWORD PTR __convert$[ebp]
	shl	eax, 1
	add	eax, 3
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv90[ebp], esp
	mov	edx, DWORD PTR __acp$[ebp]
	push	edx
	mov	eax, DWORD PTR __convert$[ebp]
	push	eax
	mov	ecx, DWORD PTR __lpa$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv90[ebp]
	push	edx
	call	?AtlA2WHelper@@YGPAGPAGPBDHI@Z		; AtlA2WHelper
	mov	DWORD PTR tv94[ebp], eax
$L184186:
	mov	eax, DWORD PTR tv94[ebp]
	push	eax
	mov	ecx, DWORD PTR _psz$[ebp]
	push	ecx
	call	_wcscpy
	add	esp, 8

; 268  : 
; 269  : 	return psz;

	mov	eax, DWORD PTR _psz$[ebp]

; 270  : }

	lea	esp, DWORD PTR [ebp-40]
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?CharLowerWFake@ATL@@YGPAGPAG@Z ENDP			; ATL::CharLowerWFake
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_lpw$ = 8						; size = 4
_lpa$ = 12						; size = 4
_nChars$ = 16						; size = 4
_acp$ = 20						; size = 4
?AtlA2WHelper@@YGPAGPAGPBDHI@Z PROC NEAR		; AtlA2WHelper, COMDAT

; 554  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 555  : 	ATLASSERT(lpa != NULL);

	cmp	DWORD PTR _lpa$[ebp], 0
	jne	SHORT $L184189
	push	OFFSET FLAT:??_C@_08DMHHBMMN@lpa?5?$CB?$DN?50?$AA@
	push	0
	push	555					; 0000022bH
	push	OFFSET FLAT:??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L184189
	int	3
$L184189:

; 556  : 	ATLASSERT(lpw != NULL);

	cmp	DWORD PTR _lpw$[ebp], 0
	jne	SHORT $L184190
	push	OFFSET FLAT:??_C@_08DIHJLFDJ@lpw?5?$CB?$DN?50?$AA@
	push	0
	push	556					; 0000022cH
	push	OFFSET FLAT:??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L184190
	int	3
$L184190:

; 557  : 	if (lpw == NULL || lpa == NULL)

	cmp	DWORD PTR _lpw$[ebp], 0
	je	SHORT $L75944
	cmp	DWORD PTR _lpa$[ebp], 0
	jne	SHORT $L75943
$L75944:

; 558  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L75937
$L75943:

; 559  : 	// verify that no illegal character present
; 560  : 	// since lpw was allocated based on the size of lpa
; 561  : 	// don't worry about the number of chars
; 562  : 	lpw[0] = '\0';

	mov	edx, DWORD PTR _lpw$[ebp]
	mov	WORD PTR [edx], 0

; 563  : 	int ret = MultiByteToWideChar(acp, 0, lpa, -1, lpw, nChars);

	mov	esi, esp
	mov	eax, DWORD PTR _nChars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpw$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _lpa$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _acp$[ebp]
	push	eax
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 564  : 	if(ret == 0)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $L75946

; 565  : 	{
; 566  : 		ATLASSERT(FALSE);

	xor	ecx, ecx
	jne	SHORT $L184191
	push	OFFSET FLAT:??_C@_01GBGANLPD@0?$AA@
	push	0
	push	566					; 00000236H
	push	OFFSET FLAT:??_C@_0FA@OHHMODBN@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L184191
	int	3
$L184191:

; 567  : 		return NULL;

	xor	eax, eax
	jmp	SHORT $L75937
$L75946:

; 568  : 	}		
; 569  : 	return lpw;

	mov	eax, DWORD PTR _lpw$[ebp]
$L75937:

; 570  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AtlA2WHelper@@YGPAGPAGPBDHI@Z ENDP			; AtlA2WHelper
_TEXT	ENDS
PUBLIC	?CharUpperWFake@ATL@@YGPAGPAG@Z			; ATL::CharUpperWFake
EXTRN	__imp__CharUpperW@4:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?CharUpperWThunk@ATL@@YGPAGPAG@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?CharUpperWThunk@ATL@@YGPAGPAG@Z PROC NEAR		; ATL::CharUpperWThunk, COMDAT

; 292  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 293  : 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCharUpperW), CharUpperWFake, ::CharUpperW);

	mov	eax, DWORD PTR __imp__CharUpperW@4
	push	eax
	push	OFFSET FLAT:?CharUpperWFake@ATL@@YGPAGPAG@Z ; ATL::CharUpperWFake
	push	OFFSET FLAT:?_strthunks@ATL@@3U_AtlStringThunks@1@A+16
	call	?_AtlInstallStringThunk@ATL@@YAXPAPAXPAX1@Z ; ATL::_AtlInstallStringThunk
	add	esp, 12					; 0000000cH

; 294  : 
; 295  : 	return _strthunks.pfnCharUpperW(psz);

	mov	esi, esp
	mov	ecx, DWORD PTR _psz$[ebp]
	push	ecx
	call	DWORD PTR ?_strthunks@ATL@@3U_AtlStringThunks@1@A+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 296  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?CharUpperWThunk@ATL@@YGPAGPAG@Z ENDP			; ATL::CharUpperWThunk
_TEXT	ENDS
EXTRN	__imp__CharUpperA@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CharUpperWFake@ATL@@YGPAGPAG@Z
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv94 = -32						; size = 4
tv75 = -28						; size = 4
tv78 = -24						; size = 4
_pszA$ = -20						; size = 4
__lpa$ = -16						; size = 4
__lpw$ = -12						; size = 4
__acp$ = -8						; size = 4
__convert$ = -4						; size = 4
_psz$ = 8						; size = 4
?CharUpperWFake@ATL@@YGPAGPAG@Z PROC NEAR		; ATL::CharUpperWFake, COMDAT

; 280  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 281  : 	USES_CONVERSION;

	mov	DWORD PTR __convert$[ebp], 0
	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	mov	DWORD PTR __acp$[ebp], eax
	mov	DWORD PTR __lpw$[ebp], 0
	mov	DWORD PTR __lpa$[ebp], 0

; 282  : 	LPSTR pszA;
; 283  : 
; 284  : 	pszA = W2A(psz);

	mov	eax, DWORD PTR _psz$[ebp]
	mov	DWORD PTR __lpw$[ebp], eax
	cmp	DWORD PTR __lpw$[ebp], 0
	jne	SHORT $L184196
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $L184197
$L184196:
	mov	esi, esp
	mov	ecx, DWORD PTR __lpw$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	lea	edx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __convert$[ebp], edx
	mov	eax, DWORD PTR __convert$[ebp]
	add	eax, 3
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv75[ebp], esp
	mov	eax, DWORD PTR __acp$[ebp]
	push	eax
	mov	ecx, DWORD PTR __convert$[ebp]
	push	ecx
	mov	edx, DWORD PTR __lpw$[ebp]
	push	edx
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	call	?AtlW2AHelper@@YGPADPADPBGHI@Z		; AtlW2AHelper
	mov	DWORD PTR tv78[ebp], eax
$L184197:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _pszA$[ebp], ecx

; 285  : 	::CharUpperA(pszA);

	mov	esi, esp
	mov	edx, DWORD PTR _pszA$[ebp]
	push	edx
	call	DWORD PTR __imp__CharUpperA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 286  : 	wcscpy(psz, A2W(pszA));

	mov	eax, DWORD PTR _pszA$[ebp]
	mov	DWORD PTR __lpa$[ebp], eax
	cmp	DWORD PTR __lpa$[ebp], 0
	jne	SHORT $L184198
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $L184199
$L184198:
	mov	esi, esp
	mov	ecx, DWORD PTR __lpa$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR __convert$[ebp], eax
	mov	eax, DWORD PTR __convert$[ebp]
	shl	eax, 1
	add	eax, 3
	and	eax, -4					; fffffffcH
	call	__alloca_probe
	mov	DWORD PTR tv90[ebp], esp
	mov	edx, DWORD PTR __acp$[ebp]
	push	edx
	mov	eax, DWORD PTR __convert$[ebp]
	push	eax
	mov	ecx, DWORD PTR __lpa$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv90[ebp]
	push	edx
	call	?AtlA2WHelper@@YGPAGPAGPBDHI@Z		; AtlA2WHelper
	mov	DWORD PTR tv94[ebp], eax
$L184199:
	mov	eax, DWORD PTR tv94[ebp]
	push	eax
	mov	ecx, DWORD PTR _psz$[ebp]
	push	ecx
	call	_wcscpy
	add	esp, 8

; 287  : 
; 288  : 	return psz;

	mov	eax, DWORD PTR _psz$[ebp]

; 289  : }

	lea	esp, DWORD PTR [ebp-40]
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?CharUpperWFake@ATL@@YGPAGPAG@Z ENDP			; ATL::CharUpperWFake
_TEXT	ENDS
PUBLIC	?GetTimeDifferenceInMinutes@@YAJPAU_SYSTEMTIME@@0@Z ; GetTimeDifferenceInMinutes
EXTRN	?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ:NEAR	; ATL::CTimeSpan::GetTotalMinutes
EXTRN	??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z:NEAR	; ATL::CTime::CTime
EXTRN	??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z:NEAR	; ATL::CTime::operator-
; Function compile flags: /Odt /RTCsu
; File c:\activex\xmlsign\crlcache.cpp
_TEXT	SEGMENT
_timeDiff$ = -44					; size = 8
_fetchCTime$ = -28					; size = 8
_curCTime$ = -12					; size = 8
_curTime$ = 8						; size = 4
_fetchTime$ = 12					; size = 4
?GetTimeDifferenceInMinutes@@YAJPAU_SYSTEMTIME@@0@Z PROC NEAR ; GetTimeDifferenceInMinutes

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 63   : 	CTime curCTime(*curTime, -1);

	push	-1
	mov	eax, DWORD PTR _curTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _curCTime$[ebp]
	call	??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z	; ATL::CTime::CTime

; 64   : 	CTime fetchCTime(*fetchTime, -1);

	push	-1
	mov	ecx, DWORD PTR _fetchTime$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _fetchCTime$[ebp]
	call	??0CTime@ATL@@QAE@ABU_SYSTEMTIME@@H@Z	; ATL::CTime::CTime

; 65   : 	CTimeSpan timeDiff = curCTime - fetchCTime;

	mov	edx, DWORD PTR _fetchCTime$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _fetchCTime$[ebp]
	push	eax
	lea	ecx, DWORD PTR _timeDiff$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curCTime$[ebp]
	call	??GCTime@ATL@@QBE?AVCTimeSpan@1@V01@@Z	; ATL::CTime::operator-

; 66   : 
; 67   : 	return timeDiff.GetTotalMinutes();

	lea	ecx, DWORD PTR _timeDiff$[ebp]
	call	?GetTotalMinutes@CTimeSpan@ATL@@QBE_JXZ	; ATL::CTimeSpan::GetTotalMinutes

; 68   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184206
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L184206:
	DD	3
	DD	$L184205
$L184205:
	DD	-12					; fffffff4H
	DD	8
	DD	$L184202
	DD	-28					; ffffffe4H
	DD	8
	DD	$L184203
	DD	-44					; ffffffd4H
	DD	8
	DD	$L184204
$L184204:
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$L184203:
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	67					; 00000043H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$L184202:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	67					; 00000043H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?GetTimeDifferenceInMinutes@@YAJPAU_SYSTEMTIME@@0@Z ENDP ; GetTimeDifferenceInMinutes
_TEXT	ENDS
PUBLIC	?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::CreateInstance
PUBLIC	??0CRLCache@@QAE@PAGPAU_GLOBAL_SIG@@@Z		; CRLCache::CRLCache
PUBLIC	__GUID_00000514_0000_0010_8000_00aa006d2ea4
PUBLIC	??_R0?AV_com_error@@@8				; _com_error `RTTI Type Descriptor'
PUBLIC	??0_bstr_t@@QAE@PBD@Z				; _bstr_t::_bstr_t
PUBLIC	??0_bstr_t@@QAE@PBG@Z				; _bstr_t::_bstr_t
PUBLIC	??0_bstr_t@@QAE@ABV_variant_t@@@Z		; _bstr_t::_bstr_t
PUBLIC	??1_bstr_t@@QAE@XZ				; _bstr_t::~_bstr_t
PUBLIC	??H_bstr_t@@QBE?AV0@ABV0@@Z			; _bstr_t::operator+
PUBLIC	??B_bstr_t@@QBEPADXZ				; _bstr_t::operator char *
PUBLIC	?Error@_com_error@@QBEJXZ			; _com_error::Error
PUBLIC	?Description@_com_error@@QBE?AV_bstr_t@@XZ	; _com_error::Description
PUBLIC	?Source@_com_error@@QBE?AV_bstr_t@@XZ		; _com_error::Source
PUBLIC	?ErrorMessage@_com_error@@QBEPBDXZ		; _com_error::ErrorMessage
PUBLIC	??0_variant_t@@QAE@JG@Z				; _variant_t::_variant_t
PUBLIC	??1_variant_t@@QAE@XZ				; _variant_t::~_variant_t
PUBLIC	?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z ; Connection15::PutConnectionString
PUBLIC	?Close@Connection15@@QAEJXZ			; Connection15::Close
PUBLIC	?Open@Connection15@@QAEJV_bstr_t@@00J@Z		; Connection15::Open
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
EXTRN	_setErrorWithDescr:NEAR
EXTRN	?_com_issue_error@@YGXJ@Z:NEAR			; _com_issue_error
EXTRN	__imp__SysAllocString@4:NEAR
EXTRN	__imp__CoInitialize@4:NEAR
xdata$x	SEGMENT
$T184252 DD	0ffffffffH
	DD	FLAT:$L184225
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:$L184226
	DD	01H
	DD	FLAT:$L184227
	DD	03H
	DD	FLAT:$L184228
	DD	04H
	DD	FLAT:$L184229
	DD	00H
	DD	00H
	DD	06H
	DD	FLAT:$L184230
	DD	07H
	DD	FLAT:$L184231
	DD	08H
	DD	FLAT:$L184232
	DD	09H
	DD	FLAT:$L184233
	DD	0aH
	DD	FLAT:$L184234
	DD	0bH
	DD	FLAT:$L184235
	DD	0cH
	DD	FLAT:$L184236
	DD	0dH
	DD	FLAT:$L184237
	DD	0eH
	DD	FLAT:$L184238
	DD	0fH
	DD	FLAT:$L184239
	DD	010H
	DD	FLAT:$L184240
	DD	011H
	DD	FLAT:$L184241
	DD	012H
	DD	FLAT:$L184242
	DD	07H
	DD	FLAT:$L184242
	DD	014H
	DD	FLAT:$L184241
	DD	015H
	DD	FLAT:$L184240
	DD	016H
	DD	FLAT:$L184239
	DD	017H
	DD	FLAT:$L184238
	DD	018H
	DD	FLAT:$L184237
	DD	019H
	DD	FLAT:$L184236
	DD	01aH
	DD	FLAT:$L184235
	DD	01bH
	DD	FLAT:$L184234
	DD	01cH
	DD	FLAT:$L184233
	DD	01dH
	DD	FLAT:$L184232
$T184254 DD	08H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffffd4H
	DD	FLAT:$L184224
$T184253 DD	01H
	DD	05H
	DD	01eH
	DD	01H
	DD	FLAT:$T184254
$T184244 DD	019930520H
	DD	01fH
	DD	FLAT:$T184252
	DD	01H
	DD	FLAT:$T184253
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __GUID_00000514_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT
__GUID_00000514_0000_0010_8000_00aa006d2ea4 DD 0514H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	06dH
	DB	02eH
	DB	0a4H
CONST	ENDS
;	COMDAT ??_R0?AV_com_error@@@8
_DATA	SEGMENT
??_R0?AV_com_error@@@8 DD FLAT:??_7type_info@@6B@	; _com_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_com_error@@', 00H
; Function compile flags: /Odt /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
tv287 = -272						; size = 4
tv303 = -268						; size = 4
tv285 = -264						; size = 4
tv302 = -260						; size = 4
tv283 = -256						; size = 4
tv301 = -252						; size = 4
tv281 = -248						; size = 4
tv300 = -244						; size = 4
tv279 = -240						; size = 4
tv299 = -236						; size = 4
tv277 = -232						; size = 4
tv298 = -228						; size = 4
tv275 = -224						; size = 4
tv297 = -220						; size = 4
tv273 = -216						; size = 4
tv296 = -212						; size = 4
tv271 = -208						; size = 4
tv177 = -204						; size = 4
tv269 = -200						; size = 4
tv190 = -196						; size = 4
tv295 = -192						; size = 4
tv294 = -188						; size = 4
tv265 = -184						; size = 4
tv293 = -180						; size = 4
tv262 = -176						; size = 4
tv292 = -172						; size = 4
tv259 = -168						; size = 4
tv291 = -164						; size = 4
tv290 = -160						; size = 4
tv256 = -156						; size = 4
tv65 = -152						; size = 4
$T184222 = -148						; size = 4
$T184221 = -144						; size = 4
$T184220 = -140						; size = 4
$T184219 = -136						; size = 4
$T184218 = -132						; size = 4
$T184217 = -128						; size = 4
$T184216 = -124						; size = 4
$T184215 = -120						; size = 4
$T184214 = -116						; size = 16
$T184213 = -100						; size = 4
$T184212 = -96						; size = 4
$T184211 = -92						; size = 4
$T184210 = -88						; size = 4
$T184209 = -84						; size = 4
$T184208 = -80						; size = 4
_errorDetail$182611 = -76				; size = 4
_bs$182594 = -68					; size = 4
_bstrSource$182593 = -56				; size = 4
_e$182590 = -44						; size = 4
__hr$182579 = -36					; size = 4
_spCON$ = -28						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_connStr$ = 8						; size = 4
_SigHandle$ = 12					; size = 4
??0CRLCache@@QAE@PAGPAU_GLOBAL_SIG@@@Z PROC NEAR	; CRLCache::CRLCache
; _this$ = ecx

; 70   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CRLCache@@QAE@PAGPAU_GLOBAL_SIG@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 71   : #ifdef NSS
; 72   : 	// not implemented
; 73   : #else
; 74   :     _ConnectionPtr  spCON;

	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 75   : 	SecureXMLDbConnectionString = SysAllocString(connStr);

	mov	esi, esp
	mov	eax, DWORD PTR _connStr$[ebp]
	push	eax
	call	DWORD PTR __imp__SysAllocString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 76   : 	crlTimeoutInMinutes = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 77   : 	CoInitialize(NULL);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__CoInitialize@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   : 
; 79   :     try{

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 80   :         CREATEiNSTANCE(spCON,Connection);

	push	23					; 00000017H
	push	0
	push	OFFSET FLAT:__GUID_00000514_0000_0010_8000_00aa006d2ea4
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::CreateInstance
	mov	DWORD PTR __hr$182579[ebp], eax
	cmp	DWORD PTR __hr$182579[ebp], 0
	jge	SHORT $L182582
	mov	eax, DWORD PTR __hr$182579[ebp]
	push	eax
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L182582:

; 81   :         spCON->ConnectionString = SecureXMLDbConnectionString;

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184208[ebp], esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??0_bstr_t@@QAE@PBG@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv256[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv290[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR tv290[ebp]
	call	?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z ; Connection15::PutConnectionString

; 82   :         spCON->Open( "", "", "", -1 );

	push	-1
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184209[ebp], esp
	push	OFFSET FLAT:$SG182587
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv291[ebp], eax
	mov	edx, DWORD PTR tv291[ebp]
	mov	DWORD PTR tv259[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184210[ebp], esp
	push	OFFSET FLAT:$SG182588
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv292[ebp], eax
	mov	eax, DWORD PTR tv292[ebp]
	mov	DWORD PTR tv262[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184211[ebp], esp
	push	OFFSET FLAT:$SG182589
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv293[ebp], eax
	mov	ecx, DWORD PTR tv293[ebp]
	mov	DWORD PTR tv265[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv294[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR tv294[ebp]
	call	?Open@Connection15@@QAEJV_bstr_t@@00J@Z	; Connection15::Open

; 83   :         spCON->Close();

	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv295[ebp], eax
	mov	ecx, DWORD PTR tv295[ebp]
	call	?Close@Connection15@@QAEJXZ		; Connection15::Close

; 84   : 		CRLCacheInitialized = TRUE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 1
	jmp	$L184223
$L184224:

; 85   : 	}
; 86   :     catch( _com_error &e){
; 87   :         _bstr_t bstrSource(e.Source());

	lea	eax, DWORD PTR _bstrSource$182593[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$182590[ebp]
	call	?Source@_com_error@@QBE?AV_bstr_t@@XZ	; _com_error::Source
	mov	BYTE PTR __$EHRec$[ebp+12], 7

; 88   :         _bstr_t bs =  _bstr_t(" Error: ") + _bstr_t(e.Error()) + _bstr_t(" Msg: ") 
; 89   :             + _bstr_t(e.ErrorMessage()) + _bstr_t(" Description: ") 
; 90   :             + _bstr_t(e.Description());

	push	3
	mov	ecx, DWORD PTR _e$182590[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	lea	ecx, DWORD PTR $T184214[ebp]
	call	??0_variant_t@@QAE@JG@Z			; _variant_t::_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR $T184222[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$182590[ebp]
	call	?Description@_com_error@@QBE?AV_bstr_t@@XZ ; _com_error::Description
	mov	DWORD PTR tv190[ebp], eax
	mov	edx, DWORD PTR tv190[ebp]
	mov	DWORD PTR tv269[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	push	OFFSET FLAT:$SG182610
	lea	ecx, DWORD PTR $T184220[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv177[ebp], eax
	mov	eax, DWORD PTR tv177[ebp]
	mov	DWORD PTR tv271[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	mov	ecx, DWORD PTR _e$182590[ebp]
	call	?ErrorMessage@_com_error@@QBEPBDXZ	; _com_error::ErrorMessage
	push	eax
	lea	ecx, DWORD PTR $T184218[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv296[ebp], eax
	mov	ecx, DWORD PTR tv296[ebp]
	mov	DWORD PTR tv273[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	push	OFFSET FLAT:$SG182609
	lea	ecx, DWORD PTR $T184216[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv297[ebp], eax
	mov	edx, DWORD PTR tv297[ebp]
	mov	DWORD PTR tv275[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	eax, DWORD PTR $T184214[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184213[ebp]
	call	??0_bstr_t@@QAE@ABV_variant_t@@@Z	; _bstr_t::_bstr_t
	mov	DWORD PTR tv298[ebp], eax
	mov	ecx, DWORD PTR tv298[ebp]
	mov	DWORD PTR tv277[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	push	OFFSET FLAT:$SG182608
	lea	ecx, DWORD PTR $T184212[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv299[ebp], eax
	mov	edx, DWORD PTR tv299[ebp]
	mov	DWORD PTR tv279[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	mov	eax, DWORD PTR tv277[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184215[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv279[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv300[ebp], eax
	mov	edx, DWORD PTR tv300[ebp]
	mov	DWORD PTR tv281[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
	mov	eax, DWORD PTR tv275[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184217[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv281[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv301[ebp], eax
	mov	edx, DWORD PTR tv301[ebp]
	mov	DWORD PTR tv283[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	mov	eax, DWORD PTR tv273[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184219[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv283[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv302[ebp], eax
	mov	edx, DWORD PTR tv302[ebp]
	mov	DWORD PTR tv285[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	mov	eax, DWORD PTR tv271[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184221[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv285[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv303[ebp], eax
	mov	edx, DWORD PTR tv303[ebp]
	mov	DWORD PTR tv287[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	mov	eax, DWORD PTR tv269[ebp]
	push	eax
	lea	ecx, DWORD PTR _bs$182594[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv287[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 30		; 0000001eH
	lea	ecx, DWORD PTR $T184221[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR $T184219[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
	lea	ecx, DWORD PTR $T184217[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	lea	ecx, DWORD PTR $T184215[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	ecx, DWORD PTR $T184212[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	lea	ecx, DWORD PTR $T184213[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 24		; 00000018H
	lea	ecx, DWORD PTR $T184216[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 23		; 00000017H
	lea	ecx, DWORD PTR $T184218[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR $T184220[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR $T184222[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR $T184214[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t

; 91   : 		CRLCacheInitialized = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 92   : 		char *errorDetail = (char *)bs;

	lea	ecx, DWORD PTR _bs$182594[ebp]
	call	??B_bstr_t@@QBEPADXZ			; _bstr_t::operator char *
	mov	DWORD PTR _errorDetail$182611[ebp], eax

; 93   : 		setErrorWithDescr(SigHandle, ADO_ERROR, (unsigned char *)errorDetail);

	mov	eax, DWORD PTR _errorDetail$182611[ebp]
	push	eax
	push	122					; 0000007aH
	mov	ecx, DWORD PTR _SigHandle$[ebp]
	push	ecx
	call	_setErrorWithDescr
	add	esp, 12					; 0000000cH

; 94   :     }

	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _bs$182594[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	lea	ecx, DWORD PTR _bstrSource$182593[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	eax, $L184223
	ret	0
$L184223:

; 95   : #endif
; 96   : }

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184251
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L184251:
	DD	4
	DD	$L184250
$L184250:
	DD	-28					; ffffffe4H
	DD	4
	DD	$L184245
	DD	-44					; ffffffd4H
	DD	4
	DD	$L184246
	DD	-56					; ffffffc8H
	DD	4
	DD	$L184247
	DD	-68					; ffffffbcH
	DD	4
	DD	$L184248
$L184248:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$L184247:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$L184246:
	DB	101					; 00000065H
	DB	0
$L184245:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	79					; 0000004fH
	DB	78					; 0000004eH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
$L184225:
	lea	ecx, DWORD PTR _spCON$[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
$L184226:
	mov	ecx, DWORD PTR $T184208[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184227:
	mov	ecx, DWORD PTR $T184209[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184228:
	mov	ecx, DWORD PTR $T184210[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184229:
	mov	ecx, DWORD PTR $T184211[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184230:
	lea	ecx, DWORD PTR _bstrSource$182593[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184231:
	lea	ecx, DWORD PTR $T184214[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184232:
	lea	ecx, DWORD PTR $T184222[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184233:
	lea	ecx, DWORD PTR $T184220[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184234:
	lea	ecx, DWORD PTR $T184218[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184235:
	lea	ecx, DWORD PTR $T184216[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184236:
	lea	ecx, DWORD PTR $T184213[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184237:
	lea	ecx, DWORD PTR $T184212[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184238:
	lea	ecx, DWORD PTR $T184215[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184239:
	lea	ecx, DWORD PTR $T184217[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184240:
	lea	ecx, DWORD PTR $T184219[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184241:
	lea	ecx, DWORD PTR $T184221[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184242:
	lea	ecx, DWORD PTR _bs$182594[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
__ehhandler$??0CRLCache@@QAE@PAGPAU_GLOBAL_SIG@@@Z:
	mov	eax, OFFSET FLAT:$T184244
	jmp	___CxxFrameHandler
text$x	ENDS
??0CRLCache@@QAE@PAGPAU_GLOBAL_SIG@@@Z ENDP		; CRLCache::CRLCache
PUBLIC	??0Data_t@_bstr_t@@QAE@PBD@Z			; _bstr_t::Data_t::Data_t
PUBLIC	??2Data_t@_bstr_t@@SAPAXI@Z			; _bstr_t::Data_t::operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comutil.h
xdata$x	SEGMENT
$T184264 DD	0ffffffffH
	DD	FLAT:$L184260
$T184262 DD	019930520H
	DD	01H
	DD	FLAT:$T184264
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT
tv72 = -28						; size = 4
$T184257 = -24						; size = 4
$T184256 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0_bstr_t@@QAE@PBD@Z PROC NEAR				; _bstr_t::_bstr_t, COMDAT
; _this$ = ecx

; 251  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_bstr_t@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2Data_t@_bstr_t@@SAPAXI@Z		; _bstr_t::Data_t::operator new
	add	esp, 4
	mov	DWORD PTR $T184257[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T184257[ebp], 0
	je	SHORT $L184258
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T184257[ebp]
	call	??0Data_t@_bstr_t@@QAE@PBD@Z		; _bstr_t::Data_t::Data_t
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $L184259
$L184258:
	mov	DWORD PTR tv72[ebp], 0
$L184259:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T184256[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T184256[ebp]
	mov	DWORD PTR [edx], eax

; 252  :     if (m_Data == NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $L161208

; 253  :         _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L161208:

; 254  :     }
; 255  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184260:
	mov	eax, DWORD PTR $T184257[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0_bstr_t@@QAE@PBD@Z:
	mov	eax, OFFSET FLAT:$T184262
	jmp	___CxxFrameHandler
text$x	ENDS
??0_bstr_t@@QAE@PBD@Z ENDP				; _bstr_t::_bstr_t
PUBLIC	??0Data_t@_bstr_t@@QAE@PBG@Z			; _bstr_t::Data_t::Data_t
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184277 DD	0ffffffffH
	DD	FLAT:$L184273
$T184275 DD	019930520H
	DD	01H
	DD	FLAT:$T184277
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT
tv72 = -28						; size = 4
$T184270 = -24						; size = 4
$T184269 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??0_bstr_t@@QAE@PBG@Z PROC NEAR				; _bstr_t::_bstr_t, COMDAT
; _this$ = ecx

; 261  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_bstr_t@@QAE@PBG@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2Data_t@_bstr_t@@SAPAXI@Z		; _bstr_t::Data_t::operator new
	add	esp, 4
	mov	DWORD PTR $T184270[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T184270[ebp], 0
	je	SHORT $L184271
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T184270[ebp]
	call	??0Data_t@_bstr_t@@QAE@PBG@Z		; _bstr_t::Data_t::Data_t
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $L184272
$L184271:
	mov	DWORD PTR tv72[ebp], 0
$L184272:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T184269[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T184269[ebp]
	mov	DWORD PTR [edx], eax

; 262  :     if (m_Data == NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $L161218

; 263  :         _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L161218:

; 264  :     }
; 265  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184273:
	mov	eax, DWORD PTR $T184270[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0_bstr_t@@QAE@PBG@Z:
	mov	eax, OFFSET FLAT:$T184275
	jmp	___CxxFrameHandler
text$x	ENDS
??0_bstr_t@@QAE@PBG@Z ENDP				; _bstr_t::_bstr_t
PUBLIC	?_Free@_bstr_t@@AAEXXZ				; _bstr_t::_Free
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_bstr_t@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_bstr_t@@QAE@XZ PROC NEAR				; _bstr_t::~_bstr_t, COMDAT
; _this$ = ecx

; 281  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 282  :     _Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free@_bstr_t@@AAEXXZ			; _bstr_t::_Free

; 283  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_bstr_t@@QAE@XZ ENDP					; _bstr_t::~_bstr_t
_TEXT	ENDS
PUBLIC	??0_bstr_t@@QAE@ABV0@@Z				; _bstr_t::_bstr_t
PUBLIC	??Y_bstr_t@@QAEAAV0@ABV0@@Z			; _bstr_t::operator+=
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184294 DD	0ffffffffH
	DD	FLAT:$L184284
$T184289 DD	019930520H
	DD	01H
	DD	FLAT:$T184294
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??H_bstr_t@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
$T184286 = -32						; size = 4
_b$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??H_bstr_t@@QBE?AV0@ABV0@@Z PROC NEAR			; _bstr_t::operator+, COMDAT
; _this$ = ecx

; 362  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??H_bstr_t@@QBE?AV0@ABV0@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T184286[ebp], 0

; 363  :     _bstr_t b = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$[ebp]
	call	??0_bstr_t@@QAE@ABV0@@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 364  :     b += s;

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _b$[ebp]
	call	??Y_bstr_t@@QAEAAV0@ABV0@@Z		; _bstr_t::operator+=

; 365  : 
; 366  :     return b;

	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0_bstr_t@@QAE@ABV0@@Z			; _bstr_t::_bstr_t
	mov	eax, DWORD PTR $T184286[ebp]
	or	eax, 1
	mov	DWORD PTR $T184286[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _b$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 367  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184293
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L184293:
	DD	1
	DD	$L184292
$L184292:
	DD	-24					; ffffffe8H
	DD	4
	DD	$L184290
$L184290:
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184284:
	lea	ecx, DWORD PTR _b$[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
__ehhandler$??H_bstr_t@@QBE?AV0@ABV0@@Z:
	mov	eax, OFFSET FLAT:$T184289
	jmp	___CxxFrameHandler
text$x	ENDS
??H_bstr_t@@QBE?AV0@ABV0@@Z ENDP			; _bstr_t::operator+
PUBLIC	?_AddRef@_bstr_t@@AAEXXZ			; _bstr_t::_AddRef
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_bstr_t@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0_bstr_t@@QAE@ABV0@@Z PROC NEAR			; _bstr_t::_bstr_t, COMDAT
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 244  :     _AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_AddRef@_bstr_t@@AAEXXZ		; _bstr_t::_AddRef

; 245  : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_bstr_t@@QAE@ABV0@@Z ENDP				; _bstr_t::_bstr_t
_TEXT	ENDS
PUBLIC	??0Data_t@_bstr_t@@QAE@ABV1@0@Z			; _bstr_t::Data_t::Data_t
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184309 DD	0ffffffffH
	DD	FLAT:$L184305
$T184307 DD	019930520H
	DD	01H
	DD	FLAT:$T184309
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??Y_bstr_t@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv73 = -32						; size = 4
$T184302 = -28						; size = 4
$T184301 = -24						; size = 4
_newData$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??Y_bstr_t@@QAEAAV0@ABV0@@Z PROC NEAR			; _bstr_t::operator+=, COMDAT
; _this$ = ecx

; 346  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??Y_bstr_t@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx

; 347  :     Data_t* newData = new Data_t(*this, s);

	push	12					; 0000000cH
	call	??2Data_t@_bstr_t@@SAPAXI@Z		; _bstr_t::Data_t::operator new
	add	esp, 4
	mov	DWORD PTR $T184302[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T184302[ebp], 0
	je	SHORT $L184303
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T184302[ebp]
	call	??0Data_t@_bstr_t@@QAE@ABV1@0@Z		; _bstr_t::Data_t::Data_t
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $L184304
$L184303:
	mov	DWORD PTR tv73[ebp], 0
$L184304:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T184301[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T184301[ebp]
	mov	DWORD PTR _newData$[ebp], eax

; 348  :     if (newData == NULL) {

	cmp	DWORD PTR _newData$[ebp], 0
	jne	SHORT $L161276

; 349  :         _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error

; 350  :     }
; 351  :     else {

	jmp	SHORT $L161278
$L161276:

; 352  :         _Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free@_bstr_t@@AAEXXZ			; _bstr_t::_Free

; 353  :         m_Data = newData;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newData$[ebp]
	mov	DWORD PTR [ecx], edx
$L161278:

; 354  :     }
; 355  : 
; 356  :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 357  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184305:
	mov	eax, DWORD PTR $T184302[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??Y_bstr_t@@QAEAAV0@ABV0@@Z:
	mov	eax, OFFSET FLAT:$T184307
	jmp	___CxxFrameHandler
text$x	ENDS
??Y_bstr_t@@QAEAAV0@ABV0@@Z ENDP			; _bstr_t::operator+=
PUBLIC	?GetString@Data_t@_bstr_t@@QBEPBDXZ		; _bstr_t::Data_t::GetString
; Function compile flags: /Odt /RTCsu
;	COMDAT ??B_bstr_t@@QBEPADXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
??B_bstr_t@@QBEPADXZ PROC NEAR				; _bstr_t::operator char *, COMDAT
; _this$ = ecx

; 425  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 426  :     return const_cast<char*>((m_Data != NULL) ? m_Data->GetString() : NULL);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L184314
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetString@Data_t@_bstr_t@@QBEPBDXZ	; _bstr_t::Data_t::GetString
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $L184315
$L184314:
	mov	DWORD PTR tv68[ebp], 0
$L184315:
	mov	eax, DWORD PTR tv68[ebp]

; 427  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??B_bstr_t@@QBEPADXZ ENDP				; _bstr_t::operator char *
_TEXT	ENDS
PUBLIC	?AddRef@Data_t@_bstr_t@@QAEKXZ			; _bstr_t::Data_t::AddRef
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_AddRef@_bstr_t@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AddRef@_bstr_t@@AAEXXZ PROC NEAR			; _bstr_t::_AddRef, COMDAT
; _this$ = ecx

; 559  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 560  :     if (m_Data != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L161391

; 561  :         m_Data->AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?AddRef@Data_t@_bstr_t@@QAEKXZ		; _bstr_t::Data_t::AddRef
$L161391:

; 562  :     }
; 563  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_AddRef@_bstr_t@@AAEXXZ ENDP				; _bstr_t::_AddRef
_TEXT	ENDS
PUBLIC	?Release@Data_t@_bstr_t@@QAEKXZ			; _bstr_t::Data_t::Release
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_Free@_bstr_t@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Free@_bstr_t@@AAEXXZ PROC NEAR			; _bstr_t::_Free, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 569  :     if (m_Data != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L161395

; 570  :         m_Data->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Release@Data_t@_bstr_t@@QAEKXZ		; _bstr_t::Data_t::Release

; 571  :         m_Data = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
$L161395:

; 572  :     }
; 573  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free@_bstr_t@@AAEXXZ ENDP				; _bstr_t::_Free
_TEXT	ENDS
EXTRN	?ConvertStringToBSTR@_com_util@@YGPAGPBD@Z:NEAR	; _com_util::ConvertStringToBSTR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0Data_t@_bstr_t@@QAE@PBD@Z PROC NEAR			; _bstr_t::Data_t::Data_t, COMDAT
; _this$ = ecx

; 604  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1

; 605  :     m_wstr = _com_util::ConvertStringToBSTR(s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?ConvertStringToBSTR@_com_util@@YGPAGPBD@Z ; _com_util::ConvertStringToBSTR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 606  : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Data_t@_bstr_t@@QAE@PBD@Z ENDP			; _bstr_t::Data_t::Data_t
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0Data_t@_bstr_t@@QAE@PBG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0Data_t@_bstr_t@@QAE@PBG@Z PROC NEAR			; _bstr_t::Data_t::Data_t, COMDAT
; _this$ = ecx

; 612  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1

; 613  :     m_wstr = ::SysAllocString(s);

	mov	esi, esp
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	DWORD PTR __imp__SysAllocString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 614  : 
; 615  :     if (m_wstr == NULL && s != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $L161411
	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $L161411

; 616  :         _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L161411:

; 617  :     }
; 618  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Data_t@_bstr_t@@QAE@PBG@Z ENDP			; _bstr_t::Data_t::Data_t
_TEXT	ENDS
PUBLIC	??B_bstr_t@@QBEPBGXZ				; _bstr_t::operator unsigned short const *
PUBLIC	?length@_bstr_t@@QBEIXZ				; _bstr_t::length
EXTRN	__imp__SysAllocStringByteLen@8:NEAR
EXTRN	_memcpy:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0Data_t@_bstr_t@@QAE@ABV1@0@Z
_TEXT	SEGMENT
_wstr2$ = -20						; size = 4
_wstr1$ = -16						; size = 4
_l2$ = -12						; size = 4
_l1$ = -8						; size = 4
_this$ = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??0Data_t@_bstr_t@@QAE@ABV1@0@Z PROC NEAR		; _bstr_t::Data_t::Data_t, COMDAT
; _this$ = ecx

; 643  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1

; 644  :     const unsigned int l1 = s1.length();

	mov	ecx, DWORD PTR _s1$[ebp]
	call	?length@_bstr_t@@QBEIXZ			; _bstr_t::length
	mov	DWORD PTR _l1$[ebp], eax

; 645  :     const unsigned int l2 = s2.length();

	mov	ecx, DWORD PTR _s2$[ebp]
	call	?length@_bstr_t@@QBEIXZ			; _bstr_t::length
	mov	DWORD PTR _l2$[ebp], eax

; 646  : 
; 647  :     m_wstr = ::SysAllocStringByteLen(NULL, (l1 + l2) * sizeof(wchar_t));

	mov	edx, DWORD PTR _l1$[ebp]
	add	edx, DWORD PTR _l2$[ebp]
	shl	edx, 1
	mov	esi, esp
	push	edx
	push	0
	call	DWORD PTR __imp__SysAllocStringByteLen@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 648  :     if (m_wstr == NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $L161432

; 649  :         _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error

; 650  :         return;

	jmp	SHORT $L161428
$L161432:

; 651  :     }
; 652  : 
; 653  :     const wchar_t* wstr1 = static_cast<const wchar_t*>(s1);

	mov	ecx, DWORD PTR _s1$[ebp]
	call	??B_bstr_t@@QBEPBGXZ			; _bstr_t::operator unsigned short const *
	mov	DWORD PTR _wstr1$[ebp], eax

; 654  : 
; 655  :     if (wstr1 != NULL) {

	cmp	DWORD PTR _wstr1$[ebp], 0
	je	SHORT $L161436

; 656  :         memcpy(m_wstr, wstr1, (l1 + 1) * sizeof(wchar_t));

	mov	eax, DWORD PTR _l1$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	push	ecx
	mov	edx, DWORD PTR _wstr1$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$L161436:

; 657  :     }
; 658  : 
; 659  :     const wchar_t* wstr2 = static_cast<const wchar_t*>(s2);

	mov	ecx, DWORD PTR _s2$[ebp]
	call	??B_bstr_t@@QBEPBGXZ			; _bstr_t::operator unsigned short const *
	mov	DWORD PTR _wstr2$[ebp], eax

; 660  : 
; 661  :     if (wstr2 != NULL) {

	cmp	DWORD PTR _wstr2$[ebp], 0
	je	SHORT $L161428

; 662  :         memcpy(m_wstr + l1, wstr2, (l2 + 1) * sizeof(wchar_t));

	mov	edx, DWORD PTR _l2$[ebp]
	lea	eax, DWORD PTR [edx+edx+2]
	push	eax
	mov	ecx, DWORD PTR _wstr2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _l1$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$L161428:

; 663  :     }
; 664  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Data_t@_bstr_t@@QAE@ABV1@0@Z ENDP			; _bstr_t::Data_t::Data_t
_TEXT	ENDS
PUBLIC	?GetWString@Data_t@_bstr_t@@QAEAAPAGXZ		; _bstr_t::Data_t::GetWString
; Function compile flags: /Odt /RTCsu
;	COMDAT ??B_bstr_t@@QBEPBGXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
??B_bstr_t@@QBEPBGXZ PROC NEAR				; _bstr_t::operator unsigned short const *, COMDAT
; _this$ = ecx

; 404  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 405  :     return (m_Data != NULL) ? m_Data->GetWString() : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L184328
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetWString@Data_t@_bstr_t@@QAEAAPAGXZ	; _bstr_t::Data_t::GetWString
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $L184329
$L184328:
	mov	DWORD PTR tv68[ebp], 0
$L184329:
	mov	eax, DWORD PTR tv68[ebp]

; 406  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??B_bstr_t@@QBEPBGXZ ENDP				; _bstr_t::operator unsigned short const *
_TEXT	ENDS
PUBLIC	?Length@Data_t@_bstr_t@@QBEIXZ			; _bstr_t::Data_t::Length
; Function compile flags: /Odt /RTCsu
;	COMDAT ?length@_bstr_t@@QBEIXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?length@_bstr_t@@QBEIXZ PROC NEAR			; _bstr_t::length, COMDAT
; _this$ = ecx

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 487  :     return (m_Data != NULL) ? m_Data->Length() : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L184332
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Length@Data_t@_bstr_t@@QBEIXZ		; _bstr_t::Data_t::Length
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $L184333
$L184332:
	mov	DWORD PTR tv68[ebp], 0
$L184333:
	mov	eax, DWORD PTR tv68[ebp]

; 488  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@_bstr_t@@QBEIXZ ENDP				; _bstr_t::length
_TEXT	ENDS
EXTRN	__imp__InterlockedIncrement@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?AddRef@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AddRef@Data_t@_bstr_t@@QAEKXZ PROC NEAR		; _bstr_t::Data_t::AddRef, COMDAT
; _this$ = ecx

; 673  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 674  :     InterlockedIncrement(reinterpret_cast<long*>(&m_RefCount));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedIncrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 675  :     return m_RefCount;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 676  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AddRef@Data_t@_bstr_t@@QAEKXZ ENDP			; _bstr_t::Data_t::AddRef
_TEXT	ENDS
PUBLIC	??_GData_t@_bstr_t@@AAEPAXI@Z			; _bstr_t::Data_t::`scalar deleting destructor'
EXTRN	__imp__InterlockedDecrement@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Release@Data_t@_bstr_t@@QAEKXZ
_TEXT	SEGMENT
tv72 = -16						; size = 4
$T184339 = -12						; size = 4
$T184338 = -8						; size = 4
_this$ = -4						; size = 4
?Release@Data_t@_bstr_t@@QAEKXZ PROC NEAR		; _bstr_t::Data_t::Release, COMDAT
; _this$ = ecx

; 679  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 680  :     if (!InterlockedDecrement(reinterpret_cast<long*>(&m_RefCount))) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__InterlockedDecrement@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $L161450

; 681  :         delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T184339[ebp], ecx
	mov	edx, DWORD PTR $T184339[ebp]
	mov	DWORD PTR $T184338[ebp], edx
	cmp	DWORD PTR $T184338[ebp], 0
	je	SHORT $L184340
	push	1
	mov	ecx, DWORD PTR $T184338[ebp]
	call	??_GData_t@_bstr_t@@AAEPAXI@Z
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $L184341
$L184340:
	mov	DWORD PTR tv72[ebp], 0
$L184341:

; 682  :         return 0;

	xor	eax, eax
	jmp	SHORT $L161448
$L161450:

; 683  :     }
; 684  : 
; 685  :     return m_RefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
$L161448:

; 686  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@Data_t@_bstr_t@@QAEKXZ ENDP			; _bstr_t::Data_t::Release
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetWString@Data_t@_bstr_t@@QAEAAPAGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWString@Data_t@_bstr_t@@QAEAAPAGXZ PROC NEAR	; _bstr_t::Data_t::GetWString, COMDAT
; _this$ = ecx

; 725  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 726  :     return m_wstr;

	mov	eax, DWORD PTR _this$[ebp]

; 727  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWString@Data_t@_bstr_t@@QAEAAPAGXZ ENDP		; _bstr_t::Data_t::GetWString
_TEXT	ENDS
EXTRN	?ConvertBSTRToString@_com_util@@YGPADPAG@Z:NEAR	; _com_util::ConvertBSTRToString
; Function compile flags: /Odt /RTCsu
;	COMDAT ?GetString@Data_t@_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetString@Data_t@_bstr_t@@QBEPBDXZ PROC NEAR		; _bstr_t::Data_t::GetString, COMDAT
; _this$ = ecx

; 730  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 731  :     if (m_str == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L161471

; 732  :         m_str = _com_util::ConvertBSTRToString(m_wstr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?ConvertBSTRToString@_com_util@@YGPADPAG@Z ; _com_util::ConvertBSTRToString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$L161471:

; 733  :     }
; 734  : 
; 735  :     return m_str;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]

; 736  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetString@Data_t@_bstr_t@@QBEPBDXZ ENDP		; _bstr_t::Data_t::GetString
_TEXT	ENDS
EXTRN	__imp__SysStringLen@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Length@Data_t@_bstr_t@@QBEIXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?Length@Data_t@_bstr_t@@QBEIXZ PROC NEAR		; _bstr_t::Data_t::Length, COMDAT
; _this$ = ecx

; 777  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 778  :     return m_wstr ? ::SysStringLen(m_wstr) : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L184348
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SysStringLen@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv67[ebp], eax
	jmp	SHORT $L184349
$L184348:
	mov	DWORD PTR tv67[ebp], 0
$L184349:
	mov	eax, DWORD PTR tv67[ebp]

; 779  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@Data_t@_bstr_t@@QBEIXZ ENDP			; _bstr_t::Data_t::Length
_TEXT	ENDS
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Odt /RTCsu
;	COMDAT ??2Data_t@_bstr_t@@SAPAXI@Z
_TEXT	SEGMENT
_sz$ = 8						; size = 4
??2Data_t@_bstr_t@@SAPAXI@Z PROC NEAR			; _bstr_t::Data_t::operator new, COMDAT

; 827  : {

	push	ebp
	mov	ebp, esp

; 828  :     return ::operator new(sz);

	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 829  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??2Data_t@_bstr_t@@SAPAXI@Z ENDP			; _bstr_t::Data_t::operator new
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@JG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lSrc$ = 8						; size = 4
_vtSrc$ = 12						; size = 2
??0_variant_t@@QAE@JG@Z PROC NEAR			; _variant_t::_variant_t, COMDAT
; _this$ = ecx

; 1106 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1107 :     if ((vtSrc != VT_I4) && (vtSrc != VT_ERROR) && (vtSrc != VT_BOOL)) {

	movzx	eax, WORD PTR _vtSrc$[ebp]
	cmp	eax, 3
	je	SHORT $L161710
	movzx	ecx, WORD PTR _vtSrc$[ebp]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $L161710
	movzx	edx, WORD PTR _vtSrc$[ebp]
	cmp	edx, 11					; 0000000bH
	je	SHORT $L161710

; 1108 :         _com_issue_error(E_INVALIDARG);

	push	-2147024809				; 80070057H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error

; 1109 :         return;

	jmp	SHORT $L161709
$L161710:

; 1110 :     }
; 1111 : 
; 1112 :     if (vtSrc == VT_ERROR) {

	movzx	eax, WORD PTR _vtSrc$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $L161712

; 1113 :         V_VT(this) = VT_ERROR;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], 10			; 0000000aH

; 1114 :         V_ERROR(this) = lSrc;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _lSrc$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1115 :     }
; 1116 :     else if (vtSrc == VT_BOOL) {

	jmp	SHORT $L161709
$L161712:
	movzx	ecx, WORD PTR _vtSrc$[ebp]
	cmp	ecx, 11					; 0000000bH
	jne	SHORT $L161714

; 1117 :         V_VT(this) = VT_BOOL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx], 11			; 0000000bH

; 1118 :         V_BOOL(this) = (lSrc ? VARIANT_TRUE : VARIANT_FALSE);

	mov	eax, DWORD PTR _lSrc$[ebp]
	neg	eax
	sbb	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+8], ax

; 1119 :     }
; 1120 :     else {

	jmp	SHORT $L161709
$L161714:

; 1121 :         V_VT(this) = VT_I4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx], 3

; 1122 :         V_I4(this) = lSrc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lSrc$[ebp]
	mov	DWORD PTR [eax+8], ecx
$L161709:

; 1123 :     }
; 1124 : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0_variant_t@@QAE@JG@Z ENDP				; _variant_t::_variant_t
_TEXT	ENDS
PUBLIC	?CheckError@_com_util@@YAXJ@Z			; _com_util::CheckError
EXTRN	__imp__VariantClear@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_variant_t@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_variant_t@@QAE@XZ PROC NEAR				; _variant_t::~_variant_t, COMDAT
; _this$ = ecx

; 2231 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2232 :     _com_util::CheckError(::VariantClear(this));

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__VariantClear@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?CheckError@_com_util@@YAXJ@Z		; _com_util::CheckError
	add	esp, 4

; 2233 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_variant_t@@QAE@XZ ENDP				; _variant_t::~_variant_t
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?CheckError@_com_util@@YAXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?CheckError@_com_util@@YAXJ@Z PROC NEAR			; _com_util::CheckError, COMDAT

; 54   :     {

	push	ebp
	mov	ebp, esp

; 55   :         if (FAILED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L161076

; 56   :             _com_issue_error(hr);

	mov	eax, DWORD PTR _hr$[ebp]
	push	eax
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L161076:

; 57   :         }
; 58   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?CheckError@_com_util@@YAXJ@Z ENDP			; _com_util::CheckError
_TEXT	ENDS
PUBLIC	??4_bstr_t@@QAEAAV0@PBG@Z			; _bstr_t::operator=
PUBLIC	??0_variant_t@@QAE@XZ				; _variant_t::_variant_t
PUBLIC	?ChangeType@_variant_t@@QAEXGPBV1@@Z		; _variant_t::ChangeType
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184367 DD	0ffffffffH
	DD	FLAT:$L184360
$T184362 DD	019930520H
	DD	01H
	DD	FLAT:$T184367
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0_bstr_t@@QAE@ABV_variant_t@@@Z
_TEXT	SEGMENT
_varDest$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_var$ = 8						; size = 4
??0_bstr_t@@QAE@ABV_variant_t@@@Z PROC NEAR		; _bstr_t::_bstr_t, COMDAT
; _this$ = ecx

; 2245 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_bstr_t@@QAE@ABV_variant_t@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 2246 :     if (V_VT(&var) == VT_BSTR) {

	mov	ecx, DWORD PTR _var$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 8
	jne	SHORT $L162180

; 2247 :         *this = V_BSTR(&var);

	mov	eax, DWORD PTR _var$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_bstr_t@@QAEAAV0@PBG@Z		; _bstr_t::operator=

; 2248 :         return;

	jmp	SHORT $L162179
$L162180:

; 2249 :     }
; 2250 : 
; 2251 :     _variant_t varDest;

	lea	ecx, DWORD PTR _varDest$[ebp]
	call	??0_variant_t@@QAE@XZ			; _variant_t::_variant_t
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2252 :     varDest.ChangeType(VT_BSTR, &var);

	mov	edx, DWORD PTR _var$[ebp]
	push	edx
	push	8
	lea	ecx, DWORD PTR _varDest$[ebp]
	call	?ChangeType@_variant_t@@QAEXGPBV1@@Z	; _variant_t::ChangeType

; 2253 : 
; 2254 :     *this = V_BSTR(&varDest);

	mov	eax, DWORD PTR _varDest$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_bstr_t@@QAEAAV0@PBG@Z		; _bstr_t::operator=

; 2255 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _varDest$[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L162179:
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184366
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L184366:
	DD	1
	DD	$L184365
$L184365:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$L184363
$L184363:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184360:
	lea	ecx, DWORD PTR _varDest$[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
__ehhandler$??0_bstr_t@@QAE@ABV_variant_t@@@Z:
	mov	eax, OFFSET FLAT:$T184362
	jmp	___CxxFrameHandler
text$x	ENDS
??0_bstr_t@@QAE@ABV_variant_t@@@Z ENDP			; _bstr_t::_bstr_t
PUBLIC	??_C@_0EJ@DPIMAKHN@C?3?2Program?5Files?2Microsoft?5Visua@ ; `string'
PUBLIC	??_C@_0CG@PAOIECBF@s?5?$DN?$DN?50?5?$HM?$HM?5?$CIconst?5wchar_t?$CK?$CJ?5?$CKthis@ ; `string'
EXTRN	__assert:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184381 DD	0ffffffffH
	DD	FLAT:$L184377
$T184379 DD	019930520H
	DD	01H
	DD	FLAT:$T184381
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0EJ@DPIMAKHN@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT
??_C@_0EJ@DPIMAKHN@C?3?2Program?5Files?2Microsoft?5Visua@ DB 'C:\Program '
	DB	'Files\Microsoft Visual Studio .NET 2003\Vc7\include\comutil.h'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PAOIECBF@s?5?$DN?$DN?50?5?$HM?$HM?5?$CIconst?5wchar_t?$CK?$CJ?5?$CKthis@
CONST	SEGMENT
??_C@_0CG@PAOIECBF@s?5?$DN?$DN?50?5?$HM?$HM?5?$CIconst?5wchar_t?$CK?$CJ?5?$CKthis@ DB 's'
	DB	' == 0 || (const wchar_t*) *this != s', 00H	; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ??4_bstr_t@@QAEAAV0@PBG@Z
_TEXT	SEGMENT
tv81 = -28						; size = 4
$T184374 = -24						; size = 4
$T184373 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
??4_bstr_t@@QAEAAV0@PBG@Z PROC NEAR			; _bstr_t::operator=, COMDAT
; _this$ = ecx

; 324  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_bstr_t@@QAEAAV0@PBG@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx

; 325  :     _COM_ASSERT(s == NULL || (const wchar_t*) *this != s);

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $L184372
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B_bstr_t@@QBEPBGXZ			; _bstr_t::operator unsigned short const *
	cmp	eax, DWORD PTR _s$[ebp]
	jne	SHORT $L184372
	push	325					; 00000145H
	push	OFFSET FLAT:??_C@_0EJ@DPIMAKHN@C?3?2Program?5Files?2Microsoft?5Visua@
	push	OFFSET FLAT:??_C@_0CG@PAOIECBF@s?5?$DN?$DN?50?5?$HM?$HM?5?$CIconst?5wchar_t?$CK?$CJ?5?$CKthis@
	call	__assert
	add	esp, 12					; 0000000cH
$L184372:

; 326  : 
; 327  :     _Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free@_bstr_t@@AAEXXZ			; _bstr_t::_Free

; 328  : 
; 329  :     m_Data = new Data_t(s);

	push	12					; 0000000cH
	call	??2Data_t@_bstr_t@@SAPAXI@Z		; _bstr_t::Data_t::operator new
	add	esp, 4
	mov	DWORD PTR $T184374[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T184374[ebp], 0
	je	SHORT $L184375
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T184374[ebp]
	call	??0Data_t@_bstr_t@@QAE@PBG@Z		; _bstr_t::Data_t::Data_t
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $L184376
$L184375:
	mov	DWORD PTR tv81[ebp], 0
$L184376:
	mov	edx, DWORD PTR tv81[ebp]
	mov	DWORD PTR $T184373[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T184373[ebp]
	mov	DWORD PTR [eax], ecx

; 330  :     if (m_Data == NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $L161265

; 331  :         _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L161265:

; 332  :     }
; 333  : 
; 334  :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 335  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184377:
	mov	eax, DWORD PTR $T184374[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4_bstr_t@@QAEAAV0@PBG@Z:
	mov	eax, OFFSET FLAT:$T184379
	jmp	___CxxFrameHandler
text$x	ENDS
??4_bstr_t@@QAEAAV0@PBG@Z ENDP				; _bstr_t::operator=
EXTRN	__imp__VariantInit@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_variant_t@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_variant_t@@QAE@XZ PROC NEAR				; _variant_t::_variant_t, COMDAT
; _this$ = ecx

; 1034 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1035 :     ::VariantInit(this);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__VariantInit@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1036 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_variant_t@@QAE@XZ ENDP				; _variant_t::_variant_t
_TEXT	ENDS
EXTRN	__imp__VariantChangeType@16:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?ChangeType@_variant_t@@QAEXGPBV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vartype$ = 8						; size = 2
_pSrc$ = 12						; size = 4
?ChangeType@_variant_t@@QAEXGPBV1@@Z PROC NEAR		; _variant_t::ChangeType, COMDAT
; _this$ = ecx

; 2204 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2205 :     //
; 2206 :     // If pDest is NULL, convert type in place
; 2207 :     //
; 2208 :     if (pSrc == NULL) {

	cmp	DWORD PTR _pSrc$[ebp], 0
	jne	SHORT $L162163

; 2209 :         pSrc = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pSrc$[ebp], eax
$L162163:

; 2210 :     }
; 2211 : 
; 2212 :     if ((this != pSrc) || (vartype != V_VT(this))) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR _pSrc$[ebp]
	jne	SHORT $L162165
	movzx	edx, WORD PTR _vartype$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	je	SHORT $L162162
$L162165:

; 2213 :         _com_util::CheckError(::VariantChangeType(static_cast<VARIANT*>(this),
; 2214 :                                                   const_cast<VARIANT*>(static_cast<const VARIANT*>(pSrc)),
; 2215 :                                                   0, vartype));

	mov	esi, esp
	mov	dx, WORD PTR _vartype$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	DWORD PTR __imp__VariantChangeType@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?CheckError@_com_util@@YAXJ@Z		; _com_util::CheckError
	add	esp, 4
$L162162:

; 2216 :     }
; 2217 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ChangeType@_variant_t@@QAEXGPBV1@@Z ENDP		; _variant_t::ChangeType
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comdef.h
_TEXT	ENDS
;	COMDAT ?Error@_com_error@@QBEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Error@_com_error@@QBEJXZ PROC NEAR			; _com_error::Error, COMDAT
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 164  :     return m_hresult;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 165  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Error@_com_error@@QBEJXZ ENDP				; _com_error::Error
_TEXT	ENDS
PUBLIC	??0_bstr_t@@QAE@PAG_N@Z				; _bstr_t::_bstr_t
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Description@_com_error@@QBE?AV_bstr_t@@XZ
_TEXT	SEGMENT
$T184393 = -20						; size = 4
_bstr$ = -12						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Description@_com_error@@QBE?AV_bstr_t@@XZ PROC NEAR	; _com_error::Description, COMDAT
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T184393[ebp], 0

; 182  :     BSTR bstr = NULL;

	mov	DWORD PTR _bstr$[ebp], 0

; 183  :     if (m_perrinfo != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $L162316

; 184  :         m_perrinfo->GetDescription(&bstr);

	mov	esi, esp
	lea	ecx, DWORD PTR _bstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	call	DWORD PTR [eax+20]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L162316:

; 185  :     }
; 186  :     return _bstr_t(bstr, false);

	push	0
	mov	ecx, DWORD PTR _bstr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0_bstr_t@@QAE@PAG_N@Z			; _bstr_t::_bstr_t
	mov	edx, DWORD PTR $T184393[ebp]
	or	edx, 1
	mov	DWORD PTR $T184393[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 187  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184397
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L184397:
	DD	1
	DD	$L184396
$L184396:
	DD	-12					; fffffff4H
	DD	4
	DD	$L184395
$L184395:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Description@_com_error@@QBE?AV_bstr_t@@XZ ENDP		; _com_error::Description
_TEXT	ENDS
PUBLIC	??0Data_t@_bstr_t@@QAE@PAG_N@Z			; _bstr_t::Data_t::Data_t
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comutil.h
xdata$x	SEGMENT
$T184408 DD	0ffffffffH
	DD	FLAT:$L184404
$T184406 DD	019930520H
	DD	01H
	DD	FLAT:$T184408
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??0_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T184401 = -24						; size = 4
$T184400 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bstr$ = 8						; size = 4
_fCopy$ = 12						; size = 1
??0_bstr_t@@QAE@PAG_N@Z PROC NEAR			; _bstr_t::_bstr_t, COMDAT
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_bstr_t@@QAE@PAG_N@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2Data_t@_bstr_t@@SAPAXI@Z		; _bstr_t::Data_t::operator new
	add	esp, 4
	mov	DWORD PTR $T184401[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T184401[ebp], 0
	je	SHORT $L184402
	mov	al, BYTE PTR _fCopy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bstr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T184401[ebp]
	call	??0Data_t@_bstr_t@@QAE@PAG_N@Z		; _bstr_t::Data_t::Data_t
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $L184403
$L184402:
	mov	DWORD PTR tv73[ebp], 0
$L184403:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T184400[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T184400[ebp]
	mov	DWORD PTR [eax], ecx

; 273  :     if (m_Data == NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $L161229

; 274  :         _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L161229:

; 275  :     }
; 276  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184404:
	mov	eax, DWORD PTR $T184401[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0_bstr_t@@QAE@PAG_N@Z:
	mov	eax, OFFSET FLAT:$T184406
	jmp	___CxxFrameHandler
text$x	ENDS
??0_bstr_t@@QAE@PAG_N@Z ENDP				; _bstr_t::_bstr_t
EXTRN	__imp__SysStringByteLen@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0Data_t@_bstr_t@@QAE@PAG_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bstr$ = 8						; size = 4
_fCopy$ = 12						; size = 1
??0Data_t@_bstr_t@@QAE@PAG_N@Z PROC NEAR		; _bstr_t::Data_t::Data_t, COMDAT
; _this$ = ecx

; 625  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1

; 626  :     if (fCopy && bstr != NULL) {

	movzx	edx, BYTE PTR _fCopy$[ebp]
	test	edx, edx
	je	SHORT $L161419
	cmp	DWORD PTR _bstr$[ebp], 0
	je	SHORT $L161419

; 627  :         m_wstr = ::SysAllocStringByteLen(reinterpret_cast<char*>(bstr),
; 628  :                                          ::SysStringByteLen(bstr));

	mov	esi, esp
	mov	eax, DWORD PTR _bstr$[ebp]
	push	eax
	call	DWORD PTR __imp__SysStringByteLen@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _bstr$[ebp]
	push	ecx
	call	DWORD PTR __imp__SysAllocStringByteLen@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 629  : 
; 630  :         if (m_wstr == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L161421

; 631  :             _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L161421:

; 632  :         }
; 633  :     }
; 634  :     else {

	jmp	SHORT $L161418
$L161419:

; 635  :         m_wstr = bstr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _bstr$[ebp]
	mov	DWORD PTR [ecx], edx
$L161418:

; 636  :     }
; 637  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0Data_t@_bstr_t@@QAE@PAG_N@Z ENDP			; _bstr_t::Data_t::Data_t
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comdef.h
_TEXT	ENDS
;	COMDAT ?Source@_com_error@@QBE?AV_bstr_t@@XZ
_TEXT	SEGMENT
$T184416 = -20						; size = 4
_bstr$ = -12						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Source@_com_error@@QBE?AV_bstr_t@@XZ PROC NEAR		; _com_error::Source, COMDAT
; _this$ = ecx

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T184416[ebp], 0

; 209  :     BSTR bstr = NULL;

	mov	DWORD PTR _bstr$[ebp], 0

; 210  :     if (m_perrinfo != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $L162335

; 211  :         m_perrinfo->GetSource(&bstr);

	mov	esi, esp
	lea	ecx, DWORD PTR _bstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	call	DWORD PTR [eax+16]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L162335:

; 212  :     }
; 213  :     return _bstr_t(bstr, false);

	push	0
	mov	ecx, DWORD PTR _bstr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0_bstr_t@@QAE@PAG_N@Z			; _bstr_t::_bstr_t
	mov	edx, DWORD PTR $T184416[ebp]
	or	edx, 1
	mov	DWORD PTR $T184416[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 214  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184420
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L184420:
	DD	1
	DD	$L184419
$L184419:
	DD	-12					; fffffff4H
	DD	4
	DD	$L184418
$L184418:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Source@_com_error@@QBE?AV_bstr_t@@XZ ENDP		; _com_error::Source
_TEXT	ENDS
PUBLIC	?WCode@_com_error@@QBEGXZ			; _com_error::WCode
PUBLIC	??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@ ; `string'
EXTRN	__imp__LocalAlloc@8:NEAR
EXTRN	__imp__wsprintfA:NEAR
EXTRN	__imp__FormatMessageA@28:NEAR
;	COMDAT ??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@ DB 'IDispatch error #%'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@
CONST	SEGMENT
??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@ DB 'Unknown error 0x%0l'
	DB	'X', 00H					; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?ErrorMessage@_com_error@@QBEPBDXZ
_TEXT	SEGMENT
_wCode$162360 = -12					; size = 2
_nLen$162353 = -8					; size = 4
_this$ = -4						; size = 4
?ErrorMessage@_com_error@@QBEPBDXZ PROC NEAR		; _com_error::ErrorMessage, COMDAT
; _this$ = ecx

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 228  :     if (m_pszMsg == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	$L162348

; 229  :         FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER|FORMAT_MESSAGE_FROM_SYSTEM,
; 230  :                       NULL,
; 231  :                       m_hresult,
; 232  :                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
; 233  :                       (LPTSTR)&m_pszMsg,
; 234  :                       0,
; 235  :                       NULL);

	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	1024					; 00000400H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	push	4352					; 00001100H
	call	DWORD PTR __imp__FormatMessageA@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 236  :         if (m_pszMsg != NULL) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $L162352

; 237  :             int nLen = lstrlen(m_pszMsg);

	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__lstrlenA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nLen$162353[ebp], eax

; 238  :             if (nLen > 1 && m_pszMsg[nLen - 1] == '\n') {

	cmp	DWORD PTR _nLen$162353[ebp], 1
	jle	SHORT $L162354
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _nLen$162353[ebp]
	movsx	ecx, BYTE PTR [edx+eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $L162354

; 239  :                 m_pszMsg[nLen - 1] = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _nLen$162353[ebp]
	mov	BYTE PTR [ecx+eax-1], 0

; 240  :                 if (m_pszMsg[nLen - 2] == '\r') {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _nLen$162353[ebp]
	movsx	edx, BYTE PTR [eax+ecx-2]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $L162354

; 241  :                         m_pszMsg[nLen - 2] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _nLen$162353[ebp]
	mov	BYTE PTR [edx+ecx-2], 0
$L162354:

; 242  :                 }
; 243  :             }
; 244  :         } 
; 245  :         else {

	jmp	$L162348
$L162352:

; 246  :             m_pszMsg = (LPTSTR)LocalAlloc(0, 32 * sizeof(TCHAR));

	mov	esi, esp
	push	32					; 00000020H
	push	0
	call	DWORD PTR __imp__LocalAlloc@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 247  :             if (m_pszMsg != NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $L162348

; 248  :                 WORD wCode = WCode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WCode@_com_error@@QBEGXZ		; _com_error::WCode
	mov	WORD PTR _wCode$162360[ebp], ax

; 249  :                 if (wCode != 0) {

	movzx	eax, WORD PTR _wCode$162360[ebp]
	test	eax, eax
	je	SHORT $L162361

; 250  :                     wsprintf(m_pszMsg, TEXT("IDispatch error #%d"), wCode);

	movzx	ecx, WORD PTR _wCode$162360[ebp]
	mov	esi, esp
	push	ecx
	push	OFFSET FLAT:??_C@_0BE@NNIJINN@IDispatch?5error?5?$CD?$CFd?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 251  :                 } 
; 252  :                 else {

	jmp	SHORT $L162348
$L162361:

; 253  :                     wsprintf(m_pszMsg, TEXT("Unknown error 0x%0lX"), m_hresult);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET FLAT:??_C@_0BF@IPPGFENJ@Unknown?5error?50x?$CF0lX?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR __imp__wsprintfA
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$L162348:

; 254  :                 }
; 255  :             }
; 256  :         }
; 257  :     }
; 258  :     return m_pszMsg;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]

; 259  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ErrorMessage@_com_error@@QBEPBDXZ ENDP			; _com_error::ErrorMessage
_TEXT	ENDS
PUBLIC	?HRESULTToWCode@_com_error@@SAGJ@Z		; _com_error::HRESULTToWCode
; Function compile flags: /Odt /RTCsu
;	COMDAT ?WCode@_com_error@@QBEGXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?WCode@_com_error@@QBEGXZ PROC NEAR			; _com_error::WCode, COMDAT
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 169  :     return HRESULTToWCode(m_hresult);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?HRESULTToWCode@_com_error@@SAGJ@Z	; _com_error::HRESULTToWCode
	add	esp, 4

; 170  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WCode@_com_error@@QBEGXZ ENDP				; _com_error::WCode
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?HRESULTToWCode@_com_error@@SAGJ@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
_hr$ = 8						; size = 4
?HRESULTToWCode@_com_error@@SAGJ@Z PROC NEAR		; _com_error::HRESULTToWCode, COMDAT

; 267  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 268  :     return (hr >= WCODE_HRESULT_FIRST && hr <= WCODE_HRESULT_LAST)
; 269  :         ? WORD(hr - WCODE_HRESULT_FIRST)
; 270  :         : 0;

	cmp	DWORD PTR _hr$[ebp], -2147220992	; 80040200H
	jl	SHORT $L184427
	cmp	DWORD PTR _hr$[ebp], -2147155969	; 8004ffffH
	jg	SHORT $L184427
	mov	eax, DWORD PTR _hr$[ebp]
	add	eax, 2147220992				; 7ffbfe00H
	movzx	ecx, ax
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $L184428
$L184427:
	mov	DWORD PTR tv69[ebp], 0
$L184428:
	mov	ax, WORD PTR tv69[ebp]

; 271  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HRESULTToWCode@_com_error@@SAGJ@Z ENDP			; _com_error::HRESULTToWCode
_TEXT	ENDS
PUBLIC	??1Data_t@_bstr_t@@AAE@XZ			; _bstr_t::Data_t::~Data_t
; Function compile flags: /Odt /RTCsu
;	COMDAT ??_GData_t@_bstr_t@@AAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GData_t@_bstr_t@@AAEPAXI@Z PROC NEAR			; _bstr_t::Data_t::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Data_t@_bstr_t@@AAE@XZ		; _bstr_t::Data_t::~Data_t
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $L164101
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L164101:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GData_t@_bstr_t@@AAEPAXI@Z ENDP			; _bstr_t::Data_t::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Free@Data_t@_bstr_t@@AAEXXZ			; _bstr_t::Data_t::_Free
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comutil.h
;	COMDAT ??1Data_t@_bstr_t@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Data_t@_bstr_t@@AAE@XZ PROC NEAR			; _bstr_t::Data_t::~Data_t, COMDAT
; _this$ = ecx

; 835  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 836  :     _Free();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free@Data_t@_bstr_t@@AAEXXZ		; _bstr_t::Data_t::_Free

; 837  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Data_t@_bstr_t@@AAE@XZ ENDP				; _bstr_t::Data_t::~Data_t
_TEXT	ENDS
EXTRN	__imp__SysFreeString@4:NEAR
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
; Function compile flags: /Odt /RTCsu
;	COMDAT ?_Free@Data_t@_bstr_t@@AAEXXZ
_TEXT	SEGMENT
$T184435 = -8						; size = 4
_this$ = -4						; size = 4
?_Free@Data_t@_bstr_t@@AAEXXZ PROC NEAR			; _bstr_t::Data_t::_Free, COMDAT
; _this$ = ecx

; 842  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 843  :     if (m_wstr != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L161518

; 844  :         ::SysFreeString(m_wstr);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$L161518:

; 845  :     }
; 846  : 
; 847  :     if (m_str != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $L161517

; 848  :         delete [] m_str;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T184435[ebp], edx
	mov	eax, DWORD PTR $T184435[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$L161517:

; 849  :     }
; 850  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Free@Data_t@_bstr_t@@AAEXXZ ENDP			; _bstr_t::Data_t::_Free
_TEXT	ENDS
PUBLIC	??B_bstr_t@@QBEPAGXZ				; _bstr_t::operator unsigned short *
PUBLIC	__GUID_00000515_0000_0010_8000_00aa006d2ea4
EXTRN	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z:NEAR ; _com_issue_errorex
;	COMDAT xdata$x
; File c:\activex\xmlsign\debug\msado15.tli
xdata$x	SEGMENT
$T184442 DD	0ffffffffH
	DD	FLAT:$L184438
$T184440 DD	019930520H
	DD	01H
	DD	FLAT:$T184442
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __GUID_00000515_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT
__GUID_00000515_0000_0010_8000_00aa006d2ea4 DD 0515H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	06dH
	DB	02eH
	DB	0a4H
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z
_TEXT	SEGMENT
__hr$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pbstr$ = 8						; size = 4
?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z PROC NEAR ; Connection15::PutConnectionString, COMDAT
; _this$ = ecx

; 1160 : inline void Connection15::PutConnectionString ( _bstr_t pbstr ) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1161 :     HRESULT _hr = put_ConnectionString(pbstr);

	lea	ecx, DWORD PTR _pbstr$[ebp]
	call	??B_bstr_t@@QBEPAGXZ			; _bstr_t::operator unsigned short *
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	DWORD PTR [ecx+36]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1162 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L169582
	push	OFFSET FLAT:__GUID_00000515_0000_0010_8000_00aa006d2ea4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __hr$[ebp]
	push	ecx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L169582:

; 1163 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pbstr$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184438:
	lea	ecx, DWORD PTR _pbstr$[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
__ehhandler$?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z:
	mov	eax, OFFSET FLAT:$T184440
	jmp	___CxxFrameHandler
text$x	ENDS
?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z ENDP ; Connection15::PutConnectionString
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comutil.h
;	COMDAT ??B_bstr_t@@QBEPAGXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
??B_bstr_t@@QBEPAGXZ PROC NEAR				; _bstr_t::operator unsigned short *, COMDAT
; _this$ = ecx

; 411  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 412  :     return const_cast<wchar_t*>((m_Data != NULL) ? m_Data->GetWString() : NULL);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L184447
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetWString@Data_t@_bstr_t@@QAEAAPAGXZ	; _bstr_t::Data_t::GetWString
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $L184448
$L184447:
	mov	DWORD PTR tv68[ebp], 0
$L184448:
	mov	eax, DWORD PTR tv68[ebp]

; 413  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??B_bstr_t@@QBEPAGXZ ENDP				; _bstr_t::operator unsigned short *
; Function compile flags: /Odt /RTCsu
; File c:\activex\xmlsign\debug\msado15.tli
_TEXT	ENDS
;	COMDAT ?Close@Connection15@@QAEJXZ
_TEXT	SEGMENT
__hr$ = -8						; size = 4
_this$ = -4						; size = 4
?Close@Connection15@@QAEJXZ PROC NEAR			; Connection15::Close, COMDAT
; _this$ = ecx

; 1196 : inline HRESULT Connection15::Close ( ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1197 :     HRESULT _hr = raw_Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	DWORD PTR [ecx+60]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1198 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L169625
	push	OFFSET FLAT:__GUID_00000515_0000_0010_8000_00aa006d2ea4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __hr$[ebp]
	push	ecx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L169625:

; 1199 :     return _hr;

	mov	eax, DWORD PTR __hr$[ebp]

; 1200 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@Connection15@@QAEJXZ ENDP			; Connection15::Close
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184460 DD	0ffffffffH
	DD	FLAT:$L184454
	DD	00H
	DD	FLAT:$L184455
	DD	01H
	DD	FLAT:$L184456
$T184458 DD	019930520H
	DD	03H
	DD	FLAT:$T184460
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?Open@Connection15@@QAEJV_bstr_t@@00J@Z
_TEXT	SEGMENT
$T184453 = -24						; size = 4
__hr$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ConnectionString$ = 8					; size = 4
_UserID$ = 12						; size = 4
_Password$ = 16						; size = 4
_Options$ = 20						; size = 4
?Open@Connection15@@QAEJV_bstr_t@@00J@Z PROC NEAR	; Connection15::Open, COMDAT
; _this$ = ecx

; 1228 : inline HRESULT Connection15::Open ( _bstr_t ConnectionString, _bstr_t UserID, _bstr_t Password, long Options ) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@Connection15@@QAEJV_bstr_t@@00J@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1229 :     HRESULT _hr = raw_Open(ConnectionString, UserID, Password, Options);

	mov	esi, esp
	mov	eax, DWORD PTR _Options$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Password$[ebp]
	call	??B_bstr_t@@QBEPAGXZ			; _bstr_t::operator unsigned short *
	push	eax
	lea	ecx, DWORD PTR _UserID$[ebp]
	call	??B_bstr_t@@QBEPAGXZ			; _bstr_t::operator unsigned short *
	push	eax
	lea	ecx, DWORD PTR _ConnectionString$[ebp]
	call	??B_bstr_t@@QBEPAGXZ			; _bstr_t::operator unsigned short *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR [edx+80]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1230 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L169666
	push	OFFSET FLAT:__GUID_00000515_0000_0010_8000_00aa006d2ea4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hr$[ebp]
	push	edx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L169666:

; 1231 :     return _hr;

	mov	eax, DWORD PTR __hr$[ebp]
	mov	DWORD PTR $T184453[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _ConnectionString$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _UserID$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _Password$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	eax, DWORD PTR $T184453[ebp]

; 1232 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184454:
	lea	ecx, DWORD PTR _Password$[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184455:
	lea	ecx, DWORD PTR _UserID$[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184456:
	lea	ecx, DWORD PTR _ConnectionString$[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
__ehhandler$?Open@Connection15@@QAEJV_bstr_t@@00J@Z:
	mov	eax, OFFSET FLAT:$T184458
	jmp	___CxxFrameHandler
text$x	ENDS
?Open@Connection15@@QAEJV_bstr_t@@00J@Z ENDP		; Connection15::Open
PUBLIC	??1CRLCache@@QAE@XZ				; CRLCache::~CRLCache
EXTRN	__imp__CoUninitialize@0:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\activex\xmlsign\crlcache.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CRLCache@@QAE@XZ PROC NEAR				; CRLCache::~CRLCache
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 	CRLCacheInitialized = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 101  : 	if (SecureXMLDbConnectionString != NULL)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $L182617

; 102  : 		SysFreeString(SecureXMLDbConnectionString);

	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$L182617:

; 103  : 	CoUninitialize();

	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 104  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CRLCache@@QAE@XZ ENDP				; CRLCache::~CRLCache
_TEXT	ENDS
PUBLIC	?GetadoEOF@Recordset15@@QAEFXZ			; Recordset15::GetadoEOF
PUBLIC	?GetFields@Recordset15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@XZ ; Recordset15::GetFields
PUBLIC	?GetRecordCount@Recordset15@@QAEJXZ		; Recordset15::GetRecordCount
PUBLIC	?Close@Recordset15@@QAEJXZ			; Recordset15::Close
PUBLIC	?Delete@Recordset15@@QAEJW4AffectEnum@@@Z	; Recordset15::Delete
PUBLIC	?MoveNext@Recordset15@@QAEJXZ			; Recordset15::MoveNext
PUBLIC	?Open@Recordset15@@QAEJABV_variant_t@@0W4CursorTypeEnum@@W4LockTypeEnum@@J@Z ; Recordset15::Open
PUBLIC	?GetValue@Field20@@QAE?AV_variant_t@@XZ		; Field20::GetValue
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
PUBLIC	?GetItem@Fields15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@ABV_variant_t@@@Z ; Fields15::GetItem
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUFields@@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::operator->
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
PUBLIC	?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::CreateInstance
PUBLIC	?FetchCRLFromCRLCache@CRLCache@@QAEPAPAU_DS_DATA_BLOB@@PAU_CRYPTOAPI_BLOB@@PAIPAU_GLOBAL_SIG@@@Z ; CRLCache::FetchCRLFromCRLCache
PUBLIC	??B_bstr_t@@QBEPBDXZ				; _bstr_t::operator char const *
PUBLIC	__GUID_00000535_0000_0010_8000_00aa006d2ea4
PUBLIC	??0_variant_t@@QAE@ABV_bstr_t@@@Z		; _variant_t::_variant_t
PUBLIC	??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
PUBLIC	??C?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUField@@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::operator->
PUBLIC	??B?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator _Connection *
PUBLIC	?PutRefActiveConnection@Recordset15@@QAEXPAUIDispatch@@@Z ; Recordset15::PutRefActiveConnection
EXTRN	_setError:NEAR
EXTRN	_base64decodeSize:NEAR
EXTRN	_base64decode:NEAR
EXTRN	_vbNowTimeToSystem:NEAR
EXTRN	_localTimeToUtcTime:NEAR
EXTRN	_myMalloc:NEAR
EXTRN	_myFree:NEAR
EXTRN	_myRealloc:NEAR
EXTRN	?vtMissing@@3V_variant_t@@A:BYTE		; vtMissing
EXTRN	_strlen:NEAR
EXTRN	_normalizeCertName:NEAR
EXTRN	__imp__GetSystemTime@4:NEAR
xdata$x	SEGMENT
$T184562 DD	0ffffffffH
	DD	FLAT:$L184504
	DD	00H
	DD	FLAT:$L184505
	DD	01H
	DD	FLAT:$L184506
	DD	02H
	DD	FLAT:$L184507
	DD	03H
	DD	FLAT:$L184508
	DD	04H
	DD	FLAT:$L184509
	DD	05H
	DD	FLAT:$L184510
	DD	06H
	DD	FLAT:$L184511
	DD	07H
	DD	FLAT:$L184512
	DD	02H
	DD	FLAT:$L184512
	DD	09H
	DD	FLAT:$L184511
	DD	0aH
	DD	FLAT:$L184510
	DD	0bH
	DD	FLAT:$L184509
	DD	0cH
	DD	FLAT:$L184508
	DD	09H
	DD	00H
	DD	0eH
	DD	FLAT:$L184513
	DD	0eH
	DD	FLAT:$L184514
	DD	010H
	DD	FLAT:$L184515
	DD	011H
	DD	FLAT:$L184516
	DD	0eH
	DD	FLAT:$L184517
	DD	0eH
	DD	FLAT:$L184518
	DD	014H
	DD	FLAT:$L184519
	DD	015H
	DD	FLAT:$L184520
	DD	016H
	DD	FLAT:$L184521
	DD	017H
	DD	FLAT:$L184522
	DD	0eH
	DD	FLAT:$L184522
	DD	019H
	DD	FLAT:$L184521
	DD	01aH
	DD	FLAT:$L184520
	DD	01bH
	DD	FLAT:$L184519
	DD	019H
	DD	FLAT:$L184523
	DD	01dH
	DD	FLAT:$L184524
	DD	01eH
	DD	FLAT:$L184525
	DD	01fH
	DD	FLAT:$L184526
	DD	020H
	DD	FLAT:$L184527
	DD	019H
	DD	FLAT:$L184527
	DD	022H
	DD	FLAT:$L184526
	DD	023H
	DD	FLAT:$L184525
	DD	024H
	DD	FLAT:$L184524
	DD	0eH
	DD	FLAT:$L184528
	DD	026H
	DD	FLAT:$L184529
	DD	027H
	DD	FLAT:$L184530
	DD	028H
	DD	FLAT:$L184531
	DD	029H
	DD	FLAT:$L184532
	DD	0eH
	DD	FLAT:$L184532
	DD	02bH
	DD	FLAT:$L184531
	DD	02cH
	DD	FLAT:$L184530
	DD	02dH
	DD	FLAT:$L184529
	DD	09H
	DD	00H
	DD	02fH
	DD	FLAT:$L184533
	DD	030H
	DD	FLAT:$L184534
	DD	031H
	DD	FLAT:$L184535
	DD	032H
	DD	FLAT:$L184536
	DD	033H
	DD	FLAT:$L184537
	DD	034H
	DD	FLAT:$L184538
	DD	035H
	DD	FLAT:$L184539
	DD	036H
	DD	FLAT:$L184540
	DD	037H
	DD	FLAT:$L184541
	DD	038H
	DD	FLAT:$L184542
	DD	039H
	DD	FLAT:$L184543
	DD	03aH
	DD	FLAT:$L184544
	DD	03bH
	DD	FLAT:$L184545
	DD	030H
	DD	FLAT:$L184545
	DD	03dH
	DD	FLAT:$L184544
	DD	03eH
	DD	FLAT:$L184543
	DD	03fH
	DD	FLAT:$L184542
	DD	040H
	DD	FLAT:$L184541
	DD	041H
	DD	FLAT:$L184540
	DD	042H
	DD	FLAT:$L184539
	DD	043H
	DD	FLAT:$L184538
	DD	044H
	DD	FLAT:$L184537
	DD	045H
	DD	FLAT:$L184536
	DD	046H
	DD	FLAT:$L184535
$T184564 DD	08H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffff44H
	DD	FLAT:$L184503
$T184563 DD	0eH
	DD	02eH
	DD	047H
	DD	01H
	DD	FLAT:$T184564
$T184547 DD	019930520H
	DD	048H
	DD	FLAT:$T184562
	DD	01H
	DD	FLAT:$T184563
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT __GUID_00000535_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT
__GUID_00000535_0000_0010_8000_00aa006d2ea4 DD 0535H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	06dH
	DB	02eH
	DB	0a4H
; Function compile flags: /Odt /RTCsu
CONST	ENDS
_TEXT	SEGMENT
tv715 = -864						; size = 4
tv785 = -860						; size = 4
tv713 = -856						; size = 4
tv784 = -852						; size = 4
tv711 = -848						; size = 4
tv783 = -844						; size = 4
tv709 = -840						; size = 4
tv782 = -836						; size = 4
tv707 = -832						; size = 4
tv781 = -828						; size = 4
tv705 = -824						; size = 4
tv780 = -820						; size = 4
tv703 = -816						; size = 4
tv779 = -812						; size = 4
tv701 = -808						; size = 4
tv778 = -804						; size = 4
tv699 = -800						; size = 4
tv507 = -796						; size = 4
tv697 = -792						; size = 4
tv520 = -788						; size = 4
tv777 = -784						; size = 4
tv776 = -780						; size = 4
tv775 = -776						; size = 4
tv774 = -772						; size = 4
tv773 = -768						; size = 4
tv772 = -764						; size = 4
tv687 = -760						; size = 4
tv771 = -756						; size = 4
tv770 = -752						; size = 4
tv685 = -748						; size = 4
tv769 = -744						; size = 4
tv768 = -740						; size = 4
tv683 = -736						; size = 4
tv767 = -732						; size = 4
tv766 = -728						; size = 4
tv681 = -724						; size = 4
tv765 = -720						; size = 4
tv764 = -714						; size = 2
tv763 = -712						; size = 4
tv762 = -708						; size = 4
tv761 = -704						; size = 4
tv760 = -700						; size = 4
tv759 = -696						; size = 4
tv758 = -692						; size = 4
tv757 = -688						; size = 4
tv672 = -684						; size = 4
tv756 = -680						; size = 4
tv755 = -676						; size = 4
tv670 = -672						; size = 4
tv754 = -668						; size = 4
tv753 = -664						; size = 4
tv668 = -660						; size = 4
tv752 = -656						; size = 4
tv751 = -652						; size = 4
tv666 = -648						; size = 4
tv750 = -644						; size = 4
tv749 = -640						; size = 4
tv748 = -636						; size = 4
tv747 = -632						; size = 4
tv746 = -628						; size = 4
tv745 = -624						; size = 4
tv663 = -620						; size = 4
tv744 = -616						; size = 4
tv743 = -612						; size = 4
tv661 = -608						; size = 4
tv742 = -604						; size = 4
tv741 = -600						; size = 4
tv659 = -596						; size = 4
tv740 = -592						; size = 4
tv739 = -588						; size = 4
tv657 = -584						; size = 4
tv738 = -580						; size = 4
tv737 = -574						; size = 2
tv736 = -572						; size = 4
tv735 = -568						; size = 4
tv734 = -564						; size = 4
tv733 = -560						; size = 4
tv732 = -556						; size = 4
tv731 = -552						; size = 4
tv730 = -548						; size = 4
tv729 = -544						; size = 4
tv728 = -540						; size = 4
tv654 = -536						; size = 4
tv727 = -532						; size = 4
tv651 = -528						; size = 4
tv726 = -524						; size = 4
tv648 = -520						; size = 4
tv725 = -516						; size = 4
tv724 = -512						; size = 4
tv645 = -508						; size = 4
tv142 = -504						; size = 4
tv642 = -500						; size = 4
tv723 = -496						; size = 4
tv640 = -492						; size = 4
tv722 = -488						; size = 4
tv638 = -484						; size = 4
tv65 = -480						; size = 4
tv636 = -476						; size = 4
tv68 = -472						; size = 4
tv634 = -468						; size = 4
tv71 = -464						; size = 4
$T184501 = -460						; size = 4
$T184500 = -456						; size = 4
$T184499 = -452						; size = 4
$T184498 = -448						; size = 4
$T184497 = -444						; size = 4
$T184496 = -440						; size = 4
$T184495 = -436						; size = 4
$T184494 = -432						; size = 4
$T184493 = -428						; size = 4
$T184492 = -424						; size = 16
$T184491 = -408						; size = 4
$T184490 = -404						; size = 4
$T184489 = -400						; size = 4
$T184488 = -396						; size = 16
$T184487 = -380						; size = 4
$T184486 = -376						; size = 16
$T184485 = -360						; size = 4
$T184484 = -356						; size = 4
$T184483 = -352						; size = 16
$T184482 = -336						; size = 4
$T184481 = -332						; size = 16
$T184480 = -316						; size = 4
$T184479 = -312						; size = 16
$T184478 = -296						; size = 4
$T184477 = -292						; size = 16
$T184476 = -276						; size = 4
$T184475 = -272						; size = 16
$T184474 = -256						; size = 4
$T184473 = -252						; size = 4
$T184472 = -248						; size = 4
$T184471 = -244						; size = 4
$T184470 = -240						; size = 4
$T184469 = -236						; size = 4
$T184468 = -232						; size = 4
$T184467 = -228						; size = 4
$T184466 = -224						; size = 4
_errorDetail$182751 = -220				; size = 4
_bs$182734 = -212					; size = 4
_bstrSource$182733 = -200				; size = 4
_e$182731 = -188					; size = 4
_base64CrlData$182712 = -176				; size = 4
_base64CrlData$182686 = -164				; size = 4
_sysFetchTime$182681 = -156				; size = 4
_fetchTime$182675 = -148				; size = 4
_curTime$182674 = -136					; size = 16
__hr$182660 = -116					; size = 4
__hr$182650 = -112					; size = 4
_selectCRLCommand$ = -104				; size = 4
_i$ = -96						; size = 4
_validCrlCount$ = -92					; size = 4
_recsAffected$ = -84					; size = 16
_crlData$ = -64						; size = 4
_cbData$ = -60						; size = 4
_pbData$ = -56						; size = 4
_normCertName$ = -52					; size = 4
_spRS$ = -44						; size = 4
_spCON$ = -32						; size = 4
_crlList$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_certIssuer$ = 8					; size = 4
_crlCount$ = 12						; size = 4
_SigHandle$ = 16					; size = 4
?FetchCRLFromCRLCache@CRLCache@@QAEPAPAU_DS_DATA_BLOB@@PAU_CRYPTOAPI_BLOB@@PAIPAU_GLOBAL_SIG@@@Z PROC NEAR ; CRLCache::FetchCRLFromCRLCache
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FetchCRLFromCRLCache@CRLCache@@QAEPAPAU_DS_DATA_BLOB@@PAU_CRYPTOAPI_BLOB@@PAIPAU_GLOBAL_SIG@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	sub	esp, 848				; 00000350H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-864]
	mov	ecx, 212				; 000000d4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 	PDS_DATA_BLOB *crlList=NULL;

	mov	DWORD PTR _crlList$[ebp], 0

; 111  : #ifdef NSS
; 112  : 	// not implemented
; 113  : #else	
; 114  :     _ConnectionPtr  spCON;

	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 115  :     _RecordsetPtr   spRS;

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 116  : 	PCERT_NAME_BLOB normCertName=NULL;

	mov	DWORD PTR _normCertName$[ebp], 0

; 117  : 	BYTE *pbData=NULL;

	mov	DWORD PTR _pbData$[ebp], 0

; 118  : 	DWORD cbData=0;

	mov	DWORD PTR _cbData$[ebp], 0

; 119  : 	PDS_DATA_BLOB crlData=NULL;

	mov	DWORD PTR _crlData$[ebp], 0

; 120  : 	_variant_t recsAffected;

	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??0_variant_t@@QAE@XZ			; _variant_t::_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 121  : 	recsAffected.vt = VT_ERROR;

	mov	WORD PTR _recsAffected$[ebp], 10	; 0000000aH

; 122  : 	recsAffected.scode = DISP_E_PARAMNOTFOUND;

	mov	DWORD PTR _recsAffected$[ebp+8], -2147352572 ; 80020004H

; 123  : 	int	validCrlCount=0;

	mov	DWORD PTR _validCrlCount$[ebp], 0

; 124  : 	int i=0;

	mov	DWORD PTR _i$[ebp], 0

; 125  : 
; 126  : 	normCertName = normalizeCertName(certIssuer);

	mov	eax, DWORD PTR _certIssuer$[ebp]
	push	eax
	call	_normalizeCertName
	add	esp, 4
	mov	DWORD PTR _normCertName$[ebp], eax

; 127  : 	normCertName->pbData = (BYTE *) zRealloc(normCertName->pbData, normCertName->cbData + 1);

	push	OFFSET FLAT:$SG182636
	push	127					; 0000007fH
	push	OFFSET FLAT:$SG182637
	mov	ecx, DWORD PTR _normCertName$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _normCertName$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_myRealloc
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	DWORD PTR [edx+4], eax

; 128  : 	*(normCertName->pbData + normCertName->cbData) = '\0';

	mov	eax, DWORD PTR _normCertName$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [ecx+eax], 0

; 129  : 	_bstr_t selectCRLCommand = CRLCache::selectCrlCommand + _bstr_t("'") + _bstr_t((LPCSTR)normCertName->pbData) + _bstr_t("'");

	push	OFFSET FLAT:$SG182647
	lea	ecx, DWORD PTR $T184470[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR tv634[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T184468[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv636[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	push	OFFSET FLAT:$SG182646
	lea	ecx, DWORD PTR $T184466[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv65[ebp], eax
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv638[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	mov	eax, DWORD PTR tv638[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184467[ebp]
	push	ecx
	mov	ecx, OFFSET FLAT:?selectCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::selectCrlCommand
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv722[ebp], eax
	mov	edx, DWORD PTR tv722[ebp]
	mov	DWORD PTR tv640[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	eax, DWORD PTR tv636[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184469[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv640[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv723[ebp], eax
	mov	edx, DWORD PTR tv723[ebp]
	mov	DWORD PTR tv642[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	mov	eax, DWORD PTR tv634[ebp]
	push	eax
	lea	ecx, DWORD PTR _selectCRLCommand$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv642[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	lea	ecx, DWORD PTR $T184469[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR $T184467[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR $T184466[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	lea	ecx, DWORD PTR $T184468[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR $T184470[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t

; 130  : 
; 131  : 	if (CRLCacheInitialized == TRUE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 1
	jne	$L184502

; 132  : 	{
; 133  : 		try
; 134  : 		{

	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH

; 135  : //DebugBreak();
; 136  : 			CREATEiNSTANCE(spCON,Connection);

	push	23					; 00000017H
	push	0
	push	OFFSET FLAT:__GUID_00000514_0000_0010_8000_00aa006d2ea4
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::CreateInstance
	mov	DWORD PTR __hr$182650[ebp], eax
	cmp	DWORD PTR __hr$182650[ebp], 0
	jge	SHORT $L182652
	mov	eax, DWORD PTR __hr$182650[ebp]
	push	eax
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L182652:

; 137  : 			spCON->ConnectionString = SecureXMLDbConnectionString;

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184471[ebp], esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??0_bstr_t@@QAE@PBG@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv645[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv724[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	mov	ecx, DWORD PTR tv724[ebp]
	call	?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z ; Connection15::PutConnectionString

; 138  : 			spCON->Open( "", "", "", -1 );

	push	-1
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184472[ebp], esp
	push	OFFSET FLAT:$SG182657
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv725[ebp], eax
	mov	edx, DWORD PTR tv725[ebp]
	mov	DWORD PTR tv648[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184473[ebp], esp
	push	OFFSET FLAT:$SG182658
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv726[ebp], eax
	mov	eax, DWORD PTR tv726[ebp]
	mov	DWORD PTR tv651[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184474[ebp], esp
	push	OFFSET FLAT:$SG182659
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv727[ebp], eax
	mov	ecx, DWORD PTR tv727[ebp]
	mov	DWORD PTR tv654[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv728[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	mov	ecx, DWORD PTR tv728[ebp]
	call	?Open@Connection15@@QAEJV_bstr_t@@00J@Z	; Connection15::Open

; 139  : 			CREATEiNSTANCE(spRS,Recordset) 

	push	23					; 00000017H
	push	0
	push	OFFSET FLAT:__GUID_00000535_0000_0010_8000_00aa006d2ea4
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::CreateInstance
	mov	DWORD PTR __hr$182660[ebp], eax
	cmp	DWORD PTR __hr$182660[ebp], 0
	jge	SHORT $L182663
	mov	edx, DWORD PTR __hr$182660[ebp]
	push	edx
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L182663:

; 140  : 			spRS->PutRefActiveConnection( spCON );

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv729[ebp], eax
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??B?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator _Connection *
	push	eax
	mov	ecx, DWORD PTR tv729[ebp]
	call	?PutRefActiveConnection@Recordset15@@QAEXPAUIDispatch@@@Z ; Recordset15::PutRefActiveConnection

; 141  : 			spRS->Open(selectCRLCommand, 
; 142  : 						vtMissing, adOpenKeyset,
; 143  : 						adLockOptimistic,  adCmdText);

	lea	eax, DWORD PTR _selectCRLCommand$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184475[ebp]
	call	??0_variant_t@@QAE@ABV_bstr_t@@@Z	; _variant_t::_variant_t
	mov	DWORD PTR tv730[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 19		; 00000013H
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv731[ebp], eax
	push	1
	push	3
	push	1
	push	OFFSET FLAT:?vtMissing@@3V_variant_t@@A	; vtMissing
	lea	ecx, DWORD PTR $T184475[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv731[ebp]
	call	?Open@Recordset15@@QAEJABV_variant_t@@0W4CursorTypeEnum@@W4LockTypeEnum@@J@Z ; Recordset15::Open
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR $T184475[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t

; 144  : 
; 145  : // The Following was part of release 2.1.134.35
; 146  : 			//spRS->Open(selectCRLCommand, 
; 147  : 			//			vtMissing, adOpenKeyset,
; 148  : 			//			adLockBatchOptimistic, -1);
; 149  : 
; 150  : 			validCrlCount = spRS->RecordCount;

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv732[ebp], eax
	mov	ecx, DWORD PTR tv732[ebp]
	call	?GetRecordCount@Recordset15@@QAEJXZ	; Recordset15::GetRecordCount
	mov	DWORD PTR tv733[ebp], eax
	mov	edx, DWORD PTR tv733[ebp]
	mov	DWORD PTR _validCrlCount$[ebp], edx

; 151  : 			//if (validCrlCount == -1)
; 152  : 			//{
; 153  : 			//	spRS->Open(selectCRLCommand, 
; 154  : 			//	vtMissing, adOpenKeyset,
; 155  : 			//	adLockBatchOptimistic, -1);
; 156  : 			//}
; 157  : 			//validCrlCount = spRS->RecordCount;
; 158  : 
; 159  : 			if (validCrlCount > 0)

	cmp	DWORD PTR _validCrlCount$[ebp], 0
	jle	$L182665

; 160  : 			{
; 161  : 				crlList = (PDS_DATA_BLOB *)zMalloc(sizeof(PDS_DATA_BLOB) * spRS->RecordCount);

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv734[ebp], eax
	mov	ecx, DWORD PTR tv734[ebp]
	call	?GetRecordCount@Recordset15@@QAEJXZ	; Recordset15::GetRecordCount
	mov	DWORD PTR tv735[ebp], eax
	push	OFFSET FLAT:$SG182668
	push	161					; 000000a1H
	push	OFFSET FLAT:$SG182669
	mov	eax, DWORD PTR tv735[ebp]
	shl	eax, 2
	push	eax
	call	_myMalloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _crlList$[ebp], eax

; 162  : 				if (crlTimeoutInMinutes != 0) // A finite CRL expiry is enforced by the application

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$L182670
$L182672:

; 163  : 				{
; 164  : 					while(spRS->adoEOF == false)

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv736[ebp], eax
	mov	ecx, DWORD PTR tv736[ebp]
	call	?GetadoEOF@Recordset15@@QAEFXZ		; Recordset15::GetadoEOF
	mov	WORD PTR tv737[ebp], ax
	movsx	edx, WORD PTR tv737[ebp]
	test	edx, edx
	jne	$L182673

; 165  : 					{
; 166  : 						SYSTEMTIME curTime;
; 167  : 						GetSystemTime(&curTime);

	mov	esi, esp
	lea	eax, DWORD PTR _curTime$182674[ebp]
	push	eax
	call	DWORD PTR __imp__GetSystemTime@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 168  : 						_bstr_t fetchTime = _bstr_t(RsITEM(spRS, 1L));

	push	3
	push	1
	lea	ecx, DWORD PTR $T184477[ebp]
	call	??0_variant_t@@QAE@JG@Z			; _variant_t::_variant_t
	mov	DWORD PTR tv738[ebp], eax
	mov	ecx, DWORD PTR tv738[ebp]
	mov	DWORD PTR tv657[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv739[ebp], eax
	lea	edx, DWORD PTR $T184476[ebp]
	push	edx
	mov	ecx, DWORD PTR tv739[ebp]
	call	?GetFields@Recordset15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@XZ ; Recordset15::GetFields
	mov	DWORD PTR tv740[ebp], eax
	mov	eax, DWORD PTR tv740[ebp]
	mov	DWORD PTR tv659[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	mov	ecx, DWORD PTR tv659[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUFields@@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv741[ebp], eax
	mov	ecx, DWORD PTR tv657[ebp]
	push	ecx
	lea	edx, DWORD PTR $T184478[ebp]
	push	edx
	mov	ecx, DWORD PTR tv741[ebp]
	call	?GetItem@Fields15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@ABV_variant_t@@@Z ; Fields15::GetItem
	mov	DWORD PTR tv742[ebp], eax
	mov	eax, DWORD PTR tv742[ebp]
	mov	DWORD PTR tv661[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	mov	ecx, DWORD PTR tv661[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUField@@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv743[ebp], eax
	lea	ecx, DWORD PTR $T184479[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv743[ebp]
	call	?GetValue@Field20@@QAE?AV_variant_t@@XZ	; Field20::GetValue
	mov	DWORD PTR tv744[ebp], eax
	mov	edx, DWORD PTR tv744[ebp]
	mov	DWORD PTR tv663[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 23		; 00000017H
	mov	eax, DWORD PTR tv663[ebp]
	push	eax
	lea	ecx, DWORD PTR _fetchTime$182675[ebp]
	call	??0_bstr_t@@QAE@ABV_variant_t@@@Z	; _bstr_t::_bstr_t
	mov	DWORD PTR tv745[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
	lea	ecx, DWORD PTR $T184479[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	lea	ecx, DWORD PTR $T184478[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	ecx, DWORD PTR $T184476[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	lea	ecx, DWORD PTR $T184477[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t

; 169  : 						LPSYSTEMTIME sysFetchTime = vbNowTimeToSystem((BYTE *)(char *)fetchTime);

	lea	ecx, DWORD PTR _fetchTime$182675[ebp]
	call	??B_bstr_t@@QBEPADXZ			; _bstr_t::operator char *
	mov	DWORD PTR tv746[ebp], eax
	mov	ecx, DWORD PTR tv746[ebp]
	push	ecx
	call	_vbNowTimeToSystem
	add	esp, 4
	mov	DWORD PTR _sysFetchTime$182681[ebp], eax

; 170  : 						localTimeToUtcTime(sysFetchTime);

	mov	edx, DWORD PTR _sysFetchTime$182681[ebp]
	push	edx
	call	_localTimeToUtcTime
	add	esp, 4

; 171  : 						if (GetTimeDifferenceInMinutes(&curTime, sysFetchTime) >= crlTimeoutInMinutes)

	mov	eax, DWORD PTR _sysFetchTime$182681[ebp]
	push	eax
	lea	ecx, DWORD PTR _curTime$182674[ebp]
	push	ecx
	call	?GetTimeDifferenceInMinutes@@YAJPAU_SYSTEMTIME@@0@Z ; GetTimeDifferenceInMinutes
	add	esp, 8
	mov	DWORD PTR tv747[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv747[ebp]
	cmp	eax, DWORD PTR [edx]
	jb	SHORT $L182684

; 172  : 						{
; 173  : 							//Delete the CRL entry from the CRL Cache database
; 174  : 							//MessageBox(NULL, "Calling Delete Record", "FetchCRLFromCRLCache", MB_OK);
; 175  : 							spRS->Delete(adAffectCurrent);

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv748[ebp], eax
	push	1
	mov	ecx, DWORD PTR tv748[ebp]
	call	?Delete@Recordset15@@QAEJW4AffectEnum@@@Z ; Recordset15::Delete

; 176  : 							//Decrement the number of maching CRLs by one
; 177  : 							validCrlCount--;

	mov	ecx, DWORD PTR _validCrlCount$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _validCrlCount$[ebp], ecx

; 178  : 							spRS->MoveNext();

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv749[ebp], eax
	mov	ecx, DWORD PTR tv749[ebp]
	call	?MoveNext@Recordset15@@QAEJXZ		; Recordset15::MoveNext

; 179  : 						}
; 180  : 						else

	jmp	$L182685
$L182684:

; 181  : 						{
; 182  : 							_bstr_t base64CrlData =_bstr_t(RsITEM(spRS, 0L));

	push	3
	push	0
	lea	ecx, DWORD PTR $T184481[ebp]
	call	??0_variant_t@@QAE@JG@Z			; _variant_t::_variant_t
	mov	DWORD PTR tv750[ebp], eax
	mov	edx, DWORD PTR tv750[ebp]
	mov	DWORD PTR tv666[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv751[ebp], eax
	lea	eax, DWORD PTR $T184480[ebp]
	push	eax
	mov	ecx, DWORD PTR tv751[ebp]
	call	?GetFields@Recordset15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@XZ ; Recordset15::GetFields
	mov	DWORD PTR tv752[ebp], eax
	mov	ecx, DWORD PTR tv752[ebp]
	mov	DWORD PTR tv668[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 30		; 0000001eH
	mov	ecx, DWORD PTR tv668[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUFields@@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv753[ebp], eax
	mov	edx, DWORD PTR tv666[ebp]
	push	edx
	lea	eax, DWORD PTR $T184482[ebp]
	push	eax
	mov	ecx, DWORD PTR tv753[ebp]
	call	?GetItem@Fields15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@ABV_variant_t@@@Z ; Fields15::GetItem
	mov	DWORD PTR tv754[ebp], eax
	mov	ecx, DWORD PTR tv754[ebp]
	mov	DWORD PTR tv670[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	mov	ecx, DWORD PTR tv670[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUField@@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv755[ebp], eax
	lea	edx, DWORD PTR $T184483[ebp]
	push	edx
	mov	ecx, DWORD PTR tv755[ebp]
	call	?GetValue@Field20@@QAE?AV_variant_t@@XZ	; Field20::GetValue
	mov	DWORD PTR tv756[ebp], eax
	mov	eax, DWORD PTR tv756[ebp]
	mov	DWORD PTR tv672[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
	mov	ecx, DWORD PTR tv672[ebp]
	push	ecx
	lea	ecx, DWORD PTR _base64CrlData$182686[ebp]
	call	??0_bstr_t@@QAE@ABV_variant_t@@@Z	; _bstr_t::_bstr_t
	mov	DWORD PTR tv757[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 37		; 00000025H
	lea	ecx, DWORD PTR $T184483[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 36		; 00000024H
	lea	ecx, DWORD PTR $T184482[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
	mov	BYTE PTR __$EHRec$[ebp+12], 35		; 00000023H
	lea	ecx, DWORD PTR $T184480[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
	mov	BYTE PTR __$EHRec$[ebp+12], 34		; 00000022H
	lea	ecx, DWORD PTR $T184481[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t

; 183  : 							cbData = base64decodeSize(strlen((const char *)base64CrlData));

	lea	ecx, DWORD PTR _base64CrlData$182686[ebp]
	call	??B_bstr_t@@QBEPBDXZ			; _bstr_t::operator char const *
	mov	DWORD PTR tv758[ebp], eax
	mov	edx, DWORD PTR tv758[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	push	eax
	call	_base64decodeSize
	add	esp, 4
	mov	DWORD PTR _cbData$[ebp], eax

; 184  : 							pbData = (BYTE *)zMalloc(cbData+1);

	push	OFFSET FLAT:$SG182694
	push	184					; 000000b8H
	push	OFFSET FLAT:$SG182695
	mov	eax, DWORD PTR _cbData$[ebp]
	add	eax, 1
	push	eax
	call	_myMalloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pbData$[ebp], eax

; 185  : 							crlData = (PDS_DATA_BLOB)zMalloc(sizeof(DS_DATA_BLOB));

	push	OFFSET FLAT:$SG182698
	push	185					; 000000b9H
	push	OFFSET FLAT:$SG182699
	push	8
	call	_myMalloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _crlData$[ebp], eax

; 186  : 							if ((crlData->cbData = base64decode((unsigned char *)(const char *)base64CrlData, (unsigned char *)pbData, cbData+1)) == -1)

	lea	ecx, DWORD PTR _base64CrlData$182686[ebp]
	call	??B_bstr_t@@QBEPBDXZ			; _bstr_t::operator char const *
	mov	DWORD PTR tv759[ebp], eax
	mov	ecx, DWORD PTR _cbData$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pbData$[ebp]
	push	edx
	mov	eax, DWORD PTR tv759[ebp]
	push	eax
	call	_base64decode
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _crlData$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _crlData$[ebp]
	cmp	DWORD PTR [edx+4], -1
	jne	SHORT $L182703

; 187  : 							{
; 188  : 								setError(SigHandle, BASE64_ERROR);

	push	2
	mov	eax, DWORD PTR _SigHandle$[ebp]
	push	eax
	call	_setError
	add	esp, 8

; 189  : 								return NULL;

	mov	DWORD PTR $T184484[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	lea	ecx, DWORD PTR _base64CrlData$182686[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _fetchTime$182675[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _selectCRLCommand$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	mov	eax, DWORD PTR $T184484[ebp]
	jmp	$L182623
$L182703:

; 190  : 							}
; 191  : 							crlData->pbData = pbData;

	mov	ecx, DWORD PTR _crlData$[ebp]
	mov	edx, DWORD PTR _pbData$[ebp]
	mov	DWORD PTR [ecx], edx

; 192  : 							crlList[i] = crlData;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _crlList$[ebp]
	mov	edx, DWORD PTR _crlData$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 193  : 							i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 194  : 							spRS->MoveNext();

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv760[ebp], eax
	mov	ecx, DWORD PTR tv760[ebp]
	call	?MoveNext@Recordset15@@QAEJXZ		; Recordset15::MoveNext

; 195  : 						}

	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	lea	ecx, DWORD PTR _base64CrlData$182686[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L182685:

; 196  : 						zFree(sysFetchTime);

	push	OFFSET FLAT:$SG182705
	push	196					; 000000c4H
	push	OFFSET FLAT:$SG182706
	mov	ecx, DWORD PTR _sysFetchTime$182681[ebp]
	push	ecx
	call	_myFree
	add	esp, 16					; 00000010H

; 197  : 					}//End While

	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _fetchTime$182675[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	jmp	$L182672
$L182673:

; 198  : 				}
; 199  : 				else

	jmp	$L182665
$L182670:

; 200  : 				{
; 201  : 					if (spRS->RecordCount > 0)

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv761[ebp], eax
	mov	ecx, DWORD PTR tv761[ebp]
	call	?GetRecordCount@Recordset15@@QAEJXZ	; Recordset15::GetRecordCount
	mov	DWORD PTR tv762[ebp], eax
	cmp	DWORD PTR tv762[ebp], 0
	jle	$L182665

; 202  : 					{
; 203  : //						crlList = (PDS_DATA_BLOB *)zMalloc(sizeof(PDS_DATA_BLOB) * spRS->RecordCount);
; 204  : 						i=0;

	mov	DWORD PTR _i$[ebp], 0
$L182710:

; 205  : 						while(spRS->adoEOF == false)

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv763[ebp], eax
	mov	ecx, DWORD PTR tv763[ebp]
	call	?GetadoEOF@Recordset15@@QAEFXZ		; Recordset15::GetadoEOF
	mov	WORD PTR tv764[ebp], ax
	movsx	edx, WORD PTR tv764[ebp]
	test	edx, edx
	jne	$L182665

; 206  : 						{
; 207  : 							_bstr_t base64CrlData =_bstr_t(RsITEM(spRS, 0L));

	push	3
	push	0
	lea	ecx, DWORD PTR $T184486[ebp]
	call	??0_variant_t@@QAE@JG@Z			; _variant_t::_variant_t
	mov	DWORD PTR tv765[ebp], eax
	mov	eax, DWORD PTR tv765[ebp]
	mov	DWORD PTR tv681[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 38		; 00000026H
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv766[ebp], eax
	lea	ecx, DWORD PTR $T184485[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv766[ebp]
	call	?GetFields@Recordset15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@XZ ; Recordset15::GetFields
	mov	DWORD PTR tv767[ebp], eax
	mov	edx, DWORD PTR tv767[ebp]
	mov	DWORD PTR tv683[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 39		; 00000027H
	mov	ecx, DWORD PTR tv683[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUFields@@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv768[ebp], eax
	mov	eax, DWORD PTR tv681[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184487[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv768[ebp]
	call	?GetItem@Fields15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@ABV_variant_t@@@Z ; Fields15::GetItem
	mov	DWORD PTR tv769[ebp], eax
	mov	edx, DWORD PTR tv769[ebp]
	mov	DWORD PTR tv685[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 40		; 00000028H
	mov	ecx, DWORD PTR tv685[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUField@@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv770[ebp], eax
	lea	eax, DWORD PTR $T184488[ebp]
	push	eax
	mov	ecx, DWORD PTR tv770[ebp]
	call	?GetValue@Field20@@QAE?AV_variant_t@@XZ	; Field20::GetValue
	mov	DWORD PTR tv771[ebp], eax
	mov	ecx, DWORD PTR tv771[ebp]
	mov	DWORD PTR tv687[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 41		; 00000029H
	mov	edx, DWORD PTR tv687[ebp]
	push	edx
	lea	ecx, DWORD PTR _base64CrlData$182712[ebp]
	call	??0_bstr_t@@QAE@ABV_variant_t@@@Z	; _bstr_t::_bstr_t
	mov	DWORD PTR tv772[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 46		; 0000002eH
	lea	ecx, DWORD PTR $T184488[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 45		; 0000002dH
	lea	ecx, DWORD PTR $T184487[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
	mov	BYTE PTR __$EHRec$[ebp+12], 44		; 0000002cH
	lea	ecx, DWORD PTR $T184485[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
	mov	BYTE PTR __$EHRec$[ebp+12], 43		; 0000002bH
	lea	ecx, DWORD PTR $T184486[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t

; 208  : 							cbData = base64decodeSize(strlen((const char *)base64CrlData));

	lea	ecx, DWORD PTR _base64CrlData$182712[ebp]
	call	??B_bstr_t@@QBEPBDXZ			; _bstr_t::operator char const *
	mov	DWORD PTR tv773[ebp], eax
	mov	eax, DWORD PTR tv773[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	call	_base64decodeSize
	add	esp, 4
	mov	DWORD PTR _cbData$[ebp], eax

; 209  : 							pbData = (BYTE *)zMalloc(cbData+1);

	push	OFFSET FLAT:$SG182720
	push	209					; 000000d1H
	push	OFFSET FLAT:$SG182721
	mov	ecx, DWORD PTR _cbData$[ebp]
	add	ecx, 1
	push	ecx
	call	_myMalloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pbData$[ebp], eax

; 210  : 							crlData = (PDS_DATA_BLOB)zMalloc(sizeof(DS_DATA_BLOB));

	push	OFFSET FLAT:$SG182724
	push	210					; 000000d2H
	push	OFFSET FLAT:$SG182725
	push	8
	call	_myMalloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _crlData$[ebp], eax

; 211  : 							if ((crlData->cbData = base64decode((unsigned char *)(const char *)base64CrlData, (unsigned char *)pbData, cbData+1)) == -1)

	lea	ecx, DWORD PTR _base64CrlData$182712[ebp]
	call	??B_bstr_t@@QBEPBDXZ			; _bstr_t::operator char const *
	mov	DWORD PTR tv774[ebp], eax
	mov	edx, DWORD PTR _cbData$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _pbData$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv774[ebp]
	push	ecx
	call	_base64decode
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _crlData$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _crlData$[ebp]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $L182729

; 212  : 							{
; 213  : 								setError(SigHandle, BASE64_ERROR);

	push	2
	mov	ecx, DWORD PTR _SigHandle$[ebp]
	push	ecx
	call	_setError
	add	esp, 8

; 214  : 								return NULL;

	mov	DWORD PTR $T184489[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _base64CrlData$182712[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _selectCRLCommand$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	mov	eax, DWORD PTR $T184489[ebp]
	jmp	$L182623
$L182729:

; 215  : 							}
; 216  : 							crlData->pbData = pbData;

	mov	edx, DWORD PTR _crlData$[ebp]
	mov	eax, DWORD PTR _pbData$[ebp]
	mov	DWORD PTR [edx], eax

; 217  : 							crlList[i] = crlData;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _crlList$[ebp]
	mov	eax, DWORD PTR _crlData$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 218  : 							i++;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 219  : 							spRS->MoveNext();

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv775[ebp], eax
	mov	ecx, DWORD PTR tv775[ebp]
	call	?MoveNext@Recordset15@@QAEJXZ		; Recordset15::MoveNext

; 220  : 						}

	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR _base64CrlData$182712[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	jmp	$L182710
$L182665:

; 221  : 					}
; 222  : 				}
; 223  : 			}// End if
; 224  : 			*crlCount = i;

	mov	edx, DWORD PTR _crlCount$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx], eax

; 225  : 			spRS->Close();

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv776[ebp], eax
	mov	ecx, DWORD PTR tv776[ebp]
	call	?Close@Recordset15@@QAEJXZ		; Recordset15::Close

; 226  : 			spCON->Close();

	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv777[ebp], eax
	mov	ecx, DWORD PTR tv777[ebp]
	call	?Close@Connection15@@QAEJXZ		; Connection15::Close
	jmp	$L184502
$L184503:

; 227  : 		}
; 228  : 		catch( _com_error &e)
; 229  : 		{
; 230  : 			_bstr_t bstrSource(e.Source());

	lea	ecx, DWORD PTR _bstrSource$182733[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$182731[ebp]
	call	?Source@_com_error@@QBE?AV_bstr_t@@XZ	; _com_error::Source
	mov	BYTE PTR __$EHRec$[ebp+12], 48		; 00000030H

; 231  : 			_bstr_t bs =  _bstr_t(" Error: ") + _bstr_t(e.Error()) + _bstr_t(" Msg: ") 
; 232  : 				+ _bstr_t(e.ErrorMessage()) + _bstr_t(" Description: ") 
; 233  : 				+ _bstr_t(e.Description());

	push	3
	mov	ecx, DWORD PTR _e$182731[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	lea	ecx, DWORD PTR $T184492[ebp]
	call	??0_variant_t@@QAE@JG@Z			; _variant_t::_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 49		; 00000031H
	lea	edx, DWORD PTR $T184500[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$182731[ebp]
	call	?Description@_com_error@@QBE?AV_bstr_t@@XZ ; _com_error::Description
	mov	DWORD PTR tv520[ebp], eax
	mov	eax, DWORD PTR tv520[ebp]
	mov	DWORD PTR tv697[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 50		; 00000032H
	push	OFFSET FLAT:$SG182750
	lea	ecx, DWORD PTR $T184498[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv507[ebp], eax
	mov	ecx, DWORD PTR tv507[ebp]
	mov	DWORD PTR tv699[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 51		; 00000033H
	mov	ecx, DWORD PTR _e$182731[ebp]
	call	?ErrorMessage@_com_error@@QBEPBDXZ	; _com_error::ErrorMessage
	push	eax
	lea	ecx, DWORD PTR $T184496[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv778[ebp], eax
	mov	edx, DWORD PTR tv778[ebp]
	mov	DWORD PTR tv701[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 52		; 00000034H
	push	OFFSET FLAT:$SG182749
	lea	ecx, DWORD PTR $T184494[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv779[ebp], eax
	mov	eax, DWORD PTR tv779[ebp]
	mov	DWORD PTR tv703[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 53		; 00000035H
	lea	ecx, DWORD PTR $T184492[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T184491[ebp]
	call	??0_bstr_t@@QAE@ABV_variant_t@@@Z	; _bstr_t::_bstr_t
	mov	DWORD PTR tv780[ebp], eax
	mov	edx, DWORD PTR tv780[ebp]
	mov	DWORD PTR tv705[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 54		; 00000036H
	push	OFFSET FLAT:$SG182748
	lea	ecx, DWORD PTR $T184490[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv781[ebp], eax
	mov	eax, DWORD PTR tv781[ebp]
	mov	DWORD PTR tv707[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 55		; 00000037H
	mov	ecx, DWORD PTR tv705[ebp]
	push	ecx
	lea	edx, DWORD PTR $T184493[ebp]
	push	edx
	mov	ecx, DWORD PTR tv707[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv782[ebp], eax
	mov	eax, DWORD PTR tv782[ebp]
	mov	DWORD PTR tv709[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 56		; 00000038H
	mov	ecx, DWORD PTR tv703[ebp]
	push	ecx
	lea	edx, DWORD PTR $T184495[ebp]
	push	edx
	mov	ecx, DWORD PTR tv709[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv783[ebp], eax
	mov	eax, DWORD PTR tv783[ebp]
	mov	DWORD PTR tv711[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 57		; 00000039H
	mov	ecx, DWORD PTR tv701[ebp]
	push	ecx
	lea	edx, DWORD PTR $T184497[ebp]
	push	edx
	mov	ecx, DWORD PTR tv711[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv784[ebp], eax
	mov	eax, DWORD PTR tv784[ebp]
	mov	DWORD PTR tv713[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 58		; 0000003aH
	mov	ecx, DWORD PTR tv699[ebp]
	push	ecx
	lea	edx, DWORD PTR $T184499[ebp]
	push	edx
	mov	ecx, DWORD PTR tv713[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv785[ebp], eax
	mov	eax, DWORD PTR tv785[ebp]
	mov	DWORD PTR tv715[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 59		; 0000003bH
	mov	ecx, DWORD PTR tv697[ebp]
	push	ecx
	lea	edx, DWORD PTR _bs$182734[ebp]
	push	edx
	mov	ecx, DWORD PTR tv715[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 71		; 00000047H
	lea	ecx, DWORD PTR $T184499[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 70		; 00000046H
	lea	ecx, DWORD PTR $T184497[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 69		; 00000045H
	lea	ecx, DWORD PTR $T184495[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 68		; 00000044H
	lea	ecx, DWORD PTR $T184493[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 67		; 00000043H
	lea	ecx, DWORD PTR $T184490[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 66		; 00000042H
	lea	ecx, DWORD PTR $T184491[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 65		; 00000041H
	lea	ecx, DWORD PTR $T184494[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 64		; 00000040H
	lea	ecx, DWORD PTR $T184496[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 63		; 0000003fH
	lea	ecx, DWORD PTR $T184498[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 62		; 0000003eH
	lea	ecx, DWORD PTR $T184500[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 61		; 0000003dH
	lea	ecx, DWORD PTR $T184492[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t

; 234  : 			CRLCacheInitialized = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 235  : 			char *errorDetail = (char *)bs;

	lea	ecx, DWORD PTR _bs$182734[ebp]
	call	??B_bstr_t@@QBEPADXZ			; _bstr_t::operator char *
	mov	DWORD PTR _errorDetail$182751[ebp], eax

; 236  : 			setErrorWithDescr(SigHandle, ADO_ERROR, (unsigned char *)errorDetail);

	mov	ecx, DWORD PTR _errorDetail$182751[ebp]
	push	ecx
	push	122					; 0000007aH
	mov	edx, DWORD PTR _SigHandle$[ebp]
	push	edx
	call	_setErrorWithDescr
	add	esp, 12					; 0000000cH

; 237  : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 48		; 00000030H
	lea	ecx, DWORD PTR _bs$182734[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 47		; 0000002fH
	lea	ecx, DWORD PTR _bstrSource$182733[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	eax, $L184502
	ret	0
$L184502:
	mov	DWORD PTR __$EHRec$[ebp+12], 9

; 238  : 	}
; 239  : 
; 240  : 	zFree(normCertName->pbData);

	push	OFFSET FLAT:$SG182754
	push	240					; 000000f0H
	push	OFFSET FLAT:$SG182755
	mov	eax, DWORD PTR _normCertName$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_myFree
	add	esp, 16					; 00000010H

; 241  : 	zFree(normCertName);

	push	OFFSET FLAT:$SG182756
	push	241					; 000000f1H
	push	OFFSET FLAT:$SG182757
	mov	edx, DWORD PTR _normCertName$[ebp]
	push	edx
	call	_myFree
	add	esp, 16					; 00000010H

; 242  : 
; 243  : 	if (*crlCount == 0)

	mov	eax, DWORD PTR _crlCount$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L182758

; 244  : 	{
; 245  : 		zFree(crlList);

	push	OFFSET FLAT:$SG182759
	push	245					; 000000f5H
	push	OFFSET FLAT:$SG182760
	mov	ecx, DWORD PTR _crlList$[ebp]
	push	ecx
	call	_myFree
	add	esp, 16					; 00000010H

; 246  : 		crlList = NULL;

	mov	DWORD PTR _crlList$[ebp], 0
$L182758:

; 247  : 	}
; 248  : #endif
; 249  : 	return crlList;

	mov	edx, DWORD PTR _crlList$[ebp]
	mov	DWORD PTR $T184501[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _selectCRLCommand$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	mov	eax, DWORD PTR $T184501[ebp]
$L182623:

; 250  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184561
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 864				; 00000360H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L184561:
	DD	11					; 0000000bH
	DD	$L184560
$L184560:
	DD	-32					; ffffffe0H
	DD	4
	DD	$L184548
	DD	-44					; ffffffd4H
	DD	4
	DD	$L184549
	DD	-84					; ffffffacH
	DD	16					; 00000010H
	DD	$L184550
	DD	-104					; ffffff98H
	DD	4
	DD	$L184551
	DD	-136					; ffffff78H
	DD	16					; 00000010H
	DD	$L184552
	DD	-148					; ffffff6cH
	DD	4
	DD	$L184553
	DD	-164					; ffffff5cH
	DD	4
	DD	$L184554
	DD	-176					; ffffff50H
	DD	4
	DD	$L184555
	DD	-188					; ffffff44H
	DD	4
	DD	$L184556
	DD	-200					; ffffff38H
	DD	4
	DD	$L184557
	DD	-212					; ffffff2cH
	DD	4
	DD	$L184558
$L184558:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$L184557:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$L184556:
	DB	101					; 00000065H
	DB	0
$L184555:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	54					; 00000036H
	DB	52					; 00000034H
	DB	67					; 00000043H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$L184554:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	54					; 00000036H
	DB	52					; 00000034H
	DB	67					; 00000043H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$L184553:
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$L184552:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$L184551:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	82					; 00000052H
	DB	76					; 0000004cH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$L184550:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$L184549:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	83					; 00000053H
	DB	0
$L184548:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	79					; 0000004fH
	DB	78					; 0000004eH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
$L184504:
	lea	ecx, DWORD PTR _spCON$[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
$L184505:
	lea	ecx, DWORD PTR _spRS$[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
$L184506:
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184507:
	lea	ecx, DWORD PTR $T184470[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184508:
	lea	ecx, DWORD PTR $T184468[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184509:
	lea	ecx, DWORD PTR $T184466[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184510:
	lea	ecx, DWORD PTR $T184467[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184511:
	lea	ecx, DWORD PTR $T184469[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184512:
	lea	ecx, DWORD PTR _selectCRLCommand$[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184513:
	mov	ecx, DWORD PTR $T184471[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184514:
	mov	ecx, DWORD PTR $T184472[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184515:
	mov	ecx, DWORD PTR $T184473[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184516:
	mov	ecx, DWORD PTR $T184474[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184517:
	lea	ecx, DWORD PTR $T184475[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184518:
	lea	ecx, DWORD PTR $T184477[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184519:
	lea	ecx, DWORD PTR $T184476[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
$L184520:
	lea	ecx, DWORD PTR $T184478[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
$L184521:
	lea	ecx, DWORD PTR $T184479[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184522:
	lea	ecx, DWORD PTR _fetchTime$182675[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184523:
	lea	ecx, DWORD PTR $T184481[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184524:
	lea	ecx, DWORD PTR $T184480[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
$L184525:
	lea	ecx, DWORD PTR $T184482[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
$L184526:
	lea	ecx, DWORD PTR $T184483[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184527:
	lea	ecx, DWORD PTR _base64CrlData$182686[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184528:
	lea	ecx, DWORD PTR $T184486[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184529:
	lea	ecx, DWORD PTR $T184485[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
$L184530:
	lea	ecx, DWORD PTR $T184487[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
$L184531:
	lea	ecx, DWORD PTR $T184488[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184532:
	lea	ecx, DWORD PTR _base64CrlData$182712[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184533:
	lea	ecx, DWORD PTR _bstrSource$182733[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184534:
	lea	ecx, DWORD PTR $T184492[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184535:
	lea	ecx, DWORD PTR $T184500[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184536:
	lea	ecx, DWORD PTR $T184498[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184537:
	lea	ecx, DWORD PTR $T184496[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184538:
	lea	ecx, DWORD PTR $T184494[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184539:
	lea	ecx, DWORD PTR $T184491[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184540:
	lea	ecx, DWORD PTR $T184490[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184541:
	lea	ecx, DWORD PTR $T184493[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184542:
	lea	ecx, DWORD PTR $T184495[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184543:
	lea	ecx, DWORD PTR $T184497[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184544:
	lea	ecx, DWORD PTR $T184499[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184545:
	lea	ecx, DWORD PTR _bs$182734[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
__ehhandler$?FetchCRLFromCRLCache@CRLCache@@QAEPAPAU_DS_DATA_BLOB@@PAU_CRYPTOAPI_BLOB@@PAIPAU_GLOBAL_SIG@@@Z:
	mov	eax, OFFSET FLAT:$T184547
	jmp	___CxxFrameHandler
text$x	ENDS
?FetchCRLFromCRLCache@CRLCache@@QAEPAPAU_DS_DATA_BLOB@@PAU_CRYPTOAPI_BLOB@@PAIPAU_GLOBAL_SIG@@@Z ENDP ; CRLCache::FetchCRLFromCRLCache
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comutil.h
;	COMDAT ??B_bstr_t@@QBEPBDXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
??B_bstr_t@@QBEPBDXZ PROC NEAR				; _bstr_t::operator char const *, COMDAT
; _this$ = ecx

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 419  :     return (m_Data != NULL) ? m_Data->GetString() : NULL;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L184566
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetString@Data_t@_bstr_t@@QBEPBDXZ	; _bstr_t::Data_t::GetString
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $L184567
$L184566:
	mov	DWORD PTR tv68[ebp], 0
$L184567:
	mov	eax, DWORD PTR tv68[ebp]

; 420  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??B_bstr_t@@QBEPBDXZ ENDP				; _bstr_t::operator char const *
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0_variant_t@@QAE@ABV_bstr_t@@@Z
_TEXT	SEGMENT
_bstr$ = -8						; size = 4
_this$ = -4						; size = 4
_bstrSrc$ = 8						; size = 4
??0_variant_t@@QAE@ABV_bstr_t@@@Z PROC NEAR		; _variant_t::_variant_t, COMDAT
; _this$ = ecx

; 1165 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1166 :     V_VT(this) = VT_BSTR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax], 8

; 1167 : 
; 1168 :     BSTR bstr = static_cast<wchar_t*>(bstrSrc);

	mov	ecx, DWORD PTR _bstrSrc$[ebp]
	call	??B_bstr_t@@QBEPAGXZ			; _bstr_t::operator unsigned short *
	mov	DWORD PTR _bstr$[ebp], eax

; 1169 :     if (bstr == NULL) {

	cmp	DWORD PTR _bstr$[ebp], 0
	jne	SHORT $L161741

; 1170 :         V_BSTR(this) = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 1171 :     }
; 1172 :     else {

	jmp	SHORT $L161738
$L161741:

; 1173 :         V_BSTR(this) = ::SysAllocStringByteLen(reinterpret_cast<char*>(bstr),
; 1174 :                                                ::SysStringByteLen(bstr));

	mov	esi, esp
	mov	edx, DWORD PTR _bstr$[ebp]
	push	edx
	call	DWORD PTR __imp__SysStringByteLen@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _bstr$[ebp]
	push	eax
	call	DWORD PTR __imp__SysAllocStringByteLen@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1175 :         if (V_BSTR(this) == NULL) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $L161738

; 1176 :             _com_issue_error(E_OUTOFMEMORY);

	push	-2147024882				; 8007000eH
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L161738:

; 1177 :         }
; 1178 :     }
; 1179 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_variant_t@@QAE@ABV_bstr_t@@@Z ENDP			; _variant_t::_variant_t
_TEXT	ENDS
PUBLIC	__GUID_0000054c_0000_0010_8000_00aa006d2ea4
PUBLIC	??0_variant_t@@QAE@AAUtagVARIANT@@_N@Z		; _variant_t::_variant_t
;	COMDAT __GUID_0000054c_0000_0010_8000_00aa006d2ea4
; File c:\activex\xmlsign\debug\msado15.tli
CONST	SEGMENT
__GUID_0000054c_0000_0010_8000_00aa006d2ea4 DD 054cH
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	06dH
	DB	02eH
	DB	0a4H
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetValue@Field20@@QAE?AV_variant_t@@XZ
_TEXT	SEGMENT
$T184573 = -36						; size = 4
__hr$ = -32						; size = 4
__result$ = -24						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetValue@Field20@@QAE?AV_variant_t@@XZ PROC NEAR	; Field20::GetValue, COMDAT
; _this$ = ecx

; 224  : inline _variant_t Field20::GetValue ( ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T184573[ebp], 0

; 225  :     VARIANT _result;
; 226  :     VariantInit(&_result);

	mov	esi, esp
	lea	eax, DWORD PTR __result$[ebp]
	push	eax
	call	DWORD PTR __imp__VariantInit@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 227  :     HRESULT _hr = get_Value(&_result);

	mov	esi, esp
	lea	ecx, DWORD PTR __result$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	DWORD PTR [eax+52]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 228  :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L167537
	push	OFFSET FLAT:__GUID_0000054c_0000_0010_8000_00aa006d2ea4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __hr$[ebp]
	push	eax
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L167537:

; 229  :     return _variant_t(_result, false);

	push	0
	lea	ecx, DWORD PTR __result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0_variant_t@@QAE@AAUtagVARIANT@@_N@Z	; _variant_t::_variant_t
	mov	edx, DWORD PTR $T184573[ebp]
	or	edx, 1
	mov	DWORD PTR $T184573[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 230  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184577
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L184577:
	DD	1
	DD	$L184576
$L184576:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$L184575
$L184575:
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?GetValue@Field20@@QAE?AV_variant_t@@XZ ENDP		; Field20::GetValue
_TEXT	ENDS
EXTRN	__imp__VariantCopy@8:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comutil.h
;	COMDAT ??0_variant_t@@QAE@AAUtagVARIANT@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_varSrc$ = 8						; size = 4
_fCopy$ = 12						; size = 1
??0_variant_t@@QAE@AAUtagVARIANT@@_N@Z PROC NEAR	; _variant_t::_variant_t, COMDAT
; _this$ = ecx

; 1071 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1072 :     if (fCopy) {

	movzx	eax, BYTE PTR _fCopy$[ebp]
	test	eax, eax
	je	SHORT $L161692

; 1073 :         ::VariantInit(this);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	DWORD PTR __imp__VariantInit@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1074 :         _com_util::CheckError(::VariantCopy(this, &varSrc));

	mov	esi, esp
	mov	edx, DWORD PTR _varSrc$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__VariantCopy@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	?CheckError@_com_util@@YAXJ@Z		; _com_util::CheckError
	add	esp, 4

; 1075 :     } 
; 1076 :     else {

	jmp	SHORT $L161691
$L161692:

; 1077 :         memcpy(this, &varSrc, sizeof(varSrc));

	push	16					; 00000010H
	mov	ecx, DWORD PTR _varSrc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1078 :         V_VT(&varSrc) = VT_EMPTY;

	mov	eax, DWORD PTR _varSrc$[ebp]
	mov	WORD PTR [eax], 0
$L161691:

; 1079 :     }
; 1080 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0_variant_t@@QAE@AAUtagVARIANT@@_N@Z ENDP		; _variant_t::_variant_t
_TEXT	ENDS
PUBLIC	__GUID_00000506_0000_0010_8000_00aa006d2ea4
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUField@@_N@Z ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
;	COMDAT __GUID_00000506_0000_0010_8000_00aa006d2ea4
; File c:\activex\xmlsign\debug\msado15.tli
CONST	SEGMENT
__GUID_00000506_0000_0010_8000_00aa006d2ea4 DD 0506H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	06dH
	DB	02eH
	DB	0a4H
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetItem@Fields15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@ABV_variant_t@@@Z
_TEXT	SEGMENT
$T184584 = -40						; size = 4
$T184582 = -36						; size = 16
__hr$ = -20						; size = 4
__result$ = -12						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Index$ = 12						; size = 4
?GetItem@Fields15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@ABV_variant_t@@@Z PROC NEAR ; Fields15::GetItem, COMDAT
; _this$ = ecx

; 333  : inline FieldPtr Fields15::GetItem ( const _variant_t & Index ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T184584[ebp], 0

; 334  :     struct Field * _result = 0;

	mov	DWORD PTR __result$[ebp], 0

; 335  :     HRESULT _hr = get_Item(Index, &_result);

	mov	eax, DWORD PTR _Index$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T184582[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T184582[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T184582[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T184582[ebp+12], edx
	mov	esi, esp
	lea	eax, DWORD PTR __result$[ebp]
	push	eax
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR $T184582[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T184582[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T184582[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR $T184582[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	DWORD PTR [eax+40]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 336  :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L167852
	push	OFFSET FLAT:__GUID_00000506_0000_0010_8000_00aa006d2ea4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hr$[ebp]
	push	edx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L167852:

; 337  :     return FieldPtr(_result, false);

	push	0
	mov	eax, DWORD PTR __result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUField@@_N@Z ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
	mov	ecx, DWORD PTR $T184584[ebp]
	or	ecx, 1
	mov	DWORD PTR $T184584[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 338  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184588
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$L184588:
	DD	1
	DD	$L184587
$L184587:
	DD	-12					; fffffff4H
	DD	4
	DD	$L184586
$L184586:
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?GetItem@Fields15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@ABV_variant_t@@@Z ENDP ; Fields15::GetItem
_TEXT	ENDS
PUBLIC	__GUID_0000050e_0000_0010_8000_00aa006d2ea4
;	COMDAT __GUID_0000050e_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT
__GUID_0000050e_0000_0010_8000_00aa006d2ea4 DD 050eH
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	06dH
	DB	02eH
	DB	0a4H
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?PutRefActiveConnection@Recordset15@@QAEXPAUIDispatch@@@Z
_TEXT	SEGMENT
__hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pvar$ = 8						; size = 4
?PutRefActiveConnection@Recordset15@@QAEXPAUIDispatch@@@Z PROC NEAR ; Recordset15::PutRefActiveConnection, COMDAT
; _this$ = ecx

; 1353 : inline void Recordset15::PutRefActiveConnection ( IDispatch * pvar ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1354 :     HRESULT _hr = putref_ActiveConnection(pvar);

	mov	esi, esp
	mov	eax, DWORD PTR _pvar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR [edx+40]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1355 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L169997
	push	OFFSET FLAT:__GUID_0000050e_0000_0010_8000_00aa006d2ea4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hr$[ebp]
	push	edx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L169997:

; 1356 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PutRefActiveConnection@Recordset15@@QAEXPAUIDispatch@@@Z ENDP ; Recordset15::PutRefActiveConnection
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetadoEOF@Recordset15@@QAEFXZ
_TEXT	SEGMENT
__hr$ = -20						; size = 4
__result$ = -12						; size = 2
_this$ = -4						; size = 4
?GetadoEOF@Recordset15@@QAEFXZ PROC NEAR		; Recordset15::GetadoEOF, COMDAT
; _this$ = ecx

; 1415 : inline VARIANT_BOOL Recordset15::GetadoEOF ( ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1416 :     VARIANT_BOOL _result = 0;

	mov	WORD PTR __result$[ebp], 0

; 1417 :     HRESULT _hr = get_adoEOF(&_result);

	mov	esi, esp
	lea	eax, DWORD PTR __result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR [edx+80]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1418 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L170076
	push	OFFSET FLAT:__GUID_0000050e_0000_0010_8000_00aa006d2ea4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hr$[ebp]
	push	edx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L170076:

; 1419 :     return _result;

	mov	ax, WORD PTR __result$[ebp]

; 1420 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184595
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L184595:
	DD	1
	DD	$L184594
$L184594:
	DD	-12					; fffffff4H
	DD	2
	DD	$L184593
$L184593:
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?GetadoEOF@Recordset15@@QAEFXZ ENDP			; Recordset15::GetadoEOF
_TEXT	ENDS
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUFields@@_N@Z ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ?GetFields@Recordset15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@XZ
_TEXT	SEGMENT
$T184599 = -24						; size = 4
__hr$ = -20						; size = 4
__result$ = -12						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetFields@Recordset15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@XZ PROC NEAR ; Recordset15::GetFields, COMDAT
; _this$ = ecx

; 1422 : inline FieldsPtr Recordset15::GetFields ( ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T184599[ebp], 0

; 1423 :     struct Fields * _result = 0;

	mov	DWORD PTR __result$[ebp], 0

; 1424 :     HRESULT _hr = get_Fields(&_result);

	mov	esi, esp
	lea	eax, DWORD PTR __result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR [edx+84]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1425 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L170272
	push	OFFSET FLAT:__GUID_0000050e_0000_0010_8000_00aa006d2ea4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hr$[ebp]
	push	edx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L170272:

; 1426 :     return FieldsPtr(_result, false);

	push	0
	mov	eax, DWORD PTR __result$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUFields@@_N@Z ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
	mov	ecx, DWORD PTR $T184599[ebp]
	or	ecx, 1
	mov	DWORD PTR $T184599[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1427 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184603
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$L184603:
	DD	1
	DD	$L184602
$L184602:
	DD	-12					; fffffff4H
	DD	4
	DD	$L184601
$L184601:
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?GetFields@Recordset15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@XZ ENDP ; Recordset15::GetFields
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetRecordCount@Recordset15@@QAEJXZ
_TEXT	SEGMENT
__hr$ = -20						; size = 4
__result$ = -12						; size = 4
_this$ = -4						; size = 4
?GetRecordCount@Recordset15@@QAEJXZ PROC NEAR		; Recordset15::GetRecordCount, COMDAT
; _this$ = ecx

; 1453 : inline ADO_LONGPTR Recordset15::GetRecordCount ( ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1454 :     ADO_LONGPTR _result;
; 1455 :     HRESULT _hr = get_RecordCount(&_result);

	mov	esi, esp
	lea	eax, DWORD PTR __result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR [edx+104]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1456 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L170308
	push	OFFSET FLAT:__GUID_0000050e_0000_0010_8000_00aa006d2ea4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hr$[ebp]
	push	edx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L170308:

; 1457 :     return _result;

	mov	eax, DWORD PTR __result$[ebp]

; 1458 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184608
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$L184608:
	DD	1
	DD	$L184607
$L184607:
	DD	-12					; fffffff4H
	DD	4
	DD	$L184606
$L184606:
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?GetRecordCount@Recordset15@@QAEJXZ ENDP		; Recordset15::GetRecordCount
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Close@Recordset15@@QAEJXZ
_TEXT	SEGMENT
__hr$ = -8						; size = 4
_this$ = -4						; size = 4
?Close@Recordset15@@QAEJXZ PROC NEAR			; Recordset15::Close, COMDAT
; _this$ = ecx

; 1490 : inline HRESULT Recordset15::Close ( ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1491 :     HRESULT _hr = raw_Close();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	DWORD PTR [ecx+128]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1492 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L170353
	push	OFFSET FLAT:__GUID_0000050e_0000_0010_8000_00aa006d2ea4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __hr$[ebp]
	push	ecx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L170353:

; 1493 :     return _hr;

	mov	eax, DWORD PTR __hr$[ebp]

; 1494 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@Recordset15@@QAEJXZ ENDP				; Recordset15::Close
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Delete@Recordset15@@QAEJW4AffectEnum@@@Z
_TEXT	SEGMENT
__hr$ = -8						; size = 4
_this$ = -4						; size = 4
_AffectRecords$ = 8					; size = 4
?Delete@Recordset15@@QAEJW4AffectEnum@@@Z PROC NEAR	; Recordset15::Delete, COMDAT
; _this$ = ecx

; 1496 : inline HRESULT Recordset15::Delete ( enum AffectEnum AffectRecords ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1497 :     HRESULT _hr = raw_Delete(AffectRecords);

	mov	esi, esp
	mov	eax, DWORD PTR _AffectRecords$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR [edx+132]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1498 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L170360
	push	OFFSET FLAT:__GUID_0000050e_0000_0010_8000_00aa006d2ea4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __hr$[ebp]
	push	edx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L170360:

; 1499 :     return _hr;

	mov	eax, DWORD PTR __hr$[ebp]

; 1500 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@Recordset15@@QAEJW4AffectEnum@@@Z ENDP		; Recordset15::Delete
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveNext@Recordset15@@QAEJXZ
_TEXT	SEGMENT
__hr$ = -8						; size = 4
_this$ = -4						; size = 4
?MoveNext@Recordset15@@QAEJXZ PROC NEAR			; Recordset15::MoveNext, COMDAT
; _this$ = ecx

; 1516 : inline HRESULT Recordset15::MoveNext ( ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1517 :     HRESULT _hr = raw_MoveNext();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	DWORD PTR [ecx+144]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1518 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L170389
	push	OFFSET FLAT:__GUID_0000050e_0000_0010_8000_00aa006d2ea4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __hr$[ebp]
	push	ecx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L170389:

; 1519 :     return _hr;

	mov	eax, DWORD PTR __hr$[ebp]

; 1520 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MoveNext@Recordset15@@QAEJXZ ENDP			; Recordset15::MoveNext
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Open@Recordset15@@QAEJABV_variant_t@@0W4CursorTypeEnum@@W4LockTypeEnum@@J@Z
_TEXT	SEGMENT
$T184618 = -40						; size = 16
$T184617 = -24						; size = 16
__hr$ = -8						; size = 4
_this$ = -4						; size = 4
_Source$ = 8						; size = 4
_ActiveConnection$ = 12					; size = 4
_CursorType$ = 16					; size = 4
_LockType$ = 20						; size = 4
_Options$ = 24						; size = 4
?Open@Recordset15@@QAEJABV_variant_t@@0W4CursorTypeEnum@@W4LockTypeEnum@@J@Z PROC NEAR ; Recordset15::Open, COMDAT
; _this$ = ecx

; 1540 : inline HRESULT Recordset15::Open ( const _variant_t & Source, const _variant_t & ActiveConnection, enum CursorTypeEnum CursorType, enum LockTypeEnum LockType, long Options ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1541 :     HRESULT _hr = raw_Open(Source, ActiveConnection, CursorType, LockType, Options);

	mov	eax, DWORD PTR _ActiveConnection$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T184617[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T184617[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T184617[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T184617[ebp+12], edx
	mov	eax, DWORD PTR _Source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T184618[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T184618[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T184618[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T184618[ebp+12], edx
	mov	esi, esp
	mov	eax, DWORD PTR _Options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LockType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _CursorType$[ebp]
	push	edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR $T184617[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T184617[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T184617[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T184617[ebp+12]
	mov	DWORD PTR [eax+12], edx
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR $T184618[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T184618[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T184618[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T184618[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	DWORD PTR [edx+160]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1542 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L170420
	push	OFFSET FLAT:__GUID_0000050e_0000_0010_8000_00aa006d2ea4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __hr$[ebp]
	push	ecx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L170420:

; 1543 :     return _hr;

	mov	eax, DWORD PTR __hr$[ebp]

; 1544 : }

	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Open@Recordset15@@QAEJABV_variant_t@@0W4CursorTypeEnum@@W4LockTypeEnum@@J@Z ENDP ; Recordset15::Open
_TEXT	ENDS
PUBLIC	?EnterCRLIntoCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z ; CRLCache::EnterCRLIntoCRLCache
PUBLIC	?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z ; Connection15::Execute
EXTRN	_base64encodeSize:NEAR
EXTRN	_base64encode:NEAR
xdata$x	SEGMENT
$T184691 DD	0ffffffffH
	DD	FLAT:$L184649
	DD	00H
	DD	FLAT:$L184650
	DD	01H
	DD	FLAT:$L184651
	DD	02H
	DD	FLAT:$L184652
	DD	03H
	DD	FLAT:$L184653
	DD	04H
	DD	FLAT:$L184654
	DD	05H
	DD	FLAT:$L184655
	DD	06H
	DD	FLAT:$L184656
	DD	07H
	DD	FLAT:$L184657
	DD	08H
	DD	FLAT:$L184658
	DD	09H
	DD	FLAT:$L184659
	DD	0aH
	DD	FLAT:$L184660
	DD	01H
	DD	FLAT:$L184660
	DD	0cH
	DD	FLAT:$L184659
	DD	0dH
	DD	FLAT:$L184658
	DD	0eH
	DD	FLAT:$L184657
	DD	0fH
	DD	FLAT:$L184656
	DD	010H
	DD	FLAT:$L184655
	DD	011H
	DD	FLAT:$L184654
	DD	012H
	DD	FLAT:$L184653
	DD	013H
	DD	FLAT:$L184652
	DD	0cH
	DD	00H
	DD	015H
	DD	FLAT:$L184661
	DD	015H
	DD	FLAT:$L184662
	DD	017H
	DD	FLAT:$L184663
	DD	018H
	DD	FLAT:$L184664
	DD	015H
	DD	FLAT:$L184665
	DD	0cH
	DD	00H
	DD	01bH
	DD	FLAT:$L184667
	DD	01cH
	DD	FLAT:$L184668
	DD	01dH
	DD	FLAT:$L184669
	DD	01eH
	DD	FLAT:$L184670
	DD	01fH
	DD	FLAT:$L184671
	DD	020H
	DD	FLAT:$L184672
	DD	021H
	DD	FLAT:$L184673
	DD	022H
	DD	FLAT:$L184674
	DD	023H
	DD	FLAT:$L184675
	DD	024H
	DD	FLAT:$L184676
	DD	025H
	DD	FLAT:$L184677
	DD	026H
	DD	FLAT:$L184678
	DD	027H
	DD	FLAT:$L184679
	DD	01cH
	DD	FLAT:$L184679
	DD	029H
	DD	FLAT:$L184678
	DD	02aH
	DD	FLAT:$L184677
	DD	02bH
	DD	FLAT:$L184676
	DD	02cH
	DD	FLAT:$L184675
	DD	02dH
	DD	FLAT:$L184674
	DD	02eH
	DD	FLAT:$L184673
	DD	02fH
	DD	FLAT:$L184672
	DD	030H
	DD	FLAT:$L184671
	DD	031H
	DD	FLAT:$L184670
	DD	032H
	DD	FLAT:$L184669
$T184693 DD	08H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffffa0H
	DD	FLAT:$L184648
$T184692 DD	015H
	DD	01aH
	DD	033H
	DD	01H
	DD	FLAT:$T184693
$T184681 DD	019930520H
	DD	034H
	DD	FLAT:$T184691
	DD	01H
	DD	FLAT:$T184692
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File c:\activex\xmlsign\crlcache.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv475 = -456						; size = 4
tv500 = -452						; size = 4
tv473 = -448						; size = 4
tv499 = -444						; size = 4
tv471 = -440						; size = 4
tv498 = -436						; size = 4
tv469 = -432						; size = 4
tv497 = -428						; size = 4
tv467 = -424						; size = 4
tv496 = -420						; size = 4
tv465 = -416						; size = 4
tv495 = -412						; size = 4
tv463 = -408						; size = 4
tv494 = -404						; size = 4
tv461 = -400						; size = 4
tv493 = -396						; size = 4
tv459 = -392						; size = 4
tv303 = -388						; size = 4
tv457 = -384						; size = 4
tv316 = -380						; size = 4
tv492 = -376						; size = 4
tv452 = -372						; size = 4
tv491 = -368						; size = 4
tv451 = -364						; size = 4
tv490 = -360						; size = 4
tv489 = -356						; size = 4
tv447 = -352						; size = 4
tv488 = -348						; size = 4
tv444 = -344						; size = 4
tv487 = -340						; size = 4
tv441 = -336						; size = 4
tv486 = -332						; size = 4
tv485 = -328						; size = 4
tv438 = -324						; size = 4
tv186 = -320						; size = 4
tv435 = -316						; size = 4
tv484 = -312						; size = 4
tv433 = -308						; size = 4
tv483 = -304						; size = 4
tv431 = -300						; size = 4
tv482 = -296						; size = 4
tv429 = -292						; size = 4
tv481 = -288						; size = 4
tv427 = -284						; size = 4
tv480 = -280						; size = 4
tv425 = -276						; size = 4
tv479 = -272						; size = 4
tv423 = -268						; size = 4
tv478 = -264						; size = 4
tv421 = -260						; size = 4
tv65 = -256						; size = 4
tv419 = -252						; size = 4
tv68 = -248						; size = 4
$T184646 = -244						; size = 4
$T184645 = -240						; size = 4
$T184644 = -236						; size = 4
$T184643 = -232						; size = 4
$T184642 = -228						; size = 4
$T184641 = -224						; size = 4
$T184640 = -220						; size = 4
$T184639 = -216						; size = 4
$T184638 = -212						; size = 16
$T184637 = -196						; size = 4
$T184636 = -192						; size = 4
$T184635 = -188						; size = 4
$T184634 = -184						; size = 4
$T184633 = -180						; size = 4
$T184632 = -176						; size = 4
$T184631 = -172						; size = 4
$T184630 = -168						; size = 4
$T184629 = -164						; size = 4
$T184628 = -160						; size = 4
$T184627 = -156						; size = 4
$T184626 = -152						; size = 4
$T184625 = -148						; size = 4
$T184624 = -144						; size = 4
$T184623 = -140						; size = 4
$T184622 = -136						; size = 4
$T184621 = -132						; size = 4
_errorDetail$182840 = -128				; size = 4
_bs$182823 = -120					; size = 4
_bstrSource$182822 = -108				; size = 4
_e$182820 = -96						; size = 4
__hr$182808 = -88					; size = 4
_insertCRLCommand$182785 = -80				; size = 4
_recsAffected$ = -68					; size = 16
_cbData$ = -48						; size = 4
_pbData$ = -44						; size = 4
_normCertName$ = -40					; size = 4
_spCON$ = -32						; size = 4
_crlList$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_certIssuer$ = 8					; size = 4
_crlDataBlob$ = 12					; size = 4
_SigHandle$ = 16					; size = 4
?EnterCRLIntoCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z PROC NEAR ; CRLCache::EnterCRLIntoCRLCache
; _this$ = ecx

; 254  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EnterCRLIntoCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	sub	esp, 440				; 000001b8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-456]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 255  : #ifdef NSS
; 256  : #else
; 257  : 	PDS_DATA_BLOB *crlList=NULL;

	mov	DWORD PTR _crlList$[ebp], 0

; 258  :     _ConnectionPtr  spCON;

	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 259  : 	PCERT_NAME_BLOB normCertName=NULL;

	mov	DWORD PTR _normCertName$[ebp], 0

; 260  : 	BYTE *pbData=NULL;

	mov	DWORD PTR _pbData$[ebp], 0

; 261  : 	DWORD cbData=0;

	mov	DWORD PTR _cbData$[ebp], 0

; 262  : 	_variant_t recsAffected;

	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??0_variant_t@@QAE@XZ			; _variant_t::_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 263  : 	recsAffected.vt = VT_ERROR;

	mov	WORD PTR _recsAffected$[ebp], 10	; 0000000aH

; 264  : 	recsAffected.scode = DISP_E_PARAMNOTFOUND;

	mov	DWORD PTR _recsAffected$[ebp+8], -2147352572 ; 80020004H

; 265  : 
; 266  : 	if (CRLCacheInitialized == TRUE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	$L182775

; 267  : 	{
; 268  : 		// Base64 encode the data 
; 269  : 		cbData = base64encodeSize(crlDataBlob->cbData);

	mov	ecx, DWORD PTR _crlDataBlob$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_base64encodeSize
	add	esp, 4
	mov	DWORD PTR _cbData$[ebp], eax

; 270  : 		// allocate memory
; 271  : 		if(!(pbData = (BYTE*)zMalloc(cbData+1)))

	push	OFFSET FLAT:$SG182778
	push	271					; 0000010fH
	push	OFFSET FLAT:$SG182779
	mov	eax, DWORD PTR _cbData$[ebp]
	add	eax, 1
	push	eax
	call	_myMalloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pbData$[ebp], eax
	cmp	DWORD PTR _pbData$[ebp], 0
	jne	SHORT $L182777

; 272  : 			{
; 273  : 			setError(SigHandle, MEMORY_FAULT);

	push	7
	mov	ecx, DWORD PTR _SigHandle$[ebp]
	push	ecx
	call	_setError
	add	esp, 8

; 274  : 			return;

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	jmp	$L182767
$L182777:

; 275  : 		}
; 276  : 		if (base64encode(crlDataBlob->pbData,crlDataBlob->cbData,(unsigned char*)pbData,cbData+1)==-1) {

	mov	edx, DWORD PTR _cbData$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _pbData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _crlDataBlob$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _crlDataBlob$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_base64encode
	add	esp, 16					; 00000010H
	cmp	eax, -1
	jne	SHORT $L182781

; 277  : 			setError(SigHandle, BASE64_ERROR);

	push	2
	mov	edx, DWORD PTR _SigHandle$[ebp]
	push	edx
	call	_setError
	add	esp, 8

; 278  : 			return;

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	jmp	$L182767
$L182781:

; 279  : 		}
; 280  : 		*(pbData+cbData)='\0';

	mov	eax, DWORD PTR _pbData$[ebp]
	add	eax, DWORD PTR _cbData$[ebp]
	mov	BYTE PTR [eax], 0

; 281  : 
; 282  : 		normCertName = normalizeCertName(certIssuer);

	mov	ecx, DWORD PTR _certIssuer$[ebp]
	push	ecx
	call	_normalizeCertName
	add	esp, 4
	mov	DWORD PTR _normCertName$[ebp], eax

; 283  : 		normCertName->pbData = (BYTE *) zRealloc(normCertName->pbData, normCertName->cbData + 1);

	push	OFFSET FLAT:$SG182783
	push	283					; 0000011bH
	push	OFFSET FLAT:$SG182784
	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _normCertName$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_myRealloc
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _normCertName$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 284  : 		*(normCertName->pbData + normCertName->cbData) = '\0';

	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _normCertName$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [eax+edx], 0

; 285  : 		_bstr_t insertCRLCommand = CRLCache::insertCrlCommand + _bstr_t("('") + 
; 286  : 									_bstr_t((LPCSTR)normCertName->pbData) + _bstr_t("','") +
; 287  : 									_bstr_t((LPCSTR)pbData) + _bstr_t("')");

	push	OFFSET FLAT:$SG182800
	lea	ecx, DWORD PTR $T184629[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv419[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	mov	ecx, DWORD PTR _pbData$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T184627[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv65[ebp], eax
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv421[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	push	OFFSET FLAT:$SG182799
	lea	ecx, DWORD PTR $T184625[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv478[ebp], eax
	mov	eax, DWORD PTR tv478[ebp]
	mov	DWORD PTR tv423[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	mov	ecx, DWORD PTR _normCertName$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	ecx, DWORD PTR $T184623[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv479[ebp], eax
	mov	eax, DWORD PTR tv479[ebp]
	mov	DWORD PTR tv425[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	push	OFFSET FLAT:$SG182798
	lea	ecx, DWORD PTR $T184621[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv480[ebp], eax
	mov	ecx, DWORD PTR tv480[ebp]
	mov	DWORD PTR tv427[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	edx, DWORD PTR tv427[ebp]
	push	edx
	lea	eax, DWORD PTR $T184622[ebp]
	push	eax
	mov	ecx, OFFSET FLAT:?insertCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::insertCrlCommand
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv481[ebp], eax
	mov	ecx, DWORD PTR tv481[ebp]
	mov	DWORD PTR tv429[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	mov	edx, DWORD PTR tv425[ebp]
	push	edx
	lea	eax, DWORD PTR $T184624[ebp]
	push	eax
	mov	ecx, DWORD PTR tv429[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv482[ebp], eax
	mov	ecx, DWORD PTR tv482[ebp]
	mov	DWORD PTR tv431[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	mov	edx, DWORD PTR tv423[ebp]
	push	edx
	lea	eax, DWORD PTR $T184626[ebp]
	push	eax
	mov	ecx, DWORD PTR tv431[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv483[ebp], eax
	mov	ecx, DWORD PTR tv483[ebp]
	mov	DWORD PTR tv433[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	mov	edx, DWORD PTR tv421[ebp]
	push	edx
	lea	eax, DWORD PTR $T184628[ebp]
	push	eax
	mov	ecx, DWORD PTR tv433[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv484[ebp], eax
	mov	ecx, DWORD PTR tv484[ebp]
	mov	DWORD PTR tv435[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	mov	edx, DWORD PTR tv419[ebp]
	push	edx
	lea	eax, DWORD PTR _insertCRLCommand$182785[ebp]
	push	eax
	mov	ecx, DWORD PTR tv435[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR $T184628[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 19		; 00000013H
	lea	ecx, DWORD PTR $T184626[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR $T184624[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	lea	ecx, DWORD PTR $T184622[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	lea	ecx, DWORD PTR $T184621[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
	lea	ecx, DWORD PTR $T184623[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	ecx, DWORD PTR $T184625[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	lea	ecx, DWORD PTR $T184627[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR $T184629[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t

; 288  : 		zFree(normCertName->pbData);

	push	OFFSET FLAT:$SG182801
	push	288					; 00000120H
	push	OFFSET FLAT:$SG182802
	mov	ecx, DWORD PTR _normCertName$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_myFree
	add	esp, 16					; 00000010H

; 289  : 		zFree(normCertName);

	push	OFFSET FLAT:$SG182803
	push	289					; 00000121H
	push	OFFSET FLAT:$SG182804
	mov	eax, DWORD PTR _normCertName$[ebp]
	push	eax
	call	_myFree
	add	esp, 16					; 00000010H

; 290  : 		zFree(pbData);

	push	OFFSET FLAT:$SG182805
	push	290					; 00000122H
	push	OFFSET FLAT:$SG182806
	mov	ecx, DWORD PTR _pbData$[ebp]
	push	ecx
	call	_myFree
	add	esp, 16					; 00000010H

; 291  : 
; 292  : 		try{

	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H

; 293  : 			CREATEiNSTANCE(spCON,Connection);

	push	23					; 00000017H
	push	0
	push	OFFSET FLAT:__GUID_00000514_0000_0010_8000_00aa006d2ea4
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::CreateInstance
	mov	DWORD PTR __hr$182808[ebp], eax
	cmp	DWORD PTR __hr$182808[ebp], 0
	jge	SHORT $L182810
	mov	edx, DWORD PTR __hr$182808[ebp]
	push	edx
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L182810:

; 294  : 			spCON->ConnectionString = SecureXMLDbConnectionString;

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184630[ebp], esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	push	edx
	call	??0_bstr_t@@QAE@PBG@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv186[ebp], eax
	mov	eax, DWORD PTR tv186[ebp]
	mov	DWORD PTR tv438[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv485[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	mov	ecx, DWORD PTR tv485[ebp]
	call	?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z ; Connection15::PutConnectionString

; 295  : 			spCON->Open( "", "", "", -1 );

	push	-1
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184631[ebp], esp
	push	OFFSET FLAT:$SG182815
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv486[ebp], eax
	mov	ecx, DWORD PTR tv486[ebp]
	mov	DWORD PTR tv441[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 23		; 00000017H
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184632[ebp], esp
	push	OFFSET FLAT:$SG182816
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv487[ebp], eax
	mov	edx, DWORD PTR tv487[ebp]
	mov	DWORD PTR tv444[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 24		; 00000018H
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184633[ebp], esp
	push	OFFSET FLAT:$SG182817
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv488[ebp], eax
	mov	eax, DWORD PTR tv488[ebp]
	mov	DWORD PTR tv447[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv489[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	mov	ecx, DWORD PTR tv489[ebp]
	call	?Open@Connection15@@QAEJV_bstr_t@@00J@Z	; Connection15::Open

; 296  : 			spCON->Execute(insertCRLCommand, &recsAffected, 0);

	push	0
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	push	ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184634[ebp], esp
	lea	edx, DWORD PTR _insertCRLCommand$182785[ebp]
	push	edx
	call	??0_bstr_t@@QAE@ABV0@@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv490[ebp], eax
	mov	eax, DWORD PTR tv490[ebp]
	mov	DWORD PTR tv451[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv491[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR $T184635[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv491[ebp]
	call	?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z ; Connection15::Execute
	mov	DWORD PTR tv452[ebp], eax
	lea	ecx, DWORD PTR $T184635[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >

; 297  : 			spCON->Close();

	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv492[ebp], eax
	mov	ecx, DWORD PTR tv492[ebp]
	call	?Close@Connection15@@QAEJXZ		; Connection15::Close
	jmp	$L184647
$L184648:

; 298  : 		}
; 299  : 		catch( _com_error &e){
; 300  : 			_bstr_t bstrSource(e.Source());

	lea	edx, DWORD PTR _bstrSource$182822[ebp]
	push	edx
	mov	ecx, DWORD PTR _e$182820[ebp]
	call	?Source@_com_error@@QBE?AV_bstr_t@@XZ	; _com_error::Source
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH

; 301  : 			_bstr_t bs =  _bstr_t(" Error: ") + _bstr_t(e.Error()) + _bstr_t(" Msg: ") 
; 302  : 				+ _bstr_t(e.ErrorMessage()) + _bstr_t(" Description: ") 
; 303  : 				+ _bstr_t(e.Description());

	push	3
	mov	ecx, DWORD PTR _e$182820[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	lea	ecx, DWORD PTR $T184638[ebp]
	call	??0_variant_t@@QAE@JG@Z			; _variant_t::_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	lea	eax, DWORD PTR $T184646[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$182820[ebp]
	call	?Description@_com_error@@QBE?AV_bstr_t@@XZ ; _com_error::Description
	mov	DWORD PTR tv316[ebp], eax
	mov	ecx, DWORD PTR tv316[ebp]
	mov	DWORD PTR tv457[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 30		; 0000001eH
	push	OFFSET FLAT:$SG182839
	lea	ecx, DWORD PTR $T184644[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv303[ebp], eax
	mov	edx, DWORD PTR tv303[ebp]
	mov	DWORD PTR tv459[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	mov	ecx, DWORD PTR _e$182820[ebp]
	call	?ErrorMessage@_com_error@@QBEPBDXZ	; _com_error::ErrorMessage
	push	eax
	lea	ecx, DWORD PTR $T184642[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv493[ebp], eax
	mov	eax, DWORD PTR tv493[ebp]
	mov	DWORD PTR tv461[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
	push	OFFSET FLAT:$SG182838
	lea	ecx, DWORD PTR $T184640[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv494[ebp], eax
	mov	ecx, DWORD PTR tv494[ebp]
	mov	DWORD PTR tv463[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 33		; 00000021H
	lea	edx, DWORD PTR $T184638[ebp]
	push	edx
	lea	ecx, DWORD PTR $T184637[ebp]
	call	??0_bstr_t@@QAE@ABV_variant_t@@@Z	; _bstr_t::_bstr_t
	mov	DWORD PTR tv495[ebp], eax
	mov	eax, DWORD PTR tv495[ebp]
	mov	DWORD PTR tv465[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 34		; 00000022H
	push	OFFSET FLAT:$SG182837
	lea	ecx, DWORD PTR $T184636[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv496[ebp], eax
	mov	ecx, DWORD PTR tv496[ebp]
	mov	DWORD PTR tv467[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 35		; 00000023H
	mov	edx, DWORD PTR tv465[ebp]
	push	edx
	lea	eax, DWORD PTR $T184639[ebp]
	push	eax
	mov	ecx, DWORD PTR tv467[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv497[ebp], eax
	mov	ecx, DWORD PTR tv497[ebp]
	mov	DWORD PTR tv469[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 36		; 00000024H
	mov	edx, DWORD PTR tv463[ebp]
	push	edx
	lea	eax, DWORD PTR $T184641[ebp]
	push	eax
	mov	ecx, DWORD PTR tv469[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv498[ebp], eax
	mov	ecx, DWORD PTR tv498[ebp]
	mov	DWORD PTR tv471[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 37		; 00000025H
	mov	edx, DWORD PTR tv461[ebp]
	push	edx
	lea	eax, DWORD PTR $T184643[ebp]
	push	eax
	mov	ecx, DWORD PTR tv471[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv499[ebp], eax
	mov	ecx, DWORD PTR tv499[ebp]
	mov	DWORD PTR tv473[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 38		; 00000026H
	mov	edx, DWORD PTR tv459[ebp]
	push	edx
	lea	eax, DWORD PTR $T184645[ebp]
	push	eax
	mov	ecx, DWORD PTR tv473[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv500[ebp], eax
	mov	ecx, DWORD PTR tv500[ebp]
	mov	DWORD PTR tv475[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 39		; 00000027H
	mov	edx, DWORD PTR tv457[ebp]
	push	edx
	lea	eax, DWORD PTR _bs$182823[ebp]
	push	eax
	mov	ecx, DWORD PTR tv475[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 51		; 00000033H
	lea	ecx, DWORD PTR $T184645[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 50		; 00000032H
	lea	ecx, DWORD PTR $T184643[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 49		; 00000031H
	lea	ecx, DWORD PTR $T184641[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 48		; 00000030H
	lea	ecx, DWORD PTR $T184639[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 47		; 0000002fH
	lea	ecx, DWORD PTR $T184636[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 46		; 0000002eH
	lea	ecx, DWORD PTR $T184637[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 45		; 0000002dH
	lea	ecx, DWORD PTR $T184640[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 44		; 0000002cH
	lea	ecx, DWORD PTR $T184642[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 43		; 0000002bH
	lea	ecx, DWORD PTR $T184644[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 42		; 0000002aH
	lea	ecx, DWORD PTR $T184646[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 41		; 00000029H
	lea	ecx, DWORD PTR $T184638[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t

; 304  : 			CRLCacheInitialized = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 305  : 			char *errorDetail = (char *)bs;

	lea	ecx, DWORD PTR _bs$182823[ebp]
	call	??B_bstr_t@@QBEPADXZ			; _bstr_t::operator char *
	mov	DWORD PTR _errorDetail$182840[ebp], eax

; 306  : 			setErrorWithDescr(SigHandle, ADO_ERROR, (unsigned char *)errorDetail);

	mov	edx, DWORD PTR _errorDetail$182840[ebp]
	push	edx
	push	122					; 0000007aH
	mov	eax, DWORD PTR _SigHandle$[ebp]
	push	eax
	call	_setErrorWithDescr
	add	esp, 12					; 0000000cH

; 307  : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
	lea	ecx, DWORD PTR _bs$182823[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	lea	ecx, DWORD PTR _bstrSource$182822[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	eax, $L184647
	ret	0
$L184647:

; 308  : 	}

	mov	DWORD PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _insertCRLCommand$182785[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L182775:

; 309  : 	//else
; 310  : 	//	MessageBox(NULL, (LPCTSTR)"CRLCache not initialized", "CRLCache::EnterCRLIntoCRLCache", MB_OK);
; 311  : #endif
; 312  : }

	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
$L182767:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184690
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 456				; 000001c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L184690:
	DD	6
	DD	$L184689
$L184689:
	DD	-32					; ffffffe0H
	DD	4
	DD	$L184682
	DD	-68					; ffffffbcH
	DD	16					; 00000010H
	DD	$L184683
	DD	-80					; ffffffb0H
	DD	4
	DD	$L184684
	DD	-96					; ffffffa0H
	DD	4
	DD	$L184685
	DD	-108					; ffffff94H
	DD	4
	DD	$L184686
	DD	-120					; ffffff88H
	DD	4
	DD	$L184687
$L184687:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$L184686:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$L184685:
	DB	101					; 00000065H
	DB	0
$L184684:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	82					; 00000052H
	DB	76					; 0000004cH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$L184683:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$L184682:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	79					; 0000004fH
	DB	78					; 0000004eH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
$L184649:
	lea	ecx, DWORD PTR _spCON$[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
$L184650:
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184651:
	lea	ecx, DWORD PTR $T184629[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184652:
	lea	ecx, DWORD PTR $T184627[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184653:
	lea	ecx, DWORD PTR $T184625[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184654:
	lea	ecx, DWORD PTR $T184623[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184655:
	lea	ecx, DWORD PTR $T184621[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184656:
	lea	ecx, DWORD PTR $T184622[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184657:
	lea	ecx, DWORD PTR $T184624[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184658:
	lea	ecx, DWORD PTR $T184626[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184659:
	lea	ecx, DWORD PTR $T184628[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184660:
	lea	ecx, DWORD PTR _insertCRLCommand$182785[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184661:
	mov	ecx, DWORD PTR $T184630[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184662:
	mov	ecx, DWORD PTR $T184631[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184663:
	mov	ecx, DWORD PTR $T184632[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184664:
	mov	ecx, DWORD PTR $T184633[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184665:
	mov	ecx, DWORD PTR $T184634[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184667:
	lea	ecx, DWORD PTR _bstrSource$182822[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184668:
	lea	ecx, DWORD PTR $T184638[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184669:
	lea	ecx, DWORD PTR $T184646[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184670:
	lea	ecx, DWORD PTR $T184644[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184671:
	lea	ecx, DWORD PTR $T184642[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184672:
	lea	ecx, DWORD PTR $T184640[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184673:
	lea	ecx, DWORD PTR $T184637[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184674:
	lea	ecx, DWORD PTR $T184636[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184675:
	lea	ecx, DWORD PTR $T184639[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184676:
	lea	ecx, DWORD PTR $T184641[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184677:
	lea	ecx, DWORD PTR $T184643[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184678:
	lea	ecx, DWORD PTR $T184645[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184679:
	lea	ecx, DWORD PTR _bs$182823[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
__ehhandler$?EnterCRLIntoCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z:
	mov	eax, OFFSET FLAT:$T184681
	jmp	___CxxFrameHandler
text$x	ENDS
?EnterCRLIntoCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z ENDP ; CRLCache::EnterCRLIntoCRLCache
PUBLIC	??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAU_Recordset@@_N@Z ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
;	COMDAT xdata$x
; File c:\activex\xmlsign\debug\msado15.tli
xdata$x	SEGMENT
$T184705 DD	0ffffffffH
	DD	FLAT:$L184695
$T184700 DD	019930520H
	DD	01H
	DD	FLAT:$T184705
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z
_TEXT	SEGMENT
$T184697 = -36						; size = 4
__hr$ = -32						; size = 4
__result$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_CommandText$ = 12					; size = 4
_RecordsAffected$ = 16					; size = 4
_Options$ = 20						; size = 4
?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z PROC NEAR ; Connection15::Execute, COMDAT
; _this$ = ecx

; 1202 : inline _RecordsetPtr Connection15::Execute ( _bstr_t CommandText, VARIANT * RecordsAffected, long Options ) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T184697[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1203 :     struct _Recordset * _result = 0;

	mov	DWORD PTR __result$[ebp], 0

; 1204 :     HRESULT _hr = raw_Execute(CommandText, RecordsAffected, Options, &_result);

	mov	esi, esp
	lea	eax, DWORD PTR __result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _RecordsAffected$[ebp]
	push	edx
	lea	ecx, DWORD PTR _CommandText$[ebp]
	call	??B_bstr_t@@QBEPAGXZ			; _bstr_t::operator unsigned short *
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	DWORD PTR [ecx+64]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __hr$[ebp], eax

; 1205 :     if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));

	cmp	DWORD PTR __hr$[ebp], 0
	jge	SHORT $L169636
	push	OFFSET FLAT:__GUID_00000515_0000_0010_8000_00aa006d2ea4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __hr$[ebp]
	push	ecx
	call	?_com_issue_errorex@@YGXJPAUIUnknown@@ABU_GUID@@@Z ; _com_issue_errorex
$L169636:

; 1206 :     return _RecordsetPtr(_result, false);

	push	0
	mov	edx, DWORD PTR __result$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAU_Recordset@@_N@Z ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
	mov	eax, DWORD PTR $T184697[ebp]
	or	eax, 1
	mov	DWORD PTR $T184697[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _CommandText$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1207 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184704
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$L184704:
	DD	1
	DD	$L184703
$L184703:
	DD	-24					; ffffffe8H
	DD	4
	DD	$L184701
$L184701:
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184695:
	lea	ecx, DWORD PTR _CommandText$[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
__ehhandler$?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z:
	mov	eax, OFFSET FLAT:$T184700
	jmp	___CxxFrameHandler
text$x	ENDS
?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z ENDP ; Connection15::Execute
PUBLIC	?DeleteCRLFromCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z ; CRLCache::DeleteCRLFromCRLCache
xdata$x	SEGMENT
$T184774 DD	0ffffffffH
	DD	FLAT:$L184734
	DD	00H
	DD	FLAT:$L184735
	DD	01H
	DD	FLAT:$L184736
	DD	02H
	DD	FLAT:$L184737
	DD	03H
	DD	FLAT:$L184738
	DD	04H
	DD	FLAT:$L184739
	DD	05H
	DD	FLAT:$L184740
	DD	06H
	DD	FLAT:$L184741
	DD	07H
	DD	FLAT:$L184742
	DD	02H
	DD	FLAT:$L184742
	DD	09H
	DD	FLAT:$L184741
	DD	0aH
	DD	FLAT:$L184740
	DD	0bH
	DD	FLAT:$L184739
	DD	0cH
	DD	FLAT:$L184738
	DD	09H
	DD	00H
	DD	0eH
	DD	FLAT:$L184743
	DD	0eH
	DD	FLAT:$L184744
	DD	010H
	DD	FLAT:$L184745
	DD	011H
	DD	FLAT:$L184746
	DD	0eH
	DD	FLAT:$L184747
	DD	09H
	DD	00H
	DD	014H
	DD	FLAT:$L184749
	DD	015H
	DD	FLAT:$L184750
	DD	016H
	DD	FLAT:$L184751
	DD	017H
	DD	FLAT:$L184752
	DD	018H
	DD	FLAT:$L184753
	DD	019H
	DD	FLAT:$L184754
	DD	01aH
	DD	FLAT:$L184755
	DD	01bH
	DD	FLAT:$L184756
	DD	01cH
	DD	FLAT:$L184757
	DD	01dH
	DD	FLAT:$L184758
	DD	01eH
	DD	FLAT:$L184759
	DD	01fH
	DD	FLAT:$L184760
	DD	020H
	DD	FLAT:$L184761
	DD	015H
	DD	FLAT:$L184761
	DD	022H
	DD	FLAT:$L184760
	DD	023H
	DD	FLAT:$L184759
	DD	024H
	DD	FLAT:$L184758
	DD	025H
	DD	FLAT:$L184757
	DD	026H
	DD	FLAT:$L184756
	DD	027H
	DD	FLAT:$L184755
	DD	028H
	DD	FLAT:$L184754
	DD	029H
	DD	FLAT:$L184753
	DD	02aH
	DD	FLAT:$L184752
	DD	02bH
	DD	FLAT:$L184751
$T184776 DD	08H
	DD	FLAT:??_R0?AV_com_error@@@8
	DD	0ffffff94H
	DD	FLAT:$L184733
$T184775 DD	0eH
	DD	013H
	DD	02cH
	DD	01H
	DD	FLAT:$T184776
$T184763 DD	019930520H
	DD	02dH
	DD	FLAT:$T184774
	DD	01H
	DD	FLAT:$T184775
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
; File c:\activex\xmlsign\crlcache.cpp
xdata$x	ENDS
_TEXT	SEGMENT
tv418 = -420						; size = 4
tv438 = -416						; size = 4
tv416 = -412						; size = 4
tv437 = -408						; size = 4
tv414 = -404						; size = 4
tv436 = -400						; size = 4
tv412 = -396						; size = 4
tv435 = -392						; size = 4
tv410 = -388						; size = 4
tv434 = -384						; size = 4
tv408 = -380						; size = 4
tv433 = -376						; size = 4
tv406 = -372						; size = 4
tv432 = -368						; size = 4
tv404 = -364						; size = 4
tv431 = -360						; size = 4
tv402 = -356						; size = 4
tv257 = -352						; size = 4
tv400 = -348						; size = 4
tv270 = -344						; size = 4
tv430 = -340						; size = 4
tv395 = -336						; size = 4
tv429 = -332						; size = 4
tv394 = -328						; size = 4
tv428 = -324						; size = 4
tv427 = -320						; size = 4
tv390 = -316						; size = 4
tv426 = -312						; size = 4
tv387 = -308						; size = 4
tv425 = -304						; size = 4
tv384 = -300						; size = 4
tv424 = -296						; size = 4
tv423 = -292						; size = 4
tv381 = -288						; size = 4
tv142 = -284						; size = 4
tv378 = -280						; size = 4
tv422 = -276						; size = 4
tv376 = -272						; size = 4
tv421 = -268						; size = 4
tv374 = -264						; size = 4
tv65 = -260						; size = 4
tv372 = -256						; size = 4
tv68 = -252						; size = 4
tv370 = -248						; size = 4
tv71 = -244						; size = 4
$T184731 = -240						; size = 4
$T184730 = -236						; size = 4
$T184729 = -232						; size = 4
$T184728 = -228						; size = 4
$T184727 = -224						; size = 4
$T184726 = -220						; size = 4
$T184725 = -216						; size = 4
$T184724 = -212						; size = 4
$T184723 = -208						; size = 16
$T184722 = -192						; size = 4
$T184721 = -188						; size = 4
$T184720 = -184						; size = 4
$T184719 = -180						; size = 4
$T184718 = -176						; size = 4
$T184717 = -172						; size = 4
$T184716 = -168						; size = 4
$T184715 = -164						; size = 4
$T184714 = -160						; size = 4
$T184713 = -156						; size = 4
$T184712 = -152						; size = 4
$T184711 = -148						; size = 4
$T184710 = -144						; size = 4
_errorDetail$182908 = -140				; size = 4
_bs$182891 = -132					; size = 4
_bstrSource$182890 = -120				; size = 4
_e$182888 = -108					; size = 4
__hr$182876 = -100					; size = 4
_deleteCRLCommand$ = -92				; size = 4
_recsAffected$ = -80					; size = 16
_cbData$ = -60						; size = 4
_pbData$ = -56						; size = 4
_normCertName$ = -52					; size = 4
_spRS$ = -44						; size = 4
_spCON$ = -32						; size = 4
_crlList$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_certIssuer$ = 8					; size = 4
_crlDataBlob$ = 12					; size = 4
_SigHandle$ = 16					; size = 4
?DeleteCRLFromCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z PROC NEAR ; CRLCache::DeleteCRLFromCRLCache
; _this$ = ecx

; 317  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DeleteCRLFromCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	sub	esp, 404				; 00000194H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 101				; 00000065H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 318  : #ifdef NSS
; 319  : #else
; 320  : 	PDS_DATA_BLOB *crlList=NULL;

	mov	DWORD PTR _crlList$[ebp], 0

; 321  :     _ConnectionPtr  spCON;

	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 322  :     _RecordsetPtr   spRS;

	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 323  : 	PCERT_NAME_BLOB normCertName=NULL;

	mov	DWORD PTR _normCertName$[ebp], 0

; 324  : 	BYTE *pbData=NULL;

	mov	DWORD PTR _pbData$[ebp], 0

; 325  : 	DWORD cbData=0;

	mov	DWORD PTR _cbData$[ebp], 0

; 326  : 	_variant_t recsAffected;

	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??0_variant_t@@QAE@XZ			; _variant_t::_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 327  : 	recsAffected.vt = VT_ERROR;

	mov	WORD PTR _recsAffected$[ebp], 10	; 0000000aH

; 328  : 	recsAffected.scode = DISP_E_PARAMNOTFOUND;

	mov	DWORD PTR _recsAffected$[ebp+8], -2147352572 ; 80020004H

; 329  : 
; 330  : 	normCertName = normalizeCertName(certIssuer);

	mov	eax, DWORD PTR _certIssuer$[ebp]
	push	eax
	call	_normalizeCertName
	add	esp, 4
	mov	DWORD PTR _normCertName$[ebp], eax

; 331  : 	normCertName->pbData = (BYTE *) zRealloc(normCertName->pbData, normCertName->cbData + 1);

	push	OFFSET FLAT:$SG182858
	push	331					; 0000014bH
	push	OFFSET FLAT:$SG182859
	mov	ecx, DWORD PTR _normCertName$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _normCertName$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_myRealloc
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	DWORD PTR [edx+4], eax

; 332  : 	*(normCertName->pbData + normCertName->cbData) = '\0';

	mov	eax, DWORD PTR _normCertName$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [ecx+eax], 0

; 333  : 	_bstr_t deleteCRLCommand = CRLCache::deleteCrlCommand + _bstr_t("CertificateIssuer = '") + 
; 334  : 								_bstr_t((LPCSTR)normCertName->pbData) + _bstr_t("'");

	push	OFFSET FLAT:$SG182869
	lea	ecx, DWORD PTR $T184714[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR tv370[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T184712[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv372[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	push	OFFSET FLAT:$SG182868
	lea	ecx, DWORD PTR $T184710[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv65[ebp], eax
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv374[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	mov	eax, DWORD PTR tv374[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184711[ebp]
	push	ecx
	mov	ecx, OFFSET FLAT:?deleteCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::deleteCrlCommand
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv421[ebp], eax
	mov	edx, DWORD PTR tv421[ebp]
	mov	DWORD PTR tv376[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 6
	mov	eax, DWORD PTR tv372[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184713[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv376[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv422[ebp], eax
	mov	edx, DWORD PTR tv422[ebp]
	mov	DWORD PTR tv378[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	mov	eax, DWORD PTR tv370[ebp]
	push	eax
	lea	ecx, DWORD PTR _deleteCRLCommand$[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv378[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 13		; 0000000dH
	lea	ecx, DWORD PTR $T184713[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 12		; 0000000cH
	lea	ecx, DWORD PTR $T184711[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 11		; 0000000bH
	lea	ecx, DWORD PTR $T184710[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 10		; 0000000aH
	lea	ecx, DWORD PTR $T184712[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	lea	ecx, DWORD PTR $T184714[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t

; 335  : 	zFree(normCertName->pbData);

	push	OFFSET FLAT:$SG182870
	push	335					; 0000014fH
	push	OFFSET FLAT:$SG182871
	mov	edx, DWORD PTR _normCertName$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_myFree
	add	esp, 16					; 00000010H

; 336  : 	zFree(normCertName);

	push	OFFSET FLAT:$SG182872
	push	336					; 00000150H
	push	OFFSET FLAT:$SG182873
	mov	ecx, DWORD PTR _normCertName$[ebp]
	push	ecx
	call	_myFree
	add	esp, 16					; 00000010H

; 337  : 
; 338  : 	if (CRLCacheInitialized == TRUE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 1
	jne	$L184732

; 339  : 	{
; 340  : 		try{

	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH

; 341  : 			CREATEiNSTANCE(spCON,Connection);

	push	23					; 00000017H
	push	0
	push	OFFSET FLAT:__GUID_00000514_0000_0010_8000_00aa006d2ea4
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::CreateInstance
	mov	DWORD PTR __hr$182876[ebp], eax
	cmp	DWORD PTR __hr$182876[ebp], 0
	jge	SHORT $L182878
	mov	eax, DWORD PTR __hr$182876[ebp]
	push	eax
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L182878:

; 342  : 			spCON->ConnectionString = SecureXMLDbConnectionString;

	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184715[ebp], esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??0_bstr_t@@QAE@PBG@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv142[ebp], eax
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR tv381[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 15		; 0000000fH
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv423[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	mov	ecx, DWORD PTR tv423[ebp]
	call	?PutConnectionString@Connection15@@QAEXV_bstr_t@@@Z ; Connection15::PutConnectionString

; 343  : 			spCON->Open( "", "", "", -1 );

	push	-1
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184716[ebp], esp
	push	OFFSET FLAT:$SG182883
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv424[ebp], eax
	mov	edx, DWORD PTR tv424[ebp]
	mov	DWORD PTR tv384[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 16		; 00000010H
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184717[ebp], esp
	push	OFFSET FLAT:$SG182884
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv425[ebp], eax
	mov	eax, DWORD PTR tv425[ebp]
	mov	DWORD PTR tv387[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 17		; 00000011H
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184718[ebp], esp
	push	OFFSET FLAT:$SG182885
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv426[ebp], eax
	mov	ecx, DWORD PTR tv426[ebp]
	mov	DWORD PTR tv390[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 18		; 00000012H
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv427[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	mov	ecx, DWORD PTR tv427[ebp]
	call	?Open@Connection15@@QAEJV_bstr_t@@00J@Z	; Connection15::Open

; 344  : 			spCON->Execute(deleteCRLCommand, &recsAffected, 0);

	push	0
	lea	edx, DWORD PTR _recsAffected$[ebp]
	push	edx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T184719[ebp], esp
	lea	eax, DWORD PTR _deleteCRLCommand$[ebp]
	push	eax
	call	??0_bstr_t@@QAE@ABV0@@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv428[ebp], eax
	mov	ecx, DWORD PTR tv428[ebp]
	mov	DWORD PTR tv394[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 19		; 00000013H
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv429[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 14		; 0000000eH
	lea	edx, DWORD PTR $T184720[ebp]
	push	edx
	mov	ecx, DWORD PTR tv429[ebp]
	call	?Execute@Connection15@@QAE?AV?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@V_bstr_t@@PAUtagVARIANT@@J@Z ; Connection15::Execute
	mov	DWORD PTR tv395[ebp], eax
	lea	ecx, DWORD PTR $T184720[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >

; 345  : 			spCON->Close();

	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
	mov	DWORD PTR tv430[ebp], eax
	mov	ecx, DWORD PTR tv430[ebp]
	call	?Close@Connection15@@QAEJXZ		; Connection15::Close
	jmp	$L184732
$L184733:

; 346  : 		}
; 347  : 		catch( _com_error &e){
; 348  : 			_bstr_t bstrSource(e.Source());

	lea	eax, DWORD PTR _bstrSource$182890[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$182888[ebp]
	call	?Source@_com_error@@QBE?AV_bstr_t@@XZ	; _com_error::Source
	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H

; 349  : 			_bstr_t bs =  _bstr_t(" Error: ") + _bstr_t(e.Error()) + _bstr_t(" Msg: ") 
; 350  : 				+ _bstr_t(e.ErrorMessage()) + _bstr_t(" Description: ") 
; 351  : 				+ _bstr_t(e.Description());

	push	3
	mov	ecx, DWORD PTR _e$182888[ebp]
	call	?Error@_com_error@@QBEJXZ		; _com_error::Error
	push	eax
	lea	ecx, DWORD PTR $T184723[ebp]
	call	??0_variant_t@@QAE@JG@Z			; _variant_t::_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 22		; 00000016H
	lea	ecx, DWORD PTR $T184731[ebp]
	push	ecx
	mov	ecx, DWORD PTR _e$182888[ebp]
	call	?Description@_com_error@@QBE?AV_bstr_t@@XZ ; _com_error::Description
	mov	DWORD PTR tv270[ebp], eax
	mov	edx, DWORD PTR tv270[ebp]
	mov	DWORD PTR tv400[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 23		; 00000017H
	push	OFFSET FLAT:$SG182907
	lea	ecx, DWORD PTR $T184729[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv257[ebp], eax
	mov	eax, DWORD PTR tv257[ebp]
	mov	DWORD PTR tv402[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 24		; 00000018H
	mov	ecx, DWORD PTR _e$182888[ebp]
	call	?ErrorMessage@_com_error@@QBEPBDXZ	; _com_error::ErrorMessage
	push	eax
	lea	ecx, DWORD PTR $T184727[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv431[ebp], eax
	mov	ecx, DWORD PTR tv431[ebp]
	mov	DWORD PTR tv404[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 25		; 00000019H
	push	OFFSET FLAT:$SG182906
	lea	ecx, DWORD PTR $T184725[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv432[ebp], eax
	mov	edx, DWORD PTR tv432[ebp]
	mov	DWORD PTR tv406[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 26		; 0000001aH
	lea	eax, DWORD PTR $T184723[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184722[ebp]
	call	??0_bstr_t@@QAE@ABV_variant_t@@@Z	; _bstr_t::_bstr_t
	mov	DWORD PTR tv433[ebp], eax
	mov	ecx, DWORD PTR tv433[ebp]
	mov	DWORD PTR tv408[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 27		; 0000001bH
	push	OFFSET FLAT:$SG182905
	lea	ecx, DWORD PTR $T184721[ebp]
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	mov	DWORD PTR tv434[ebp], eax
	mov	edx, DWORD PTR tv434[ebp]
	mov	DWORD PTR tv410[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 28		; 0000001cH
	mov	eax, DWORD PTR tv408[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184724[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv410[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv435[ebp], eax
	mov	edx, DWORD PTR tv435[ebp]
	mov	DWORD PTR tv412[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 29		; 0000001dH
	mov	eax, DWORD PTR tv406[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184726[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv412[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv436[ebp], eax
	mov	edx, DWORD PTR tv436[ebp]
	mov	DWORD PTR tv414[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 30		; 0000001eH
	mov	eax, DWORD PTR tv404[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184728[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv414[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv437[ebp], eax
	mov	edx, DWORD PTR tv437[ebp]
	mov	DWORD PTR tv416[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 31		; 0000001fH
	mov	eax, DWORD PTR tv402[ebp]
	push	eax
	lea	ecx, DWORD PTR $T184730[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv416[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	DWORD PTR tv438[ebp], eax
	mov	edx, DWORD PTR tv438[ebp]
	mov	DWORD PTR tv418[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 32		; 00000020H
	mov	eax, DWORD PTR tv400[ebp]
	push	eax
	lea	ecx, DWORD PTR _bs$182891[ebp]
	push	ecx
	mov	ecx, DWORD PTR tv418[ebp]
	call	??H_bstr_t@@QBE?AV0@ABV0@@Z		; _bstr_t::operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 44		; 0000002cH
	lea	ecx, DWORD PTR $T184730[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 43		; 0000002bH
	lea	ecx, DWORD PTR $T184728[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 42		; 0000002aH
	lea	ecx, DWORD PTR $T184726[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 41		; 00000029H
	lea	ecx, DWORD PTR $T184724[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 40		; 00000028H
	lea	ecx, DWORD PTR $T184721[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 39		; 00000027H
	lea	ecx, DWORD PTR $T184722[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 38		; 00000026H
	lea	ecx, DWORD PTR $T184725[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 37		; 00000025H
	lea	ecx, DWORD PTR $T184727[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 36		; 00000024H
	lea	ecx, DWORD PTR $T184729[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 35		; 00000023H
	lea	ecx, DWORD PTR $T184731[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 34		; 00000022H
	lea	ecx, DWORD PTR $T184723[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t

; 352  : 			CRLCacheInitialized = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 353  : 			char *errorDetail = (char *)bs;

	lea	ecx, DWORD PTR _bs$182891[ebp]
	call	??B_bstr_t@@QBEPADXZ			; _bstr_t::operator char *
	mov	DWORD PTR _errorDetail$182908[ebp], eax

; 354  : 			setErrorWithDescr(SigHandle, ADO_ERROR, (unsigned char *)errorDetail);

	mov	eax, DWORD PTR _errorDetail$182908[ebp]
	push	eax
	push	122					; 0000007aH
	mov	ecx, DWORD PTR _SigHandle$[ebp]
	push	ecx
	call	_setErrorWithDescr
	add	esp, 12					; 0000000cH

; 355  : 		}

	mov	BYTE PTR __$EHRec$[ebp+12], 21		; 00000015H
	lea	ecx, DWORD PTR _bs$182891[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 20		; 00000014H
	lea	ecx, DWORD PTR _bstrSource$182890[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	eax, $L184732
	ret	0
$L184732:

; 356  : 	}
; 357  : 	//else
; 358  : 	//	MessageBox(NULL, (LPCTSTR)"CRLCache not initialized", "CRLCache::DeleteCRLFromCRLCache", MB_OK);
; 359  : #endif
; 360  : }

	mov	DWORD PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _deleteCRLCommand$[ebp]
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	call	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _spRS$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _spCON$[ebp]
	call	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184773
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L184773:
	DD	7
	DD	$L184772
$L184772:
	DD	-32					; ffffffe0H
	DD	4
	DD	$L184764
	DD	-44					; ffffffd4H
	DD	4
	DD	$L184765
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$L184766
	DD	-92					; ffffffa4H
	DD	4
	DD	$L184767
	DD	-108					; ffffff94H
	DD	4
	DD	$L184768
	DD	-120					; ffffff88H
	DD	4
	DD	$L184769
	DD	-132					; ffffff7cH
	DD	4
	DD	$L184770
$L184770:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$L184769:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$L184768:
	DB	101					; 00000065H
	DB	0
$L184767:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	82					; 00000052H
	DB	76					; 0000004cH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$L184766:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$L184765:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	83					; 00000053H
	DB	0
$L184764:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	79					; 0000004fH
	DB	78					; 0000004eH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
$L184734:
	lea	ecx, DWORD PTR _spCON$[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
$L184735:
	lea	ecx, DWORD PTR _spRS$[ebp]
	jmp	??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
$L184736:
	lea	ecx, DWORD PTR _recsAffected$[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184737:
	lea	ecx, DWORD PTR $T184714[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184738:
	lea	ecx, DWORD PTR $T184712[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184739:
	lea	ecx, DWORD PTR $T184710[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184740:
	lea	ecx, DWORD PTR $T184711[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184741:
	lea	ecx, DWORD PTR $T184713[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184742:
	lea	ecx, DWORD PTR _deleteCRLCommand$[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184743:
	mov	ecx, DWORD PTR $T184715[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184744:
	mov	ecx, DWORD PTR $T184716[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184745:
	mov	ecx, DWORD PTR $T184717[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184746:
	mov	ecx, DWORD PTR $T184718[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184747:
	mov	ecx, DWORD PTR $T184719[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184749:
	lea	ecx, DWORD PTR _bstrSource$182890[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184750:
	lea	ecx, DWORD PTR $T184723[ebp]
	jmp	??1_variant_t@@QAE@XZ			; _variant_t::~_variant_t
$L184751:
	lea	ecx, DWORD PTR $T184731[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184752:
	lea	ecx, DWORD PTR $T184729[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184753:
	lea	ecx, DWORD PTR $T184727[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184754:
	lea	ecx, DWORD PTR $T184725[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184755:
	lea	ecx, DWORD PTR $T184722[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184756:
	lea	ecx, DWORD PTR $T184721[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184757:
	lea	ecx, DWORD PTR $T184724[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184758:
	lea	ecx, DWORD PTR $T184726[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184759:
	lea	ecx, DWORD PTR $T184728[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184760:
	lea	ecx, DWORD PTR $T184730[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
$L184761:
	lea	ecx, DWORD PTR _bs$182891[ebp]
	jmp	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
__ehhandler$?DeleteCRLFromCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z:
	mov	eax, OFFSET FLAT:$T184763
	jmp	___CxxFrameHandler
text$x	ENDS
?DeleteCRLFromCRLCache@CRLCache@@QAEXPAU_CRYPTOAPI_BLOB@@PAU_DS_DATA_BLOB@@PAU_GLOBAL_SIG@@@Z ENDP ; CRLCache::DeleteCRLFromCRLCache
PUBLIC	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_AddRef
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comip.h
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUField@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pInterface$ = 8					; size = 4
_fAddRef$ = 12						; size = 1
??0?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUField@@_N@Z PROC NEAR ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 166  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pInterface$[ebp]
	mov	DWORD PTR [eax], ecx

; 167  :         if (fAddRef) {

	movzx	edx, BYTE PTR _fAddRef$[ebp]
	test	edx, edx
	je	SHORT $L182948

; 168  :             _AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_AddRef
$L182948:

; 169  :         }
; 170  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUField@@_N@Z ENDP ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
_TEXT	ENDS
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_Release
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ PROC NEAR ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 304  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 305  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_Release

; 306  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUField@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUField@@XZ PROC NEAR ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::operator->, COMDAT
; _this$ = ecx

; 390  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 391  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L182954

; 392  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L182954:

; 393  :         }
; 394  : 
; 395  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]

; 396  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUField@@XZ ENDP ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::operator->
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 131  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 132  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
_TEXT	ENDS
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_Release
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 304  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 305  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_Release

; 306  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator _Connection *, COMDAT
; _this$ = ecx

; 347  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 348  :         return m_pInterface; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 349  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ENDP ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator _Connection *
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->, COMDAT
; _this$ = ecx

; 390  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 391  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L182972

; 392  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L182972:

; 393  :         }
; 394  : 
; 395  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]

; 396  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Connection@@XZ ENDP ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::operator->
_TEXT	ENDS
PUBLIC	__GUID_00000000_0000_0000_c000_000000000046
PUBLIC	?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::GetIID
EXTRN	__imp__OleRun@4:NEAR
EXTRN	__imp__CoCreateInstance@20:NEAR
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
CONST	SEGMENT
__GUID_00000000_0000_0000_c000_000000000046 DD 00H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z
_TEXT	SEGMENT
_pIUnknown$182978 = -16					; size = 4
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_rclsid$ = 8						; size = 4
_pOuter$ = 12						; size = 4
_dwClsContext$ = 16					; size = 4
?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z PROC NEAR ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::CreateInstance, COMDAT
; _this$ = ecx

; 617  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 618  :         HRESULT hr;
; 619  : 
; 620  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_Release

; 621  : 
; 622  :         if (dwClsContext & (CLSCTX_LOCAL_SERVER | CLSCTX_REMOTE_SERVER)) {

	mov	eax, DWORD PTR _dwClsContext$[ebp]
	and	eax, 20					; 00000014H
	je	$L182977

; 623  :             IUnknown* pIUnknown;
; 624  :             hr = CoCreateInstance(rclsid, pOuter, dwClsContext, __uuidof(IUnknown), reinterpret_cast<void**>(&pIUnknown));

	mov	esi, esp
	lea	ecx, DWORD PTR _pIUnknown$182978[ebp]
	push	ecx
	push	OFFSET FLAT:__GUID_00000000_0000_0000_c000_000000000046
	mov	edx, DWORD PTR _dwClsContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _pOuter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rclsid$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 625  : 
; 626  :             if (SUCCEEDED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $L182981

; 627  :                 hr = OleRun(pIUnknown);

	mov	esi, esp
	mov	edx, DWORD PTR _pIUnknown$182978[ebp]
	push	edx
	call	DWORD PTR __imp__OleRun@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 628  : 
; 629  :                 if (SUCCEEDED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $L182983

; 630  :                     hr = pIUnknown->QueryInterface(GetIID(), reinterpret_cast<void**>(&m_pInterface));

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::GetIID
	push	eax
	mov	ecx, DWORD PTR _pIUnknown$182978[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pIUnknown$182978[ebp]
	push	eax
	call	DWORD PTR [edx]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$L182983:

; 631  :                 }
; 632  : 
; 633  :                 pIUnknown->Release();

	mov	ecx, DWORD PTR _pIUnknown$182978[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pIUnknown$182978[ebp]
	push	eax
	call	DWORD PTR [edx+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L182981:

; 634  :             }
; 635  :         }
; 636  :         else {

	jmp	SHORT $L182985
$L182977:

; 637  :             hr = CoCreateInstance(rclsid, pOuter, dwClsContext, GetIID(), reinterpret_cast<void**>(&m_pInterface));

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::GetIID
	push	eax
	mov	edx, DWORD PTR _dwClsContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _pOuter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rclsid$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$L182985:

; 638  :         }
; 639  : 
; 640  :         if (FAILED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L182988

; 641  :             // just in case refcount = 0 and dtor gets called
; 642  :             m_pInterface = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
$L182988:

; 643  :         }
; 644  : 
; 645  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 646  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184794
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L184794:
	DD	1
	DD	$L184793
$L184793:
	DD	-16					; fffffff0H
	DD	4
	DD	$L184792
$L184792:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	0
?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ENDP ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::CreateInstance
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 131  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 132  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
_TEXT	ENDS
PUBLIC	?_AddRef@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_AddRef
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAU_Recordset@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pInterface$ = 8					; size = 4
_fAddRef$ = 12						; size = 1
??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAU_Recordset@@_N@Z PROC NEAR ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 166  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pInterface$[ebp]
	mov	DWORD PTR [eax], ecx

; 167  :         if (fAddRef) {

	movzx	edx, BYTE PTR _fAddRef$[ebp]
	test	edx, edx
	je	SHORT $L182992

; 168  :             _AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_AddRef@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_AddRef
$L182992:

; 169  :         }
; 170  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAU_Recordset@@_N@Z ENDP ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
_TEXT	ENDS
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_Release
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 304  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 305  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_Release

; 306  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->, COMDAT
; _this$ = ecx

; 390  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 391  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L182998

; 392  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L182998:

; 393  :         }
; 394  : 
; 395  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]

; 396  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAU_Recordset@@XZ ENDP ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::operator->
_TEXT	ENDS
PUBLIC	?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::GetIID
; Function compile flags: /Odt /RTCsu
;	COMDAT ?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z
_TEXT	SEGMENT
_pIUnknown$183004 = -16					; size = 4
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_rclsid$ = 8						; size = 4
_pOuter$ = 12						; size = 4
_dwClsContext$ = 16					; size = 4
?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z PROC NEAR ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::CreateInstance, COMDAT
; _this$ = ecx

; 617  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 618  :         HRESULT hr;
; 619  : 
; 620  :         _Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_Release

; 621  : 
; 622  :         if (dwClsContext & (CLSCTX_LOCAL_SERVER | CLSCTX_REMOTE_SERVER)) {

	mov	eax, DWORD PTR _dwClsContext$[ebp]
	and	eax, 20					; 00000014H
	je	$L183003

; 623  :             IUnknown* pIUnknown;
; 624  :             hr = CoCreateInstance(rclsid, pOuter, dwClsContext, __uuidof(IUnknown), reinterpret_cast<void**>(&pIUnknown));

	mov	esi, esp
	lea	ecx, DWORD PTR _pIUnknown$183004[ebp]
	push	ecx
	push	OFFSET FLAT:__GUID_00000000_0000_0000_c000_000000000046
	mov	edx, DWORD PTR _dwClsContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _pOuter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rclsid$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 625  : 
; 626  :             if (SUCCEEDED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $L183007

; 627  :                 hr = OleRun(pIUnknown);

	mov	esi, esp
	mov	edx, DWORD PTR _pIUnknown$183004[ebp]
	push	edx
	call	DWORD PTR __imp__OleRun@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 628  : 
; 629  :                 if (SUCCEEDED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $L183009

; 630  :                     hr = pIUnknown->QueryInterface(GetIID(), reinterpret_cast<void**>(&m_pInterface));

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::GetIID
	push	eax
	mov	ecx, DWORD PTR _pIUnknown$183004[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pIUnknown$183004[ebp]
	push	eax
	call	DWORD PTR [edx]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$L183009:

; 631  :                 }
; 632  : 
; 633  :                 pIUnknown->Release();

	mov	ecx, DWORD PTR _pIUnknown$183004[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pIUnknown$183004[ebp]
	push	eax
	call	DWORD PTR [edx+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L183007:

; 634  :             }
; 635  :         }
; 636  :         else {

	jmp	SHORT $L183011
$L183003:

; 637  :             hr = CoCreateInstance(rclsid, pOuter, dwClsContext, GetIID(), reinterpret_cast<void**>(&m_pInterface));

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::GetIID
	push	eax
	mov	edx, DWORD PTR _dwClsContext$[ebp]
	push	edx
	mov	eax, DWORD PTR _pOuter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rclsid$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$L183011:

; 638  :         }
; 639  : 
; 640  :         if (FAILED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L183014

; 641  :             // just in case refcount = 0 and dtor gets called
; 642  :             m_pInterface = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
$L183014:

; 643  :         }
; 644  : 
; 645  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 646  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $L184807
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$L184807:
	DD	1
	DD	$L184806
$L184806:
	DD	-16					; fffffff0H
	DD	4
	DD	$L184805
$L184805:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	0
?CreateInstance@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAEJABU_GUID@@PAUIUnknown@@K@Z ENDP ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::CreateInstance
_TEXT	ENDS
PUBLIC	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_AddRef
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUFields@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pInterface$ = 8					; size = 4
_fAddRef$ = 12						; size = 1
??0?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUFields@@_N@Z PROC NEAR ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 166  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pInterface$[ebp]
	mov	DWORD PTR [eax], ecx

; 167  :         if (fAddRef) {

	movzx	edx, BYTE PTR _fAddRef$[ebp]
	test	edx, edx
	je	SHORT $L183026

; 168  :             _AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_AddRef@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_AddRef
$L183026:

; 169  :         }
; 170  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@PAUFields@@_N@Z ENDP ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
_TEXT	ENDS
PUBLIC	?_Release@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_Release
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ PROC NEAR ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >, COMDAT
; _this$ = ecx

; 304  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 305  :         _Release(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Release@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_Release

; 306  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QAE@XZ ENDP ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::~_com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUFields@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUFields@@XZ PROC NEAR ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::operator->, COMDAT
; _this$ = ecx

; 390  :     { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 391  :         if (m_pInterface == NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $L183032

; 392  :             _com_issue_error(E_POINTER);

	push	-2147467261				; 80004003H
	call	?_com_issue_error@@YGXJ@Z		; _com_issue_error
$L183032:

; 393  :         }
; 394  : 
; 395  :         return m_pInterface; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]

; 396  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@QBEPAUFields@@XZ ENDP ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::operator->
_TEXT	ENDS
PUBLIC	?Init@?$CW2AEX@$0IA@@ATL@@AAEXPBGI@Z		; ATL::CW2AEX<128>::Init
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ??0?$CW2AEX@$0IA@@ATL@@QAE@PBG@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
??0?$CW2AEX@$0IA@@ATL@@QAE@PBG@Z PROC NEAR		; ATL::CW2AEX<128>::CW2AEX<128>, COMDAT
; _this$ = ecx

; 419  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 420  : 		Init( psz, _AtlGetConversionACP() );

	call	?_AtlGetConversionACP@ATL@@YGIXZ	; ATL::_AtlGetConversionACP
	push	eax
	mov	edx, DWORD PTR _psz$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@?$CW2AEX@$0IA@@ATL@@AAEXPBGI@Z	; ATL::CW2AEX<128>::Init

; 421  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CW2AEX@$0IA@@ATL@@QAE@PBG@Z ENDP			; ATL::CW2AEX<128>::CW2AEX<128>
_TEXT	ENDS
EXTRN	_free:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$CW2AEX@$0IA@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ PROC NEAR			; ATL::CW2AEX<128>::~CW2AEX<128>, COMDAT
; _this$ = ecx

; 428  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 429  : 		if( m_psz != m_szBuffer )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $L183042

; 430  : 		{
; 431  : 			free( m_psz );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_free
	add	esp, 4
$L183042:

; 432  : 		}
; 433  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CW2AEX@$0IA@@ATL@@QAE@XZ ENDP			; ATL::CW2AEX<128>::~CW2AEX<128>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ PROC NEAR		; ATL::CW2AEX<128>::operator char *, COMDAT
; _this$ = ecx

; 436  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 437  : 		return( m_psz );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 438  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CW2AEX@$0IA@@ATL@@QBEPADXZ ENDP			; ATL::CW2AEX<128>::operator char *
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comip.h
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ PROC NEAR ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_Release, COMDAT
; _this$ = ecx

; 820  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 821  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L183110

; 822  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	call	DWORD PTR [edx+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L183110:

; 823  :         }
; 824  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_Release
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ PROC NEAR ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_AddRef, COMDAT
; _this$ = ecx

; 829  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 830  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L183113

; 831  :             m_pInterface->AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	call	DWORD PTR [edx+4]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L183113:

; 832  :         }
; 833  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UField@@$1?_GUID_00000569_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<Field,&_GUID_00000569_0000_0010_8000_00aa006d2ea4> >::_AddRef
_TEXT	ENDS
PUBLIC	?GetIID@?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ ; _com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4>::GetIID
; Function compile flags: /Odt /RTCsu
;	COMDAT ?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ
_TEXT	SEGMENT
?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::GetIID, COMDAT

; 70   :     { 

	push	ebp
	mov	ebp, esp

; 71   :         return ThisIIID::GetIID(); 

	call	?GetIID@?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ ; _com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4>::GetIID

; 72   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ ENDP ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::GetIID
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ PROC NEAR ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_Release, COMDAT
; _this$ = ecx

; 820  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 821  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L183123

; 822  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	call	DWORD PTR [edx+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L183123:

; 823  :         }
; 824  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4> >::_Release
_TEXT	ENDS
PUBLIC	?GetIID@?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ ; _com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4>::GetIID
; Function compile flags: /Odt /RTCsu
;	COMDAT ?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ
_TEXT	SEGMENT
?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ PROC NEAR ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::GetIID, COMDAT

; 70   :     { 

	push	ebp
	mov	ebp, esp

; 71   :         return ThisIIID::GetIID(); 

	call	?GetIID@?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ ; _com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4>::GetIID

; 72   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?GetIID@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@SAABU_GUID@@XZ ENDP ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::GetIID
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ PROC NEAR ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_Release, COMDAT
; _this$ = ecx

; 820  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 821  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L183130

; 822  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	call	DWORD PTR [edx+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L183130:

; 823  :         }
; 824  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_Release
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AddRef@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ PROC NEAR ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_AddRef, COMDAT
; _this$ = ecx

; 829  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 830  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L183133

; 831  :             m_pInterface->AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	call	DWORD PTR [edx+4]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L183133:

; 832  :         }
; 833  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_AddRef@?$_com_ptr_t@V?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4> >::_AddRef
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_Release@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ PROC NEAR ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_Release, COMDAT
; _this$ = ecx

; 820  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 821  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L183148

; 822  :             m_pInterface->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	call	DWORD PTR [edx+8]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L183148:

; 823  :         }
; 824  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_Release
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ PROC NEAR ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_AddRef, COMDAT
; _this$ = ecx

; 829  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 830  :         if (m_pInterface != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L183151

; 831  :             m_pInterface->AddRef();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	call	DWORD PTR [edx+4]
	cmp	esi, esp
	call	__RTC_CheckEsp
$L183151:

; 832  :         }
; 833  :     }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_AddRef@?$_com_ptr_t@V?$_com_IIID@UFields@@$1?_GUID_00000564_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@@@AAEXXZ ENDP ; _com_ptr_t<_com_IIID<Fields,&_GUID_00000564_0000_0010_8000_00aa006d2ea4> >::_AddRef
_TEXT	ENDS
PUBLIC	?AtlThrowLastWin32@ATL@@YGXXZ			; ATL::AtlThrowLastWin32
EXTRN	_malloc:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?Init@?$CW2AEX@$0IA@@ATL@@AAEXPBGI@Z
_TEXT	SEGMENT
_nLengthA$ = -12					; size = 4
_nLengthW$ = -8						; size = 4
_this$ = -4						; size = 4
_psz$ = 8						; size = 4
_nCodePage$ = 12					; size = 4
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPBGI@Z PROC NEAR		; ATL::CW2AEX<128>::Init, COMDAT
; _this$ = ecx

; 442  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 443  : 		if (psz == NULL)

	cmp	DWORD PTR _psz$[ebp], 0
	jne	SHORT $L183161

; 444  : 		{
; 445  : 			m_psz = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 446  : 			return;

	jmp	$L184839
$L183161:

; 447  : 		}
; 448  : 		int nLengthW = lstrlenW( psz )+1;

	mov	esi, esp
	mov	ecx, DWORD PTR _psz$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, 1
	mov	DWORD PTR _nLengthW$[ebp], eax

; 449  : 		int nLengthA = nLengthW*2;

	mov	edx, DWORD PTR _nLengthW$[ebp]
	shl	edx, 1
	mov	DWORD PTR _nLengthA$[ebp], edx

; 450  : 
; 451  : 		if( nLengthA > t_nBufferLength )

	cmp	DWORD PTR _nLengthA$[ebp], 128		; 00000080H
	jle	SHORT $L183164

; 452  : 		{
; 453  : 			m_psz = static_cast< LPSTR >( malloc( nLengthA*sizeof( char ) ) );

	mov	eax, DWORD PTR _nLengthA$[ebp]
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 454  : 			if (m_psz == NULL)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $L183164

; 455  : 			{
; 456  : 				AtlThrow( E_OUTOFMEMORY );

	push	-2147024882				; 8007000eH
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L183164:

; 457  : 			}
; 458  : 		}
; 459  : 
; 460  : 		if (::WideCharToMultiByte( nCodePage, 0, psz, nLengthW, m_psz, nLengthA, NULL, NULL ) == 0)

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _nLengthA$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _nLengthW$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psz$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _nCodePage$[ebp]
	push	edx
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $L184839

; 461  : 		{
; 462  : 			AtlThrowLastWin32();

	call	?AtlThrowLastWin32@ATL@@YGXXZ		; ATL::AtlThrowLastWin32
$L184839:

; 463  : 		}
; 464  : 	}

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@?$CW2AEX@$0IA@@ATL@@AAEXPBGI@Z ENDP		; ATL::CW2AEX<128>::Init
_TEXT	ENDS
EXTRN	__imp__GetLastError@0:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowLastWin32@ATL@@YGXXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_dwError$ = -4						; size = 4
?AtlThrowLastWin32@ATL@@YGXXZ PROC NEAR			; ATL::AtlThrowLastWin32, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 81   : 	DWORD dwError = ::GetLastError();

	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwError$[ebp], eax

; 82   : 	AtlThrow( HRESULT_FROM_WIN32( dwError ) );

	cmp	DWORD PTR _dwError$[ebp], 0
	jg	SHORT $L184842
	mov	eax, DWORD PTR _dwError$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $L184843
$L184842:
	mov	ecx, DWORD PTR _dwError$[ebp]
	and	ecx, 65535				; 0000ffffH
	or	ecx, 458752				; 00070000H
	or	ecx, -2147483648			; 80000000H
	mov	DWORD PTR tv69[ebp], ecx
$L184843:
	mov	edx, DWORD PTR tv69[ebp]
	push	edx
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L184841:

; 83   : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AtlThrowLastWin32@ATL@@YGXXZ ENDP			; ATL::AtlThrowLastWin32
_TEXT	ENDS
PUBLIC	__GUID_00000550_0000_0010_8000_00aa006d2ea4
;	COMDAT __GUID_00000550_0000_0010_8000_00aa006d2ea4
; File c:\program files\microsoft visual studio .net 2003\vc7\include\comip.h
CONST	SEGMENT
__GUID_00000550_0000_0010_8000_00aa006d2ea4 DD 0550H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	06dH
	DB	02eH
	DB	0a4H
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetIID@?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT
?GetIID@?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ PROC NEAR ; _com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4>::GetIID, COMDAT

; 51   :     {

	push	ebp
	mov	ebp, esp

; 52   :         return *_IID;

	mov	eax, OFFSET FLAT:__GUID_00000550_0000_0010_8000_00aa006d2ea4

; 53   :     }

	pop	ebp
	ret	0
?GetIID@?$_com_IIID@U_Connection@@$1?_GUID_00000550_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ ENDP ; _com_IIID<_Connection,&_GUID_00000550_0000_0010_8000_00aa006d2ea4>::GetIID
_TEXT	ENDS
PUBLIC	__GUID_00000556_0000_0010_8000_00aa006d2ea4
;	COMDAT __GUID_00000556_0000_0010_8000_00aa006d2ea4
CONST	SEGMENT
__GUID_00000556_0000_0010_8000_00aa006d2ea4 DD 0556H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	06dH
	DB	02eH
	DB	0a4H
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?GetIID@?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT
?GetIID@?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ PROC NEAR ; _com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4>::GetIID, COMDAT

; 51   :     {

	push	ebp
	mov	ebp, esp

; 52   :         return *_IID;

	mov	eax, OFFSET FLAT:__GUID_00000556_0000_0010_8000_00aa006d2ea4

; 53   :     }

	pop	ebp
	ret	0
?GetIID@?$_com_IIID@U_Recordset@@$1?_GUID_00000556_0000_0010_8000_00aa006d2ea4@@3U__s_GUID@@B@@SAABU_GUID@@XZ ENDP ; _com_IIID<_Recordset,&_GUID_00000556_0000_0010_8000_00aa006d2ea4>::GetIID
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlalloc.h
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 373  : 	CAtlSafeAllocBufferManager() : m_pHead(NULL) {};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
_TEXT	ENDS
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_nRequestedSize$ = 8					; size = 4
?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 375  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 376  : 		CAtlSafeAllocBufferNode *p = (CAtlSafeAllocBufferNode*)Allocator::Allocate(nRequestedSize + sizeof(CAtlSafeAllocBufferNode));

	mov	eax, DWORD PTR _nRequestedSize$[ebp]
	add	eax, 8
	push	eax
	call	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z	; ATL::CCRTAllocator::Allocate
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 377  : 		if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $L159703

; 378  : 			return NULL;

	xor	eax, eax
	jmp	SHORT $L159690
$L159703:

; 379  : 		
; 380  : 		// Add buffer to the list
; 381  : 		p->m_pNext = m_pHead;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 382  : 		m_pHead = p;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx

; 383  : 		
; 384  : 		return p->GetData();

	mov	ecx, DWORD PTR _p$[ebp]
	call	?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
$L159690:

; 385  : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::Allocate
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC NEAR		; ATL::CCRTAllocator::Allocate, COMDAT

; 30   : 	{

	push	ebp
	mov	ebp, esp

; 31   : 		return malloc(nBytes);

	mov	eax, DWORD PTR _nBytes$[ebp]
	push	eax
	call	_malloc
	add	esp, 4

; 32   : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT
_p$159709 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 387  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L159707:

; 388  : 		// Walk the list and free the buffers
; 389  : 		while (m_pHead != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L159705

; 390  : 		{
; 391  : 			CAtlSafeAllocBufferNode* p = m_pHead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _p$159709[ebp], edx

; 392  : 			m_pHead = m_pHead->m_pNext;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 393  : 			Allocator::Free(p);

	mov	ecx, DWORD PTR _p$159709[ebp]
	push	ecx
	call	?Free@CCRTAllocator@ATL@@SAXPAX@Z	; ATL::CCRTAllocator::Free
	add	esp, 4

; 394  : 		}

	jmp	SHORT $L159707
$L159705:

; 395  : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::~CAtlSafeAllocBufferManager<ATL::CCRTAllocator>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC NEAR		; ATL::CCRTAllocator::Free, COMDAT

; 35   : 	{

	push	ebp
	mov	ebp, esp

; 36   : 		free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 37   : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 216  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 217  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::CTempBuffer<char,128,ATL::CCRTAllocator>
_TEXT	ENDS
PUBLIC	?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 225  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 226  : 		if( m_p != reinterpret_cast< T* >( m_abFixedBuffer ) )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $L159763

; 227  : 		{
; 228  : 			FreeHeap();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
$L159763:

; 229  : 		}
; 230  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::~CTempBuffer<char,128,ATL::CCRTAllocator>
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *, COMDAT
; _this$ = ecx

; 233  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		return( m_p );

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 235  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::operator char *
_TEXT	ENDS
PUBLIC	?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 243  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 		return( AllocateBytes( nElements*sizeof( T ) ) );

	mov	eax, DWORD PTR _nElements$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes

; 245  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Allocate@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
PUBLIC	??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0FB@IAFJMJBP@C?3?2Program?5Files?2Microsoft?5Visua@ ; `string'
PUBLIC	?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap
;	COMDAT ??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
CONST	SEGMENT
??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@ DB 'm_p == 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@IAFJMJBP@C?3?2Program?5Files?2Microsoft?5Visua@
CONST	SEGMENT
??_C@_0FB@IAFJMJBP@C?3?2Program?5Files?2Microsoft?5Visua@ DB 'C:\Program '
	DB	'Files\Microsoft Visual Studio .NET 2003\Vc7\atlmfc\include\at'
	DB	'lalloc.h', 00H				; `string'
; Function compile flags: /Odt /RTCsu
CONST	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 276  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		ATLASSERT( m_p == NULL );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L184868
	push	OFFSET FLAT:??_C@_08GPODJFIN@m_p?5?$DN?$DN?50?$AA@
	push	0
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0FB@IAFJMJBP@C?3?2Program?5Files?2Microsoft?5Visua@
	push	2
	call	__CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $L184868
	int	3
$L184868:

; 278  : 		if( nBytes > t_nFixedBytes )

	cmp	DWORD PTR _nBytes$[ebp], 128		; 00000080H
	jbe	SHORT $L160415

; 279  : 		{
; 280  : 			AllocateHeap( nBytes );

	mov	edx, DWORD PTR _nBytes$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap

; 281  : 		}
; 282  : 		else

	jmp	SHORT $L160416
$L160415:

; 283  : 		{
; 284  : 			m_p = reinterpret_cast< T* >( m_abFixedBuffer );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$L160416:

; 285  : 		}
; 286  : 
; 287  : 		return( m_p );

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]

; 288  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AllocateBytes@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateBytes
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap, COMDAT
; _this$ = ecx

; 312  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 313  : 		Allocator::Free( m_p );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?Free@CCRTAllocator@ATL@@SAXPAX@Z	; ATL::CCRTAllocator::Free
	add	esp, 4

; 314  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::FreeHeap
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ PROC NEAR ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData, COMDAT
; _this$ = ecx

; 365  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 366  : 			return (this + 1);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8

; 367  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ ENDP ; ATL::_ATL_SAFE_ALLOCA_IMPL::CAtlSafeAllocBufferManager<ATL::CCRTAllocator>::CAtlSafeAllocBufferNode::GetData
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z PROC NEAR ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap, COMDAT
; _this$ = ecx

; 292  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 293  : 		T* p = static_cast< T* >( Allocator::Allocate( nBytes ) );

	mov	eax, DWORD PTR _nBytes$[ebp]
	push	eax
	call	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z	; ATL::CCRTAllocator::Allocate
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 294  : 		if( p == NULL )

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $L160603

; 295  : 		{
; 296  : 			AtlThrow( E_OUTOFMEMORY );

	push	-2147024882				; 8007000eH
	call	?AtlThrow@ATL@@YGXJ@Z			; ATL::AtlThrow
$L160603:

; 297  : 		}
; 298  : 		m_p = p;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
$L184874:

; 299  : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AllocateHeap@?$CTempBuffer@D$0IA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z ENDP ; ATL::CTempBuffer<char,128,ATL::CCRTAllocator>::AllocateHeap
_TEXT	ENDS
PUBLIC	??0CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::CAtlWinModule
EXTRN	_atexit:NEAR
;	COMDAT CRT$XCU
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
CRT$XCU	SEGMENT
_$S3	DD	FLAT:_$E1
; Function compile flags: /Odt /RTCsu
CRT$XCU	ENDS
;	COMDAT _$E1
text$yc	SEGMENT
_$E1	PROC NEAR					; COMDAT

; 2602 : __declspec(selectany) CAtlWinModule _AtlWinModule;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
	call	??0CAtlWinModule@ATL@@QAE@XZ		; ATL::CAtlWinModule::CAtlWinModule
	push	OFFSET FLAT:_$E2
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E1	ENDP
text$yc	ENDS
PUBLIC	??0_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
EXTRN	__imp__AtlWinModuleInit@4:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
??0CAtlWinModule@ATL@@QAE@XZ PROC NEAR			; ATL::CAtlWinModule::CAtlWinModule, COMDAT
; _this$ = ecx

; 2573 : 	CAtlWinModule()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_ATL_WIN_MODULE70@ATL@@QAE@XZ

; 2574 : 	{
; 2575 : 		cbSize = sizeof(_ATL_WIN_MODULE);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 44			; 0000002cH

; 2576 : 		HRESULT hr = AtlWinModuleInit(this);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	DWORD PTR __imp__AtlWinModuleInit@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 2577 : 		if (FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $L88081

; 2578 : 			CAtlBaseModule::m_bInitFailed = true;

	mov	BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed
$L88081:

; 2579 : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
PUBLIC	??0CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::CComCriticalSection
PUBLIC	??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC NEAR		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CComCriticalSection@ATL@@QAE@XZ	; ATL::CComCriticalSection::CComCriticalSection
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
_TEXT	ENDS
EXTRN	_memset:NEAR
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CComCriticalSection@ATL@@QAE@XZ PROC NEAR		; ATL::CComCriticalSection::CComCriticalSection, COMDAT
; _this$ = ecx

; 114  : 	CComCriticalSection() throw()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	{
; 116  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 117  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::CComCriticalSection
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpcoll.h
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 97   : 	{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
CRT$XCU	SEGMENT
_$S6	DD	FLAT:_$E4
; Function compile flags: /Odt /RTCsu
; File c:\activex\xmlsign\crlcache.cpp
CRT$XCU	ENDS
;	COMDAT _$E4
text$yc	SEGMENT
_$E4	PROC NEAR					; COMDAT

; 56   : const _bstr_t CRLCache::selectCrlCommand = _bstr_t("SELECT CRLData, FetchTime FROM CRLCache Where CertificateIssuer = ");

	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:$SG182546
	mov	ecx, OFFSET FLAT:?selectCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::selectCrlCommand
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	push	OFFSET FLAT:_$E5
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E4	ENDP
text$yc	ENDS
CRT$XCU	SEGMENT
_$S9	DD	FLAT:_$E7
; Function compile flags: /Odt /RTCsu
CRT$XCU	ENDS
;	COMDAT _$E7
text$yc	SEGMENT
_$E7	PROC NEAR					; COMDAT

; 57   : const _bstr_t CRLCache::insertCrlCommand = _bstr_t("Insert Into CRLCache (CertificateIssuer, CRLData) Values ");

	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:$SG182553
	mov	ecx, OFFSET FLAT:?insertCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::insertCrlCommand
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	push	OFFSET FLAT:_$E8
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E7	ENDP
text$yc	ENDS
CRT$XCU	SEGMENT
_$S12	DD	FLAT:_$E10
; Function compile flags: /Odt /RTCsu
CRT$XCU	ENDS
;	COMDAT _$E10
text$yc	SEGMENT
_$E10	PROC NEAR					; COMDAT

; 58   : const _bstr_t CRLCache::deleteCrlCommand = _bstr_t("Delete From CRLCache Where ");

	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:$SG182560
	mov	ecx, OFFSET FLAT:?deleteCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::deleteCrlCommand
	call	??0_bstr_t@@QAE@PBD@Z			; _bstr_t::_bstr_t
	push	OFFSET FLAT:_$E11
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E10	ENDP
text$yc	ENDS
PUBLIC	??1CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::~CAtlWinModule
; Function compile flags: /Odt /RTCsu
;	COMDAT _$E2
text$yd	SEGMENT
_$E2	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
	call	??1CAtlWinModule@ATL@@QAE@XZ		; ATL::CAtlWinModule::~CAtlWinModule
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E2	ENDP
text$yd	ENDS
PUBLIC	?Term@CAtlWinModule@ATL@@QAEXXZ			; ATL::CAtlWinModule::Term
PUBLIC	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
xdata$x	SEGMENT
$T184901 DD	0ffffffffH
	DD	FLAT:$L184897
$T184899 DD	019930520H
	DD	01H
	DD	FLAT:$T184901
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Odt /RTCsu
xdata$x	ENDS
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CAtlWinModule@ATL@@QAE@XZ PROC NEAR			; ATL::CAtlWinModule::~CAtlWinModule, COMDAT
; _this$ = ecx

; 2582 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CAtlWinModule@ATL@@QAE@XZ
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2583 : 		Term();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Term@CAtlWinModule@ATL@@QAEXXZ		; ATL::CAtlWinModule::Term

; 2584 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184897:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
__ehhandler$??1CAtlWinModule@ATL@@QAE@XZ:
	mov	eax, OFFSET FLAT:$T184899
	jmp	___CxxFrameHandler
text$x	ENDS
??1CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::~CAtlWinModule
PUBLIC	?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
EXTRN	__imp__AtlWinModuleTerm@8:NEAR
; Function compile flags: /Odt /RTCsu
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Term@CAtlWinModule@ATL@@QAEXXZ PROC NEAR		; ATL::CAtlWinModule::Term, COMDAT
; _this$ = ecx

; 2587 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2588 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	mov	ecx, OFFSET FLAT:?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A
	call	?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__AtlWinModuleTerm@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2589 : 	}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Term@CAtlWinModule@ATL@@QAEXXZ ENDP			; ATL::CAtlWinModule::Term
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ PROC NEAR ; ATL::CAtlBaseModule::GetModuleInstance, COMDAT
; _this$ = ecx

; 206  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		return m_hInst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 208  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ENDP ; ATL::CAtlBaseModule::GetModuleInstance
_TEXT	ENDS
PUBLIC	??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC NEAR		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
_TEXT	ENDS
PUBLIC	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
; Function compile flags: /Odt /RTCsu
; File c:\program files\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpcoll.h
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 100  : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 		RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll

; 102  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_i$160433 = -8						; size = 4
_this$ = -4						; size = 4
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ PROC NEAR ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll, COMDAT
; _this$ = ecx

; 173  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L160432

; 175  : 		{
; 176  : 			for(int i = 0; i < m_nSize; i++)

	mov	DWORD PTR _i$160433[ebp], 0
	jmp	SHORT $L160434
$L160435:
	mov	ecx, DWORD PTR _i$160433[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$160433[ebp], ecx
$L160434:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$160433[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $L160436

; 177  : 				m_aT[i].~T();

	jmp	SHORT $L160435
$L160436:

; 178  : 			free(m_aT);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_free
	add	esp, 4

; 179  : 			m_aT = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$L160432:

; 180  : 		}
; 181  : 		m_nSize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 182  : 		m_nAllocSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 183  : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
; Function compile flags: /Odt /RTCsu
_TEXT	ENDS
;	COMDAT _$E5
text$yd	SEGMENT
_$E5	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:?selectCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::selectCrlCommand
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E5	ENDP
; Function compile flags: /Odt /RTCsu
text$yd	ENDS
;	COMDAT _$E8
text$yd	SEGMENT
_$E8	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:?insertCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::insertCrlCommand
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E8	ENDP
; Function compile flags: /Odt /RTCsu
text$yd	ENDS
;	COMDAT _$E11
text$yd	SEGMENT
_$E11	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:?deleteCrlCommand@CRLCache@@2V_bstr_t@@B ; CRLCache::deleteCrlCommand
	call	??1_bstr_t@@QAE@XZ			; _bstr_t::~_bstr_t
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_$E11	ENDP
text$yd	ENDS
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
PUBLIC	?selectCrlCommand@CRLCache@@2V_bstr_t@@B	; CRLCache::selectCrlCommand
PUBLIC	?insertCrlCommand@CRLCache@@2V_bstr_t@@B	; CRLCache::insertCrlCommand
PUBLIC	?deleteCrlCommand@CRLCache@@2V_bstr_t@@B	; CRLCache::deleteCrlCommand
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 02cH DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
_BSS	SEGMENT
?selectCrlCommand@CRLCache@@2V_bstr_t@@B DD 01H DUP (?)	; CRLCache::selectCrlCommand
?insertCrlCommand@CRLCache@@2V_bstr_t@@B DD 01H DUP (?)	; CRLCache::insertCrlCommand
?deleteCrlCommand@CRLCache@@2V_bstr_t@@B DD 01H DUP (?)	; CRLCache::deleteCrlCommand
_BSS	ENDS
END
