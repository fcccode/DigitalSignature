// Created by Microsoft (R) C/C++ Compiler Version 13.10.3077 (885b1d9e).
//
// c:\activex\xmlsign\testsecurexmlpayload\debug\ocspax.tli
//
// Wrapper implementations for Win32 type library ..\lib\ocspAx.dll
// compiler-generated file created 06/16/05 at 14:44:25 - DO NOT EDIT!

#pragma once

//
// interface IOcspClient wrapper method implementations
//

inline unsigned short IOcspClient::verify ( _bstr_t responderUrl ) {
    unsigned short _result = 0;
    HRESULT _hr = raw_verify(responderUrl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IOcspClient::GetTextResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOcspClient::Geterrors ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_errors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOcspClient::GetBase64Response ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Base64Response(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOcspClient::GetRevocationTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RevocationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOcspClient::GetRevocationReason ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RevocationReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOcspClient::GetOcspNonce ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OcspNonce(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOcspClient::PutOcspNonce ( _bstr_t pVal ) {
    HRESULT _hr = put_OcspNonce(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutResponderCAFileName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_ResponderCAFileName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutCheckCertificate ( _bstr_t _arg1 ) {
    HRESULT _hr = put_CheckCertificate(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutIssuerCertificate ( _bstr_t _arg1 ) {
    HRESULT _hr = put_IssuerCertificate(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutCheckCertificateFileName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_CheckCertificateFileName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutIssuerCertificateFileName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_IssuerCertificateFileName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutCheckCertificateFileFormat ( unsigned short _arg1 ) {
    HRESULT _hr = put_CheckCertificateFileFormat(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutIssuerCertificateFileFormat ( unsigned short _arg1 ) {
    HRESULT _hr = put_IssuerCertificateFileFormat(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutSignerPFXCertificate ( _bstr_t _arg1 ) {
    HRESULT _hr = put_SignerPFXCertificate(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutSignerPFXPassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_SignerPFXPassword(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutCheckPFXPassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_CheckPFXPassword(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOcspClient::GetresponderUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_responderUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOcspClient::PutresponderUrl ( _bstr_t pVal ) {
    HRESULT _hr = put_responderUrl(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutproxyHost ( _bstr_t _arg1 ) {
    HRESULT _hr = put_proxyHost(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutproxyPort ( unsigned short _arg1 ) {
    HRESULT _hr = put_proxyPort(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutproxyUsername ( _bstr_t _arg1 ) {
    HRESULT _hr = put_proxyUsername(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOcspClient::PutproxyPassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_proxyPassword(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
